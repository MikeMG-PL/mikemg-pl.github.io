













    
        
    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    











    


<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en-us"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="https://mikegalinski.com/" rel="self" type="text/html"/>
            
        
            

            

            
                <link href="https://mikegalinski.com/index.xml" rel="alternate" type="application/rss+xml"/>
            
        
            

            

            
        
            

            

            
                <link href="https://mikegalinski.com/searchindex.json" rel="alternate" type="application/json"/>
            
        

        

        

        <description></description>

        
            <language>en-us</language>
        

        
            <lastBuildDate>2024-10-04 16:58:35 &#43;0200 CEST</lastBuildDate>
        

        <link>https://mikegalinski.com/</link>

        

        <title></title>

        

        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<style>

:target:before {
  content: ''
  display: block;
  height: 100px; /* Adjust offset as needed */
  margin-top: -100px; /* Negative value equal to height */
  visibility: hidden;
}

html {
  scroll-behavior: smooth; /* Enable smooth scrolling behavior */
}

</style>
<p>Resource management in game engines is a wide term. It ranges from handling freshly exported assets to managing assets loaded into memory, in a specific form for particular engine modules. In this article I describe the most basic form of <strong>runtime resource management</strong> – based on sharing a resource loaded only once into memory.</p>
<h2 id="background">Background</h2>
<p>I present this topic in the context of a <a href="/portfolio/guiding-light/"><strong>simple game engine I coworked on</strong></a>, written in <strong>4 months</strong>, in modern C++ and DirectX 11 for courses conducted by <a href="https://p.lodz.pl/en">Lodz University of Technology</a>. Aimed <strong>at students and beginners</strong>, it&rsquo;s a guide based on our approach, working within limited time and resources to create a simple, yet fully functional engine. I don&rsquo;t claim to be an expert, and my coding style may differ from what you&rsquo;d find in AAA studios, but I hope our experience helps those taking their first steps in engine programming. And my team and I are very proud of that.</p>
<h2 id="why-basic-resource-management-is-important">Why Basic Resource Management Is Important</h2>
<p><strong>It&rsquo;s the memory cost, CPU efficiency, and loading times</strong>. Let&rsquo;s recall your first graphics programming project. Maybe it was a graphics programming course at your university or you were just playing with <a href="https://learnopengl.com">learnopengl.com</a>, or something else. <strong>Did you pay much attention to how often are the assets loaded?</strong></p>
<p>Let&rsquo;s investigate a scene having <strong>20 identical models (with multiple meshes)</strong> and <strong>20 identical textures</strong> of the &ldquo;level completed&rdquo; panel. <strong>How many times are these assets loaded?</strong></p>
<center>





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="711"
            height="400"
            src="/images/posts/post-3/case_hubd87f6e866213ecbad592fd756a27da6_489094_711x400_resize_q100_h2_lanczos_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-3\/case_hubd87f6e866213ecbad592fd756a27da6_489094_711x400_resize_q100_lanczos_3.png'" />
      
    

  
  






  <script>
    window.addEventListener("load", (e) => {
      const lightbox = GLightbox();
    });
  </script>


</center>



  



<div class="notice info">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 18 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M9.16109 0.993016C9.97971 1.03952 10.6611 1.42989 11.0721 2.22339L17.7981 15.8014C18.4502 17.1739 17.4403 19.0208 15.7832 19.0474H2.23859C0.730337 19.0234 -0.507163 17.3108 0.231587 15.7864L7.08321 2.20877C7.21146 1.96502 7.26996 1.89452 7.38059 1.76664C7.82534 1.25102 8.31171 0.975016 9.16109 0.993016ZM9.05046 2.49189C8.79284 2.50464 8.55696 2.64902 8.42834 2.87327C6.06134 7.36539 3.77946 11.9036 1.56546 16.4734C1.36071 16.9328 1.71209 17.5223 2.22621 17.547C6.74871 17.6201 11.2731 17.6201 15.7956 17.547C16.2925 17.523 16.666 16.953 16.459 16.4783C14.2866 11.9093 12.0471 7.37102 9.72171 2.87814C9.58446 2.63402 9.38309 2.48739 9.05046 2.49189Z"
          fill="currentColor" />
        <path
          d="M9.61323 13.2153H8.35773L8.21973 7.04688H9.75723L9.61323 13.2153ZM8.17773 15.1015C8.17773 14.8731 8.25161 14.6841 8.39973 14.5338C8.54823 14.3838 8.75036 14.3084 9.00648 14.3084C9.26298 14.3084 9.46511 14.3838 9.61323 14.5338C9.76136 14.6841 9.83561 14.8731 9.83561 15.1015C9.83561 15.3216 9.76323 15.5057 9.61923 15.6539C9.47486 15.802 9.27086 15.8762 9.00648 15.8762C8.74211 15.8762 8.53811 15.802 8.39373 15.6539C8.24973 15.5057 8.17773 15.3216 8.17773 15.1015Z"
          fill="currentColor" />
      </svg><p>Info</p>
  </div>
  <div class="notice-body"><p><strong>Without</strong> runtime resource manager, the same model and texture will be loaded into memory <strong>20 times – for each instance</strong>.<br>
<strong>With</strong> runtime resource manager, the same model and texture will be loaded into memory <strong>only once – with the first instance</strong>.</p></div>
</div>

<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">❌ without runtime resource manager</th>
<th style="text-align:center">✅ with runtime resource manager</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>memory cost</strong></td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="640"
            height="360"
            src="/images/posts/post-3/no_rm_memory_hub8e2a5824e4de038c519f53f8db8130c_23176_640x360_resize_q100_h2_lanczos_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-3\/no_rm_memory_hub8e2a5824e4de038c519f53f8db8130c_23176_640x360_resize_q100_lanczos_3.png'" />
      
    

  
  






<br>1.6 GB</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="640"
            height="360"
            src="/images/posts/post-3/rm_memory_hu848d484aaa2ce7eb459f8b4c893c28c8_18763_640x360_resize_q100_h2_lanczos_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-3\/rm_memory_hu848d484aaa2ce7eb459f8b4c893c28c8_18763_640x360_resize_q100_lanczos_3.png'" />
      
    

  
  






<br>678 MB</td>
</tr>
<tr>
<td style="text-align:center"><strong>peak CPU %<br>while loading</strong></td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="640"
            height="360"
            src="/images/posts/post-3/no_rm_percent_hub8c90133388229b6dbbe09c64527b3bf_27433_640x360_resize_q100_h2_lanczos_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-3\/no_rm_percent_hub8c90133388229b6dbbe09c64527b3bf_27433_640x360_resize_q100_lanczos_3.png'" />
      
    

  
  






<br>21%</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="640"
            height="360"
            src="/images/posts/post-3/rm_percent_hu85eeeb1c6f087cb36f37b46e5e61be94_19478_640x360_resize_q100_h2_lanczos_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-3\/rm_percent_hu85eeeb1c6f087cb36f37b46e5e61be94_19478_640x360_resize_q100_lanczos_3.png'" />
      
    

  
  






<br>14%</td>
</tr>
<tr>
<td style="text-align:center"><strong>load time</strong></td>
<td style="text-align:center">2.280 s</td>
<td style="text-align:center">0.645 s</td>
</tr>
</tbody>
</table>
<p>This is <strong>one of the first thing we wanted to pay attention to</strong> when transistioning our project from a small graphics programming application to a simple framework/engine. Such improvement was easy to implement for us, and it can be <strong>good enough</strong> in terms of optimizing memory and CPU efficiency in your first game engine too.</p>
<h2 id="implementation">Implementation</h2>
<p>Firstly, let&rsquo;s create a <code>ResourceManager</code> class and make it a Meyers&rsquo; Singleton. It&rsquo;s not the devil here. Singletons are often used in game engines, and having a global access to this only instance is really helpful. You also probably don&rsquo;t bother about thread-safety in you first, single-threaded, game engine. But keep in mind that you should know implications of using particular patterns if you want to use them.</p>
<p>In our case, we list the following types of resources: <strong>shaders, textures, and meshes</strong>.</p>



  



<div class="notice note">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M10 9V14M10 19C5.02944 19 1 14.9706 1 10C1 5.02944 5.02944 1 10 1C14.9706 1 19 5.02944 19 10C19 14.9706 14.9706 19 10 19ZM10.0498 6V6.1L9.9502 6.1002V6H10.0498Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg><p>Note</p>
  </div>
  <div class="notice-body"><p>– What about sounds?<br>
– They are handled differently via <a href="https://miniaud.io">miniaudio</a> library which takes care of reference counting.</p></div>
</div>

<p>Let&rsquo;s declare methods for loading our resources. We&rsquo;re trying to make sort of a unified interface here, but you will see how those loader methods reference other subsystems and delegate loading resources to particular factory methods in different modules.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// ResourceManager.h:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Texture<span style="color:#f92672">&gt;</span> load_texture(std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> path, TextureType <span style="color:#66d9ef">const</span> type, TextureSettings <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> settings <span style="color:#f92672">=</span> {});
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Texture<span style="color:#f92672">&gt;</span> load_cubemap(std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> paths, TextureType <span style="color:#66d9ef">const</span> type,
</span></span><span style="display:flex;"><span>                                      TextureSettings <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> settings <span style="color:#f92672">=</span> {});
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Texture<span style="color:#f92672">&gt;</span> load_cubemap(std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> path, TextureType <span style="color:#66d9ef">const</span> type, TextureSettings <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> settings <span style="color:#f92672">=</span> {});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Shader<span style="color:#f92672">&gt;</span> load_shader(std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> compute_path);
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Shader<span style="color:#f92672">&gt;</span> load_shader(std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> vertex_path, std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> pixel_path);
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Shader<span style="color:#f92672">&gt;</span> load_shader(std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> vertex_path, std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> pixel_path, std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> geometry_path);
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Shader<span style="color:#f92672">&gt;</span> load_shader(std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> vertex_path, std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> tessellation_control_path,
</span></span><span style="display:flex;"><span>                                    std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> tessellation_evaluation_path, std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> pixel_path);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Mesh<span style="color:#f92672">&gt;</span> load_mesh(u32 <span style="color:#66d9ef">const</span> array_id, std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> name, std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>Vertex<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> vertices,
</span></span><span style="display:flex;"><span>                                std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>u32<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> indices, std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Texture<span style="color:#f92672">&gt;&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> textures,
</span></span><span style="display:flex;"><span>                                DrawType <span style="color:#66d9ef">const</span> draw_type, std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Material<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> material,
</span></span><span style="display:flex;"><span>                                DrawFunctionType <span style="color:#66d9ef">const</span> draw_function <span style="color:#f92672">=</span> DrawFunctionType<span style="color:#f92672">::</span>Indexed);
</span></span></code></pre></div><p>Each of these methods is responsible for loading a resource. As you can see e.g. <code>load_shader()</code> methods are overloaded, as different shaders can be loaded. Next, let&rsquo;s declare vectors that store our resources:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Texture<span style="color:#f92672">&gt;&gt;</span> m_textures <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Mesh<span style="color:#f92672">&gt;&gt;</span> m_meshes <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Shader<span style="color:#f92672">&gt;&gt;</span> m_shaders <span style="color:#f92672">=</span> {};
</span></span></code></pre></div>


  



<div class="notice info – generating keys">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M10 9V14M10 19C5.02944 19 1 14.9706 1 10C1 5.02944 5.02944 1 10 1C14.9706 1 19 5.02944 19 10C19 14.9706 14.9706 19 10 19ZM10.0498 6V6.1L9.9502 6.1002V6H10.0498Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg><p>Info – Generating Keys</p>
  </div>
  <div class="notice-body"><p>To load resources only once we need to keep track of what has already been loaded, and return a pointer to a resource instead of loading it again. We track it by <strong>generating a unique key for each resource</strong>. This &ldquo;key&rdquo; is a string in the following <code>std::unordered_map</code>. <strong>The key is tied to an index of the resource in its respective vector</strong> and it uniquely <strong>identifies where the asset comes from</strong>. We need to distinguish that <strong>a model loaded from a file <em>&ldquo;model1.gltf&rdquo;</em>  is different from a model loaded from <em>&ldquo;model2.gltf&rdquo;</em></strong>, and that <strong>when we load <em>&ldquo;model1.gltf&rdquo;</em> again, it&rsquo;s the same file that was loaded earlier</strong>, so we need to <strong>reference what&rsquo;s already loaded</strong> instead of loading it again. The key is <strong>a bridge between an asset on disk and it&rsquo;s different form in memory</strong>.</p></div>
</div>

<p>Here are the unordered maps storing <strong>keys</strong> and <strong>IDs</strong> in the respective <code>m_textures</code>/<code>m_meshes</code>/<code>m_shaders</code> vectors.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>unordered_map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, u16<span style="color:#f92672">&gt;</span> names_to_textures <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>unordered_map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, u16<span style="color:#f92672">&gt;</span> names_to_meshes <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>unordered_map<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>string, u16<span style="color:#f92672">&gt;</span> names_to_shaders <span style="color:#f92672">=</span> {};
</span></span></code></pre></div><p>Generating keys for a resource manager is convenient when using strings, and <code>std::unordered_map</code> is a hashmap, actually. Because of working with hashes, complexity of hashmap operations (inserting, deletions, lookup&hellip;) is O(1). So <code>std::unordered_map</code> fits well here.</p>
<p>Let&rsquo;s also declare a simple method that just converts a stringstream to string, this is for convenience, and this is, in fact, generating a string key:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#a6e22e">[[nodiscard]]</span> std<span style="color:#f92672">::</span>string generate_key(std<span style="color:#f92672">::</span>stringstream <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> stream) <span style="color:#66d9ef">const</span>;
</span></span></code></pre></div><p>&hellip;and a method for retrieving an element from a vector. <strong>This is a template method</strong> <em>(compile time goes brrr!)</em>  but in this simple case it could be just three similar methods for each type of resource. It might look a bit ugly for you, but handling it like that is not necessarily bad. The resources are vastly different, and the more types of them you have, the harder it gets to prepare a unified approach. The nature of a resource manager itself often results in methods like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> get_from_vector(std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> key)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    i32 id <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span>T, Texture<span style="color:#f92672">&gt;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">auto</span> <span style="color:#66d9ef">const</span> it <span style="color:#f92672">=</span> names_to_textures.find(key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (it <span style="color:#f92672">!=</span> names_to_textures.end())
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            id <span style="color:#f92672">=</span> it<span style="color:#f92672">-&gt;</span>second;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> m_textures[id];
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span>T, Mesh<span style="color:#f92672">&gt;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">auto</span> <span style="color:#66d9ef">const</span> it <span style="color:#f92672">=</span> names_to_meshes.find(key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (it <span style="color:#f92672">!=</span> names_to_meshes.end())
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            id <span style="color:#f92672">=</span> it<span style="color:#f92672">-&gt;</span>second;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> m_meshes[id];
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">constexpr</span> (std<span style="color:#f92672">::</span>is_same_v<span style="color:#f92672">&lt;</span>T, Shader<span style="color:#f92672">&gt;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">auto</span> <span style="color:#66d9ef">const</span> it <span style="color:#f92672">=</span> names_to_shaders.find(key);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (it <span style="color:#f92672">!=</span> names_to_shaders.end())
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            id <span style="color:#f92672">=</span> it<span style="color:#f92672">-&gt;</span>second;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> m_shaders[id];
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nullptr</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It could be automated with some autogenerated code (we have an <em>&ldquo;Engine Header Tool&rdquo;</em>  in our project used for e.g. generating (de)serialization code for components). Have a better idea for implementing it? <strong>Post it in a comment below!</strong></p>
<p>The above function, firstly, <strong>checks which type of resource are we dealing with</strong> (e.g. <code>if constexpr (std::is_same_v&lt;T, Texture&gt;)</code> is true if the given type is <code>Texture</code>) – this decides in which unordered map are we going to look for the key, and in which vector – for the resource. Then we&rsquo;re using <code>std::unordered_map::find()</code> to find the <strong>key</strong> in our unordered map. If this key is found, we <strong>return the ID of the resource</strong> paired with the key. <strong>If not, we return <code>nullptr</code>.</strong></p>
<hr>
<p>We&rsquo;re lacking the last peace of the puzzle. <strong>How do the loading methods work?</strong> And maybe at this point the idea of &ldquo;keys&rdquo; representing assets is still murky? Let me clarify:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// ResourceManager.cpp:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Shader<span style="color:#f92672">&gt;</span> ResourceManager<span style="color:#f92672">::</span>load_shader(std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> vertex_path, std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> pixel_path)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>stringstream stream;
</span></span><span style="display:flex;"><span>    stream <span style="color:#f92672">&lt;&lt;</span> vertex_path <span style="color:#f92672">&lt;&lt;</span> pixel_path;
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> key <span style="color:#f92672">=</span> generate_key(stream);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> resource_ptr <span style="color:#f92672">=</span> get_from_vector<span style="color:#f92672">&lt;</span>Shader<span style="color:#f92672">&gt;</span>(key);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (resource_ptr <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nullptr</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> resource_ptr;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    resource_ptr <span style="color:#f92672">=</span> ShaderFactory<span style="color:#f92672">::</span>create(vertex_path, pixel_path);
</span></span><span style="display:flex;"><span>    m_shaders.emplace_back(resource_ptr);
</span></span><span style="display:flex;"><span>    names_to_shaders.insert(std<span style="color:#f92672">::</span>make_pair(key, m_shaders.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> resource_ptr;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is a <code>load_shader()</code> function for shader programs in which we specify just a vertex shader and a pixel (fragment) shader. Again, <strong>shader file A is different from shader file B</strong>. So we <strong>generate a key</strong> of this shader asset <strong>from the paths of vertex and pixel shader</strong>!</p>
<p>We declare a stringstream and fill it with <code>vertex_path</code> and <code>pixel_path</code>. Then we use <code>generate_key()</code> method that will convert the stringstream to string and return it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string ResourceManager<span style="color:#f92672">::</span>generate_key(std<span style="color:#f92672">::</span>stringstream <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> stream) <span style="color:#66d9ef">const</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> stream.str();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then, in <code>load_shader()</code>, we obtain a resource from the respective vector (<code>auto resource_ptr = get_from_vector&lt;Shader&gt;(key);</code>) We tell what type of resource it is as a template parameter. And we will have either a proper resource (so we can return it and save memory, yay!) or we have a <code>nullptr</code> if nothing was found in the vector.</p>
<p>Look again what happens when no resource was found:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// (...)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>resource_ptr <span style="color:#f92672">=</span> ShaderFactory<span style="color:#f92672">::</span>create(vertex_path, pixel_path);
</span></span><span style="display:flex;"><span>m_shaders.emplace_back(resource_ptr);
</span></span><span style="display:flex;"><span>names_to_shaders.insert(std<span style="color:#f92672">::</span>make_pair(key, m_shaders.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> resource_ptr;
</span></span></code></pre></div><p><strong>When resource was not found in the vector, it needs to be loaded</strong>. And it might vary from resource to resource. Here we <strong>call a factory method</strong> that will <strong>load</strong> and create a valid shader program, <strong><code>emplace_back()</code> it into the vector</strong>, and <strong><code>insert()</code> a key-ID pair into the unordered map</strong>. From now on, the same resource (with this key) will no longer be loaded again, resource manager will just return already loaded asset from the vector. <code>ShaderFactory::create()</code> can be replaced with your method that&rsquo;s used for loading and compiling shaders, of course.</p>
<p>Let&rsquo;s see another example. Meshes can be either parts of some models (loaded using libraries such as <a href="https://github.com/syoyo/tinygltf">tinygltf</a> or <a href="https://github.com/assimp/assimp">Assimp</a>) or they can be generated from code (e.g. cubes and spheres). How to properly distinguish meshes to load them <strong>only</strong> when needed?</p>
<p>Here&rsquo;s the trick: we used <strong>a mesh ID within the model</strong>, and <strong>paths to all textures</strong> in addition to <strong>a model name</strong> to generate a key.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Mesh<span style="color:#f92672">&gt;</span> ResourceManager<span style="color:#f92672">::</span>load_mesh(u32 <span style="color:#66d9ef">const</span> array_id, std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> model_name, std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>Vertex<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> vertices,
</span></span><span style="display:flex;"><span>                                                 std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>u32<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> indices, std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Texture<span style="color:#f92672">&gt;&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> textures,
</span></span><span style="display:flex;"><span>                                                 DrawType <span style="color:#66d9ef">const</span> draw_type, std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Material<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> material,
</span></span><span style="display:flex;"><span>                                                 DrawFunctionType <span style="color:#66d9ef">const</span> draw_function)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>stringstream stream;
</span></span><span style="display:flex;"><span>    stream <span style="color:#f92672">&lt;&lt;</span> model_name <span style="color:#f92672">&lt;&lt;</span> array_id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">auto</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> texture : textures)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        stream <span style="color:#f92672">&lt;&lt;</span> texture<span style="color:#f92672">-&gt;</span>path;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>string <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span> key <span style="color:#f92672">=</span> generate_key(stream);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">auto</span> resource_ptr <span style="color:#f92672">=</span> get_from_vector<span style="color:#f92672">&lt;</span>Mesh<span style="color:#f92672">&gt;</span>(key);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (resource_ptr <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nullptr</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> resource_ptr;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    resource_ptr <span style="color:#f92672">=</span> MeshFactory<span style="color:#f92672">::</span>create(vertices, indices, textures, draw_type, material, draw_function);
</span></span><span style="display:flex;"><span>    m_meshes.emplace_back(resource_ptr);
</span></span><span style="display:flex;"><span>    names_to_meshes.insert(std<span style="color:#f92672">::</span>make_pair(key, m_meshes.size() <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> resource_ptr;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Processing all meshes within one model, in a <code>Model</code> class, looks like this now:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// Model.cpp:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> Model<span style="color:#f92672">::</span>proccess_node(aiNode <span style="color:#66d9ef">const</span><span style="color:#f92672">*</span> node, aiScene <span style="color:#66d9ef">const</span><span style="color:#f92672">*</span> scene)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (u32 i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> node<span style="color:#f92672">-&gt;</span>mNumMeshes; <span style="color:#f92672">++</span>i)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        aiMesh <span style="color:#66d9ef">const</span><span style="color:#f92672">*</span> mesh <span style="color:#f92672">=</span> scene<span style="color:#f92672">-&gt;</span>mMeshes[node<span style="color:#f92672">-&gt;</span>mMeshes[i]];
</span></span><span style="display:flex;"><span>        m_meshes.emplace_back(proccess_mesh(mesh, scene));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// (...)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Mesh<span style="color:#f92672">&gt;</span> Model<span style="color:#f92672">::</span>proccess_mesh(aiMesh <span style="color:#66d9ef">const</span><span style="color:#f92672">*</span> mesh, aiScene <span style="color:#66d9ef">const</span><span style="color:#f92672">*</span> scene)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// (...)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// m_meshes is being filled, so m_meshes.size() gets incremented and it&#39;s unique each iteration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> ResourceManager<span style="color:#f92672">::</span>get_instance().load_mesh(m_meshes.size(), model_path, vertices,
</span></span><span style="display:flex;"><span>                                                    indices, textures, m_draw_type, material); <span style="color:#75715e">// array_id for generating key is an index in m_meshes 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>Passing a size of <code>m_meshes</code> to <code>ResourceManager</code> when filling <code>m_meshes</code> to generate a key is smart and easy! But what if a mesh is generated, e.g. it&rsquo;s a simple code-generated cube or a quad? Take a look:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// &#34;Button&#34;, a class that needs to create a mesh from code. Button.cpp:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Mesh<span style="color:#f92672">&gt;</span> Button<span style="color:#f92672">::</span>create_sprite() <span style="color:#66d9ef">const</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>Vertex<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span> vertices <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        {glm<span style="color:#f92672">::</span>vec3(<span style="color:#f92672">-</span><span style="color:#ae81ff">1.0f</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1.0f</span>, <span style="color:#ae81ff">0.0f</span>), {}, {<span style="color:#ae81ff">0.0f</span>, <span style="color:#ae81ff">0.0f</span>}}, <span style="color:#75715e">// bottom left
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        {glm<span style="color:#f92672">::</span>vec3(<span style="color:#ae81ff">1.0f</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1.0f</span>, <span style="color:#ae81ff">0.0f</span>), {}, {<span style="color:#ae81ff">1.0f</span>, <span style="color:#ae81ff">0.0f</span>}}, <span style="color:#75715e">// bottom right
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        {glm<span style="color:#f92672">::</span>vec3(<span style="color:#ae81ff">1.0f</span>, <span style="color:#ae81ff">1.0f</span>, <span style="color:#ae81ff">0.0f</span>), {}, {<span style="color:#ae81ff">1.0f</span>, <span style="color:#ae81ff">1.0f</span>}}, <span style="color:#75715e">// top right
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        {glm<span style="color:#f92672">::</span>vec3(<span style="color:#f92672">-</span><span style="color:#ae81ff">1.0f</span>, <span style="color:#ae81ff">1.0f</span>, <span style="color:#ae81ff">0.0f</span>), {}, {<span style="color:#ae81ff">0.0f</span>, <span style="color:#ae81ff">1.0f</span>}}, <span style="color:#75715e">// top left
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>u32<span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span> indices <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Texture<span style="color:#f92672">&gt;&gt;</span> textures;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>shared_ptr<span style="color:#f92672">&lt;</span>Texture<span style="color:#f92672">&gt;&gt;</span> diffuse_maps <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>    TextureSettings texture_settings <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>    texture_settings.wrap_mode_x <span style="color:#f92672">=</span> TextureWrapMode<span style="color:#f92672">::</span>ClampToEdge;
</span></span><span style="display:flex;"><span>    texture_settings.wrap_mode_y <span style="color:#f92672">=</span> TextureWrapMode<span style="color:#f92672">::</span>ClampToEdge;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>m_texture_path.empty())
</span></span><span style="display:flex;"><span>        diffuse_maps.emplace_back(ResourceManager<span style="color:#f92672">::</span>get_instance().load_texture(m_texture_path, TextureType<span style="color:#f92672">::</span>Diffuse, texture_settings));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    textures.insert(textures.end(), diffuse_maps.begin(), diffuse_maps.end());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ResourceManager<span style="color:#f92672">::</span>get_instance().load_mesh(<span style="color:#ae81ff">0</span>, m_texture_path, vertices, indices, textures, DrawType<span style="color:#f92672">::</span>Triangles, material);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You can see two usages of <code>ResourceManager</code> here. The first one is for a texture, and the second one is for handling a code-generated quad. In this case, <strong>we only need info about the texture for the quad to uniquely identify it</strong>. So we simply pass &ldquo;0&rdquo; as an <code>array_id</code>, because there&rsquo;s no mesh array in <code>Button</code> class, it&rsquo;s just one mesh with four vertices declared by hand.</p>
<p>In more complex cases you might need to come up with more sophisticated ways of generating keys to identify the assets.</p>
<h2 id="summary">Summary</h2>
<p>That&rsquo;s it! I hope now you can be happy with your saved memory, smaller CPU usage, and shorter loading times. 😄 Even if the performance of your engine was improved just by a little, this was <strong>an important step in building a sensible engine architecture.</strong> And <strong>you will thank yourself for writing runtime resource manager</strong> when you will approach programming systems that <strong>load plenty of entities</strong>, such as <strong>particle systems</strong>. Here&rsquo;s a recap of the post:</p>
<div class="conclusionsum">
  <div class="conclusionsum-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion summary</p>
  </div>
  <div class="conclusionsum-body">
    <p><p>How basic runtime resource manager works when you request (load) a resource:</p>
<ul>
<li><strong>it generates a key</strong> (each loading function may have slightly different implementation).</li>
<li><strong>calls a template method <code>get_from_vector()</code></strong> specifying desired resource type and providing the key. It will return either <code>nullptr</code> or a valid resource.
<ul>
<li>if a <strong>valid resource</strong> is returned by <code>get_from_vector()</code>, <strong>you&rsquo;ve got your resource</strong>!</li>
<li>if a <code>nullptr</code> is returned by <code>get_from_vector()</code>, a custom loading function (e.g. from a <code>ShaderLoader</code>) is called and the <strong>returned value is added to a vector</strong>. A <strong>key and ID</strong> pair is added to an unordered map. The freshly loaded resource is returned.</li>
</ul>
</li>
</ul></p>
  </div>
</div>
<p>Special thanks to:</p>
<ul>
<li><a href="https://www.linkedin.com/in/mariusz-sielicki/">Mariusz Sielicki</a>, an experienced developer who has guided me and my team through struggles with resource management and broadened my grasp of how vast this topic is.</li>
<li>Activision, for <a href="https://youtu.be/e_SSo7u1r_w?t=17490">appreciating our project and awarding it</a> at ZTGK 2024 Gamedev Contest.</li>
</ul>
<h2 id="sources--additional-materials">Sources &amp; Additional Materials</h2>
<ul>
<li><a href="https://www.amazon.com/Engine-Architecture-Third-Jason-Gregory/dp/1138035459">Game Engine Architecture, 3rd Edition</a> – a Bible of engine programming, serving as a great introductory text. Has a solid chapter on resource management. Great!</li>
<li><a href="https://www.gamedev.net/tutorials/_/technical/game-programming/a-resource-manager-for-game-assets-r3807/">A Resource Manager for Game Assets</a> – an article on gamedev.net showing a similar approach with a use of an unordered map.</li>
</ul>
]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,2024-10-04:/blog/post-3/</guid>

                
                    <link>https://mikegalinski.com/blog/post-3/</link>
                

                
                    <pubDate>Fri, 04 Oct 2024 16:58:35 CEST</pubDate>
                

                
                    <title>Basic Resource Management in a Custom Game Engine</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<style>

:target:before {
  content: ''
  display: block;
  height: 100px; /* Adjust offset as needed */
  margin-top: -100px; /* Negative value equal to height */
  visibility: hidden;
}

html {
  scroll-behavior: smooth; /* Enable smooth scrolling behavior */
}

</style>
<p>&ldquo;Heartbreaker&rdquo; started as a job interview task I built in one weekend. 18 months later, my teammates and I won an award with &ldquo;Heartbreaker&rdquo; during a global gamedev conference, surpassing over a 100 professional indie teams. How did we achieve it?</p>
<h2 id="abstract">Abstract</h2>
<p>This text reflects my experience as <strong>a team coordinator</strong> for the game &ldquo;Heartbreaker.&rdquo; It is also <strong>a postmortem</strong> of the game. I present loosely gathered thoughts on our multielement, holistic approach to developing &ldquo;Heartbreaker&rdquo;. I believe that <strong>the amazing interdisciplinary team I&rsquo;ve had the pleasure of working with</strong>, along with this <strong>holistic approach to the project</strong>, have been key to creating a game we are so proud of.</p>
<h2 id="murky-roles">Murky Roles</h2>
<p>It is <strong>five of us</strong> in &ldquo;Disco Angels&rdquo; team and everyone was involved into giving the &ldquo;macro&rdquo; direction of the game, designing &ldquo;micro&rdquo; elements of gameplay, or production. But some roles are indeed visible, and the key to cooperation in our tiny team is&hellip; trust!</p>
<center>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 30px; font-family: Signika;"><strong>Our team receiving &ldquo;Best Gameplay&rdquo; award at Game Access Conference 2024, Indie Showcase</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="900"
            height="600"
            src="/images/posts/post-2/gac_huab1f3f7612d9f8a95b1a50178f629149_659458_0x600_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/gac_huab1f3f7612d9f8a95b1a50178f629149_659458_0x600_resize_q100_lanczos.jpg'" />
      
    

  
  






  <script>
    window.addEventListener("load", (e) => {
      const lightbox = GLightbox();
    });
  </script>

</td>
</tr>
</tbody>
</table>
</center>
<p>When an important artistic decision needs to be made, <a href="https://www.artstation.com/agatagranosik">Agata</a>, our art lead, has the final word. When there&rsquo;s a critical bug that needs to be fixed immediately, I know I can always trust <a href="https://github.com/0GreenClover0">Mikołaj</a>. When we had to implement an emergency option as fast as possible, <a href="https://github.com/kilifux">Mateusz</a> programmed it in a flash. Want to capture the atmosphere of a location with sound and music? <a href="https://soundcloud.com/michal_swistak">Michał Świstak</a> for the rescue! And me, with responsibilities ranging from programming to supervising formalities around events or setting up tasks. A conclusion?</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>The key to identifying roles in our team is trust. We feel responsible for the vision behind the game <strong>as one</strong>.</p>
  </div>
</div>
<h2 id="elements-of-holistic-production-in-heartbreaker">Elements of Holistic Production in &ldquo;Heartbreaker&rdquo;</h2>
<p>Applying a holistic approach during the development of &ldquo;Heartbreaker&rdquo; was one of the aspects I loved the most about my role as a leader. It involved <strong>acknowledging every part of our creative vision and bringing it to life within a realistic timeframe</strong>. Several factors contributed to the high-quality experience we aimed to deliver, which I refer to as <strong>&ldquo;elements&rdquo;</strong>. For instance, knowing we would showcase our game at a professional game development conference, we wanted to ensure that <strong>none of the elements misfit</strong> or were <strong>of lower quality than the rest</strong>. Additionally, we aimed for all elements to support one another!</p>
<p>I encourage you to get to know <a href="/portfolio/heartbreaker/">“Heartbreaker.”</a> This will help you follow the text more easily. You can even download and try the game yourself.</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/9UdSVbAIhKI?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<br>



  



<div class="notice note">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M10 9V14M10 19C5.02944 19 1 14.9706 1 10C1 5.02944 5.02944 1 10 1C14.9706 1 19 5.02944 19 10C19 14.9706 14.9706 19 10 19ZM10.0498 6V6.1L9.9502 6.1002V6H10.0498Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg><p>Note</p>
  </div>
  <div class="notice-body"><p>The elements presented here aren&rsquo;t prioritized in any way. Sure, prioritization and resource allocation were different in case of every element, but we wanted to <strong>consider all the elements together</strong> so they support each other. This is what we call &ldquo;the holistic approach&rdquo; in &ldquo;Heartbreaker.&rdquo;</p></div>
</div>

<h3 id="heading"></h3>
<h4 id="gameplay">Gameplay</h4>
<p>&ldquo;Heartbreaker&rdquo; started as a job interview task but eventually evolved into something entirely different in terms of art and gameplay. I describe it further in section <a href="#the-art-of-defining-scope-and-cutting-things-out">The Art of Defining Scope And Cutting Things Out</a>.</p>
<p>As an FPP platformer, it&rsquo;s built around the idea of <strong>crashing hearts of stone through dynamic movement</strong>. This works well on the <a href="#theme--story">Theme &amp; Story</a> element but is also a core gameplay mechanic. You use a <strong>dash skill</strong> to crash into opponents&rsquo; hearts in the environment. This concept evolves to later pair your movement with trampolines or new abilities, such as a grappling hook.</p>
<p>It was the easiest for us to <strong>begin the development with gameplay</strong>. While a creative vision related to a specific theme, story, or art style might come first in some projects, <strong>gameplay was the foundation in ours</strong>. We wanted to kick things off with something interactive (not lore or ten pages of backstory). Rapid prototyping and the <strong>&ldquo;fail fast&rdquo;</strong> approach to testing gameplay were key in this process.</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We started the development with gameplay – multiple prototypes, iterations, playtests, and enhancing the experience.</p>
  </div>
</div>
<p>Of course <strong>that did not mean</strong>, for instance, our artists weren&rsquo;t working on art or music elements during that time. Pure gameplay mechanics were simply what we devoted the most time to at that stage.</p>
<p>Let&rsquo;s focus on prototyping – at the beginning it was crucial to <strong>build a testable and playable version of the most important gameplay mechanics as quickly as possible</strong>. We built <strong>a few of them</strong> and tested with players (mostly students in our gamedev club) to see what worked and what didn&rsquo;t. We did this frequently, especially when we were uncertain about whether our gameplay was fun. Early playtests were essential for this. If a particular mechanic, like &ldquo;constant jumping&rdquo; (more on that later) disoriented our players, we tweaked it and tested again. If it remained confusing, we cut it out. <strong>When something &ldquo;clicked,&rdquo;</strong> even in its rough form, <strong>players confirmed that during the tests</strong>. However, it was also important to filter all feedback. We listened to our players carefully and took notes of everything they mentioned, but the final decisions were ours. We knew that playtesters often pointed us in the right direction, but their conclusions about certain aspects of gameplay might sometimes differ from the real cause of the trouble, or sometimes we might just stick to our vision.</p>
<center>





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/hb.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







         





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/grapple.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







</center>
<p>When building fundamental gameplay mechanics, we <strong>prepared a comfortable space that served our needs</strong>. It was an extra scene (a level) that was mostly empty but allowed for easy enemy spawning or testing other game systems. In &ldquo;Heartbreaker&rdquo;, we call these levels &ldquo;Labs,&rdquo; as they function like a lab for experimenting with gameplay. This approach allowed us to <strong>&ldquo;fail fast&rdquo;</strong> and iterate quickly.</p>
<center>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 30px; font-family: Signika;"><strong>An early prototype of grappling hook skill – tested on a &ldquo;Lab&rdquo; level.</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/proto.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
</center>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We prepared a comfortable space for prototyping, testing, and iterating crucial gameplay mechanics.</p>
  </div>
</div>
<h4 id="art-style--graphics">Art Style &amp; Graphics</h4>
<p>Initially, we had two ideas for the art style of &ldquo;Heartbreaker&rdquo;, but neither was connected to the other elements of the game. However, once the <strong>core gameplay</strong> and <strong>lore</strong> emerged, everything began to make a good match.</p>
<p>Those ideas were: <strong>wild west high above the ground</strong> and <strong>geometric abstraction</strong>. We chose the second option, but what we selected isn&rsquo;t as important as how we connected the art style to the other elements. A relaxing nature of the setting along with holiday and party atmosphere went well with the gameplay – crashing hearts of stone. Players having traversed the luxury (but abstract) resort thought of: the story that <strong>matched the location</strong>, and gameplay. Having seen the art making up this world reminded the relaxing, slightly unreal atmosphere of the game, parallel to those &ldquo;meta&rdquo; gameplay mechanics.</p>
<p>Our art style was not just randomly placed low-poly figures. We aimed to build a world that resembled the real one using these figures. <a href="https://www.artstation.com/agatagranosik">Agata</a>, responsible for leading the art direction of &ldquo;Heartbreaker&rdquo;, gathered a lot of references and drew inspiration from postmodern Mediterranean architecture. We blended abstract figures to shape the environment, and emissive elements that guided players where to go (neons or the wind).</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 24px; font-family: Signika;"><strong>A screenshot from &ldquo;Heartbreaker&rdquo;</strong></span></th>
<th style="text-align:center"><span style="font-size: 24px;  font-family: Signika;"><strong>La Muralla Roja hotel, a photo I took in Calpe, Spain</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="600"
            height="338"
            src="/images/posts/post-2/game_hu1df497f86d17cec5bf16a19b67578555_413119_600x0_resize_q100_h2_lanczos_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/game_hu1df497f86d17cec5bf16a19b67578555_413119_600x0_resize_q100_lanczos_3.png'" />
      
    

  
  






</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="600"
            height="338"
            src="/images/posts/post-2/real_hua723821ed68a2aec74057cddb4173af8_137465_600x0_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/real_hua723821ed68a2aec74057cddb4173af8_137465_600x0_resize_q100_lanczos.jpg'" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We wanted to make art style parallel with gameplay and story. We also aimed to make players think of our gameplay and lore when they looked at our game.</p>
  </div>
</div>
<h4 id="theme--story">Theme &amp; Story</h4>
<p><strong>I wish I had known how challenging it would be to create a heavily story-driven adventure</strong> when I started my gamedev journey. This is why we decided to begin the development with gameplay. <strong>It was also much easier to build a story around existing gameplay</strong> than to do the reverse.</p>
<p>This is how we approached &ldquo;Heartbreaker:&rdquo; we established a solid gameplay foundation, developed an emerging art style, and built on simple lore and microstory. Both we and the playtesters were happy with the results! This approach also left us plenty of room to expand the story and lore later on.</p>
<p>We knew that this is the exact approach <a href="https://youtu.be/d9_Isp17KN0?t=590">Valve took during the development of &ldquo;Portal.&rdquo;</a> Valve was extremely impressed by the prototype developed by DigiPen students, and wanted them to finish &ldquo;the portal game&rdquo; on Source Engine as fast as possible. Later on playtests showed that 15-30 minutes into the game players got bored by the lack of purpose, theme, and story. This feedback led to the development of the entire concept of Aperture Science Laboratories.</p>
<hr>
<p>Our game is quite &ldquo;meta&rdquo; in its narrative. In &ldquo;Heartbreaker&rdquo; player takes on the role of an anonymous character guided by the voice of a young woman, while visiting <strong>Elcoro</strong> – a realm inhabited by extremely wealthy individuals who achieved everything they desired in their lifes. Player then quickly realizes that this whole resort, although looking happy, is full of decadence and coldheartedness. The female narrator tells our hero to <strong>crash those hearts of stone</strong> to make the land happy again.</p>
<p>We weren&rsquo;t afraid to <strong>reach for the story to rescue our gameplay</strong>. This is <strong>why we decided to introduce the idea of crashing hearts</strong>. We wanted to inject more context and familiarity to the mechanics we created.</p>
<p>Long ago, the main gameplay idea was still the same: <strong>using dash for combat</strong>. Initially, enemies had their &ldquo;weak spot,&rdquo; the line showing where to dash in order to defeat them. During playtests it turned out that such gameplay is fun, but understanding the idea takes too long, thus, it&rsquo;s unintuitive. <strong>Story for the rescue!</strong> We redesigned the enemies and decided that hearts of stone will be their weak spots. More about how our gameplay changed over the course of the development in section <a href="#the-art-of-defining-scope-and-cutting-things-out">The Art of Defining Scope and Cutting Things Out</a>. 😉</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 24px; font-family: Signika;"><strong>Dashing over the line to defeat enemies</strong></span></th>
<th style="text-align:center"><span style="font-size: 24px;  font-family: Signika;"><strong>Crashing hearts of enemies in &ldquo;Heartbreaker&rdquo;</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/four.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/crash.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<p>I like a similar example that Jesse Schell presents in his book <a href="https://www.amazon.com/Art-Game-Design-Lenses-Third/dp/1138632058">&ldquo;The Art of Game Design: A Book of Lenses:&rdquo;</a></p>
<blockquote>My initial design for the gameplay in "Mordak's Revenge" board game required players to <b>collect five keys</b> to battle the evil wizard Mordak at his stronghold. However, I realized it would be better if Mordak <b>could come to the player instead</b>, making the experience more immediate. So, I changed the story: <b>what if Mordak's castle was hidden</b>, and players needed to <b>collect five summoning stones</b> instead of keys? Once all five were gathered, Mordak could be summoned to battle the player in any circumstances. This simple change made the desired gameplay possible.
<br>
<br>
<span style="font-size: 20px; font-family: Signika; float: right; margin-top: 8px;"><i>— Jesse Schell in his book</i></span><br>
</blockquote>
<p>Jesse Schell also points out (and I agree with him) that:</p>
<blockquote>Story elements can often be changed with just a few words, where changing elements of gameplay might take weeks of balancing, and changing elements of technology might take months of reprogramming.
<br>
<br>
<span style="font-size: 20px; font-family: Signika; float: right; margin-top: 8px;"><i>— Jesse Schell in his book</i></span><br>
</blockquote>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>Story for the rescue! We used it to support other elements better, especially gameplay and the clarity of it.</p>
  </div>
</div>
<h4 id="level-design--level-art">Level Design &amp; Level Art</h4>
<p>In a linear game where players just traverse content it is extremely crucial that they know where to go. This was the main focus during the process of designing levels in &ldquo;Heartbreaker&rdquo;. To achieve this, we iterated our levels and modified them according to how they fit the gameplay (like adjusting distances between platforms). Iterating required us to <strong>keep the levels at the stage of blockout</strong> as long as possible.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 24px; font-family: Signika;"><strong>Early blockout with minimal decor</strong></span></th>
<th style="text-align:center"><span style="font-size: 24px;  font-family: Signika;"><strong>Final game with enemies and level art applied</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/early_blockout_hu817faa3cb373ba82ab4f533a5608d859_197416_570x323_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/early_blockout_hu817faa3cb373ba82ab4f533a5608d859_197416_570x323_resize_q100_lanczos.jpg'" />
      
    

  
  






</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/final_game_hu256c679da0c3e477c1854629ea82166c_386095_570x323_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/final_game_hu256c679da0c3e477c1854629ea82166c_386095_570x323_resize_q100_lanczos.jpg'" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<p>On <a href="https://jeffhoral.artstation.com">his ArtStation</a>, Jeff Horal, Principal Environment Artist at Mountaintop, showcases many locations from &ldquo;Destiny 2&rdquo; as blockouts – representing the level design phase – and their final look after adding actual models, applying materials, and including decoration. <strong>The upper image depicts the level during design iterations, while the lower image shows the finished version:</strong></p>
<center>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 30px; font-family: Signika;">A part of &ldquo;Vostok&rdquo; – a &ldquo;Destiny 2&rdquo; map. Author: <a href="https://jeffhoral.artstation.com">Jeff Horal</a>.</span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="1200"
            height="1350"
            src="/images/posts/post-2/vostok_hu4170442ee83be5be855573cb4c32b98e_487983_1200x0_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/vostok_hu4170442ee83be5be855573cb4c32b98e_487983_1200x0_resize_q100_lanczos.jpg'" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
</center>
<p>This image was firstly presented to me during a university lecture ❤ and I wanted to reference it here too!</p>
<p>So during production, it was extremely important to <strong>keep our levels in the level design stage</strong> (the upper picture) <strong>when iterating</strong>. This was because reworking a blockout is generally like playing with building blocks, and reworking a decorated level is like destroying your freshly arranged house, moving all the walls, and furnishing it again. We knew that if we don&rsquo;t test out the levels early, we will <strong>waste plenty of time redoing level art job unnecessarily</strong>. So we aimed to enter the level art stage <strong>after</strong> deep iterations and feedback from playtesters.</p>
<p>Unfortunately, &ldquo;the YOLO approach&rdquo; kicked in a few times in several tight corners of production. Welcome to gamedev! 🎉 I discuss this further in the <a href="#the-mess-of-game-production">&ldquo;The Mess of Game Production&rdquo;</a> section.</p>
<p>The normal process looked like this: a part of the level was designed as a blockout and tested through multiple iterations. After making some pivots and adjustments, the location was ready for decoration. This was usually handled by Agata, our art lead, though other developers often contributed as well.</p>
<p>We also wanted <strong>to make every location you visit in &ldquo;Heartbreaker&rdquo; distinct and memorable</strong>. There&rsquo;s a patio with a garden party, swimming baths, a nightclub, jungle, housing district, atrium, casino, bowling alley, library, rooftop pool, mini-golf course, and a shopping mall&hellip; and that&rsquo;s just the first 20 minutes of the game! (Yes, I&rsquo;m so excited about our locations).</p>





















  
  <div
    class=" gallery 
      zoomable
    ">
    
      
      
      
        












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


        
        
        
        

        <div class="gallery-item">
          
            <a
              href="/images/posts/post-2/gallery/screen%20%281%29.png"
              style="display: block;"
              class="glightbox">
              <img
                loading="lazy"
                src="/images/posts/post-2/gallery/screen%20%281%29_hudc0f07964ef4448b48f5f03b72d8e7bd_2184194_1280x720_fit_lanczos_3.png"
                class="img"
                style="margin: 0;"
                alt="screen (1).png"
                onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/gallery\/screen%20%281%29_hudc0f07964ef4448b48f5f03b72d8e7bd_2184194_1280x720_fit_lanczos_3.png'" />
            </a>
          
        </div>
      
    
      
      
      
        












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


        
        
        
        

        <div class="gallery-item">
          
            <a
              href="/images/posts/post-2/gallery/screen%20%282%29.png"
              style="display: block;"
              class="glightbox">
              <img
                loading="lazy"
                src="/images/posts/post-2/gallery/screen%20%282%29_huec2eb80b43c5b4ab99d3a057eae7ff23_2574946_1280x720_fit_lanczos_3.png"
                class="img"
                style="margin: 0;"
                alt="screen (2).png"
                onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/gallery\/screen%20%282%29_huec2eb80b43c5b4ab99d3a057eae7ff23_2574946_1280x720_fit_lanczos_3.png'" />
            </a>
          
        </div>
      
    
      
      
      
        












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


        
        
        
        

        <div class="gallery-item">
          
            <a
              href="/images/posts/post-2/gallery/screen%20%283%29.png"
              style="display: block;"
              class="glightbox">
              <img
                loading="lazy"
                src="/images/posts/post-2/gallery/screen%20%283%29_hucccae96ba7c6eb18137e996684354d73_6281485_1280x720_fit_lanczos_3.png"
                class="img"
                style="margin: 0;"
                alt="screen (3).png"
                onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/gallery\/screen%20%283%29_hucccae96ba7c6eb18137e996684354d73_6281485_1280x720_fit_lanczos_3.png'" />
            </a>
          
        </div>
      
    
      
      
      
        












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


        
        
        
        

        <div class="gallery-item">
          
            <a
              href="/images/posts/post-2/gallery/screen%20%284%29.png"
              style="display: block;"
              class="glightbox">
              <img
                loading="lazy"
                src="/images/posts/post-2/gallery/screen%20%284%29_hu6ba27b5e874aadebe853ca3c9d2c42d5_2676930_1280x720_fit_lanczos_3.png"
                class="img"
                style="margin: 0;"
                alt="screen (4).png"
                onerror="this.onerror='null';this.src='\/images\/posts\/post-2\/gallery\/screen%20%284%29_hu6ba27b5e874aadebe853ca3c9d2c42d5_2676930_1280x720_fit_lanczos_3.png'" />
            </a>
          
        </div>
      
    
    
  </div>

  

<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We keeped levels at the stage of blockout during prototyping and tests. Finishing it, decorating, and filling with final assets <strong>too early</strong> might have resulted in unnecessary work.</p>
  </div>
</div>
<h4 id="music--sfx">Music &amp; SFX</h4>
<p>Sound and music are also something that holded our game together. They were important for many reasons. Some more obvious, like being an integral part of the antourage around the game&rsquo;s setting, just like visuals. Less obvious reasons include <strong>being a major UX component</strong> – sound can be (and should be!) used as <strong>something that gives players feedback</strong> just as user interface, particles, or other visuals.</p>
<hr>
<p>In &ldquo;Heartbreaker&rdquo;, sound effects are everywhere – they accompany every action players take, every piece of it, to fully notify the players about what is happening right now. The main goal our sound designer and composer, <a href="https://soundcloud.com/michal_swistak">Michał</a>, had was delivering the feeling of being immersed into the world we have created.</p>
<p>Soundtrack is also built around the party and holiday theme with a nostalgic addition to it. Players traverse the levels listening to chill &amp; beach house music. What is more, the music reflects the atmosphere of the story we discover and locations we visit. When we arrive at the garden party at the very beginning of the game, we can hear a lively dance track. When we reach darker but much more magical jungle, <a href="https://youtu.be/9UdSVbAIhKI?t=204" target="_blank">the music changes to more nostalgic</a>. You can listen to the full soundtrack below:</p>
<div style="width: 500px; height: 500px; display: flex; flex-direction: column; justify-content: center; align-items: center; margin: 0 auto;">
    <iframe width="100%" height="450" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/playlists/1842737232&color=%2398bcdc&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe><div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"><a href="https://soundcloud.com/michal_swistak" title="michal_swistak" target="_blank" style="color: #cccccc; text-decoration: none;">Michał Świstak</a> · <a href="https://soundcloud.com/michal_swistak/sets/heartbreaker_ost" title="heartbreaker_OST" target="_blank" style="color: #cccccc; text-decoration: none;">Heartbreaker OST</a></div>
</div>
<p>Please also note that our game contains <strong>full voice acting</strong>. This was extremely important in terms of delivering our simple story. I&rsquo;ve also had plenty of fun with the whole entourage around producing high-quality voiceover, as a team coordinator. <strong>We rented a recording studio and Michał, our sound designer, supervised the process of recording voicelines with Ola, our narrator</strong>. We could together analyze the voicelines on the fly and guide Ola what do say differently or with different emotions. I absolutely loved the process.</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>Sound and music provided feedback to players (told them what&rsquo;s happening) and set the atmosphere, as we believed that sound is as important as visuals.</p>
  </div>
</div>
<h4 id="ui--ux">UI &amp; UX</h4>
<p>Another consequential element of the holistic approach is the general user experience (UX). This is the overall feeling a user has while interacting with the product (game). We of course strived to bring it to a higher level and that, again, happened by massive iterations, tests, and observing players while asking <em>&ldquo;What do the players do?&rdquo;</em>, <em>&ldquo;Why do they do it?&rdquo;</em>, or <em>&ldquo;How do they do it?&rdquo;</em>.</p>
<p>There were also thousands of ways to show what&rsquo;s going on in our game, and to let players interact with the game – and that&rsquo;s where UI comes in. User interface. We knew that interface is not only things you see on your screen in an overlay manner. It&rsquo;s the totality of things that communicate information to the players and let them interact with your game.</p>
<p>And now I&rsquo;d like to throw a shout-out to my teacher, <a href="https://www.linkedin.com/in/jaroslawandrzejczak/">Jarosław Andrzejczak, PhD</a>, a UX researcher, who has vastly improved the general user experience and clarity of many systems and mechanics we have included in our game.</p>
<p>The main conclusion I have in reference to working on UI/UX of &ldquo;Heartbreaker&rdquo; is:</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We were able to show many things in a more natural, &ldquo;human-friendly&rdquo; way, rather than with standardized and abused (and not always perfect) video game patterns.</p>
  </div>
</div>
<p>Let&rsquo;s take this example: In the second level we introduce <strong>the grappling hook</strong>. During playtests it turned out that this skill is massively overpowered. Grappling could get us literally everywhere. We came to a conclusion that grappling needs nerfing, although in a way that doesn&rsquo;t make the players feel weakened. So we decided that <strong>there will be only one use of the grappling hook</strong> but <strong>the players will earn it back with each heartbreak</strong>. So how did we show that rule to the player?</p>
<p>Well obviously we could come up with an on-screen icon depicting a grappling hook. For instance, if it&rsquo;s full, we can use the grappling, if it&rsquo;s empty – we can&rsquo;t. <strong>That&rsquo;s the most brute-force thing one can potentially come up with</strong>. It can be done in a more natural and understandable way for the player – take a look at this idea of our teacher:</p>
<center>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 30px; font-family: Signika;"><strong>Grappling is a heart fragment – you take it by breaking a heart.</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/ux.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
</center>
<p>Why clutter the interface with additional icons just because that was the first idea that came to our minds? <strong>We had hand animations, so we decided to use them!</strong> It&rsquo;s as simple as that: <strong>grappling is a piece of a heart</strong>. If you have this piece in your hand, obvoiusly you can use it and you see your character throw it. It&rsquo;s logical. A &ldquo;side-effect&rdquo; of it is that it limits the use of grappling, so <strong>this is the exact nerf of this gameplay aspect we aimed to achieve</strong>.</p>
<h4 id="tutoring">Tutoring</h4>
<p>Players needed to learn how to play &ldquo;Heartbreaker&rdquo;. So how did we teach them rules and mechanics? A tutorial? Or maybe by throwing the players into deep water and letting them figure out gameplay on their own? We decided to apply a <strong>seamless approach</strong>. This means that, instead of a &ldquo;traditional&rdquo; tutorial we embedded the process of teaching players how to play into main levels of the game. The main goal of this was to not let the players realize that they are being taught how to play.</p>
<p>And much more. Now I want to convey that <strong>bad tutoring in this game could put off players massively</strong>. And I found this topic so important that I even <a href="/blog/post-1/" target="_blank">wrote a separate article</a> about that. Designing tutoring was a complex topic in every game I coworked on. I encourage you to visit this separate text about it. But to not leave you with nothing at this point, I would like to highlight a &ldquo;megaconclusion&rdquo; here: <strong>Paying attention to teaching players how to play paid off</strong>. We didn&rsquo;t leave it at the last moment of production, we didn&rsquo;t go for a short brief of controls or gameplay, deciding it&rsquo;s enough. We decided that embedding tutoring in gameplay is the most elegant solution here. We also <strong>made other elements, especially UI &amp; UX support the tutoring</strong>.</p>
<center>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 22px; font-family: Signika;">&ldquo;Guiding Light&rdquo;, another game I worked on, attempts to apply seamless tutoring too. You can read more about it in <a href="/blog/post-1/" target="_blank">this article</a>. </span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="800"
            height="350"
            src="/images/posts/post-1/post-1_hu15aada9750093d492186d7bc841149c3_326162_800x0_resize_q100_h2_lanczos_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/post-1_hu15aada9750093d492186d7bc841149c3_326162_800x0_resize_q100_lanczos_3.png'" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
</center>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We approached tutoring players as another important element that needed intentional planning and design. We went with &ldquo;a seamless approach&rdquo; to keep the players immersed, and we were happy with the results.</p>
  </div>
</div>
<h2 id="the-mess-of-game-production">The Mess of Game Production</h2>
<p>No matter how well production is managed, unpredictable issues may arise. This could be an unexpected engine bug that prevents crucial systems from functioning, problems with outsourcing, or even hardware malfunctions. This is why we decided to allocate a reasonable amount of time as a safety buffer. And when you&rsquo;re concerned that certain tasks may take longer than anticipated, remember what happened to us:</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>Things usually took longer than expected.</p>
  </div>
</div>
<p>An example from the production of &ldquo;Heartbreaker&rdquo; is fog. During the development of the second level, we began using a different type of fog to cover the depths of the level. It turned out that this fog caused a memory leak in the engine&rsquo;s rendering module, resulting in slower performance and eventually crashing the engine. We discovered that this bug was fixed in the next Unreal Engine hotfix. However, several factors prevented us from migrating to the new version. While this problem slowed us down to some extent, we came up with a temporary solution. We concluded that the memory leak did not occur in the built game, so we created a simple script that deactivated all the fog in the editor and reactivated it just before building the game. <strong>Emergencies like this happen</strong>.</p>
<p>To address &ldquo;the YOLO approach&rdquo; I mentioned earlier, there were significant untested sections of the blockout. Unfortunately, due to time constraints in a few tight corners of production, we had to finish the levels with very little player feedback regarding some parts. So we polished those parts, decorated them, and didn&rsquo;t look back. In several cases we were lucky and the reception of those level sections was satisfactory. However, some parts turned out to be too frustrating or difficult. The same with a few UI &amp; UX aspects – they could have been better, but we couldn&rsquo;t manage some obstacles that arised every time. And even Scrum, Trello, TO-DO lists, or feedback-based rapid prototyping fell short in a few cases because certain obstacles were simply not predicted.</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>Despite saving a part of our time budget as a safety buffer, we lacked time for testing some sections of our levels or realizing a few gameplay ideas. This is what we aim to enhance in the future.</p>
  </div>
</div>
<h2 id="the-art-of-defining-scope-and-cutting-things-out">The Art of Defining Scope And Cutting Things Out</h2>
<p>I mentioned that &ldquo;Heartbreaker&rdquo; went through a lot before its gameplay crystalized. It started with a simple recruitment task I finished in one weekend (built with Blueprints and Unreal&rsquo;s LearningKit assets). It was a completely different game which trick was <strong>jumping and moving forward constantly</strong>. This trick was blended with basic puzzles and arcade character of the game, shooting, in addition. It looked like this:</p>
<center>





















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/jump.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







</center>
<p>Of course it resembles more of a gamejam prototype than an actual game, but me and my team started to build upon this prototype, test other camera perspectives and the idea in general. But then, a real gamejam happened!</p>
<p>In 48 hours we created a game called &ldquo;The Power of Four Leaves&rdquo;, in which you played as <strong>a black cat staging a heist on a four-leaf clover storage</strong>. Players could fight lepricorns and, as the players embodied a black cat, the combat was designed as <strong>dashing in front of the lepricorns</strong>, so they are unlucky and disappear. And this is when we introduced the idea of using your movement as combat. You had to use <strong>a dash skill</strong> to make the lepricorn disappear. Pretty similar to <strong>dashing into hearts of the enemies</strong>, isn&rsquo;t it? Well, it&rsquo;s almost the same!</p>
<p>Gamejam projects often have twisted gameplay, but GIFs <strong>you&rsquo;ve already seen</strong> explain it quite well:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 24px; font-family: Signika;"><strong>Dashing in front of lepricorns to defeat them</strong></span></th>
<th style="text-align:center"><span style="font-size: 24px;  font-family: Signika;"><strong>Crashing hearts of stone in &ldquo;Heartbreaker&rdquo;</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/four.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-2/crash.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<p>We decided to blend the &ldquo;constant jumping&rdquo; idea <strong>(the one from the recruitment task)</strong> with using dash for combat and the results were&hellip; <strong>disappointing</strong>. One day I showed a prototype to some experienced devs during a local gamedev beer meeting and their feedback made us realize that <strong>this gameplay needs cuts</strong>.</p>
<p>The problem was that <strong>our gameplay consisted of too many dynamic, difficult to master mechanics</strong> that were just <strong>random things put together</strong>. Then we were standing in front of a difficult choice – what to remove?</p>
<p>We removed the whole &ldquo;constant jumping&rdquo; stuff and decided to master the dash combat. And the rest of it is &ldquo;Heartbreaker&rdquo; you can play today. We focused on <em>this one thing</em>, the <strong>unique selling point</strong> and aimed to master it. Every next gameplay aspect that was in the game to serve this idea and make it deeper. And we are proud of how it developed.</p>
<p>The main conclusion here is: <strong>we shouldn&rsquo;t have been afraid to &ldquo;kill our child&rdquo;</strong>. That means <strong>no hesitation to cut out a thing we spent time working on, if it doesn&rsquo;t work, or doesn&rsquo;t serve any real purpose in our game</strong>. We learned it the hard way, but the outcome of making such difficult decisions might be indeed lifesaving. In &ldquo;Heartbreaker&rdquo; often &ldquo;less&rdquo; meant &ldquo;better&rdquo; because of clarity, consistency, simplicity, and elegance of gameplay.</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We shouldn&rsquo;t have feared to sacrifice something we&rsquo;ve been working on for some time, if it didn&rsquo;t help our game. &ldquo;Heartbreaker&rdquo; got better after such cuts and that&rsquo;s what mattered.</p>
  </div>
</div>
<h2 id="summary">Summary</h2>
<p>Woah! That was a lot of insight into &ldquo;Heartbreaker&rdquo;. I hope that I managed to show what challenges we, as a team, needed to tackle during the development and <strong>how we tied the game together using the holistic approach</strong>. This article is also my personal point of view with this <strong>&ldquo;aspiring producer/director&rdquo; mindset</strong>. Elements uncover obstacles a producer needs to be aware of, and needs to remove, so the development team can finish the game. And I love working with obstacles and restrictions.</p>
<div class="conclusionsum">
  <div class="conclusionsum-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion summary</p>
  </div>
  <div class="conclusionsum-body">
    <p><ul>
<li>The key to identifying roles in our team is trust. We feel responsible for the vision behind the game <strong>as one</strong>.</li>
<li>We started the development with gameplay – multiple prototypes, iterations, playtests, and enhancing the experience.</li>
<li>We prepared a comfortable space for prototyping, testing, and iterating crucial gameplay mechanics.</li>
<li>We wanted to make art style parallel with gameplay and story. We also aimed to make players think of our gameplay and lore when they looked at our game.</li>
<li>Story for the rescue! We used it to support other elements better, especially gameplay and the clarity of it.</li>
<li>We keeped levels at the stage of blockout during prototyping and tests. Finishing it, decorating, and filling with final assets <strong>too early</strong> might have resulted in unnecessary work.</li>
<li>Sound and music provided feedback to players (told them what&rsquo;s happening) and set the atmosphere, as we believed that sound is as important as visuals.</li>
<li>We were able to show many things in a more natural, &ldquo;human-friendly&rdquo; way, rather than with standardized and abused (and not always perfect) video game patterns.</li>
<li>We approached tutoring players as another important element that needed intentional planning and design. We went with &ldquo;a seamless approach&rdquo; to keep the players immersed, and we were happy with the results.</li>
<li>Things usually took longer than expected.</li>
<li>Despite saving a part of our time budget as a safety buffer, we lacked time for testing some sections of our levels or realizing a few gameplay ideas. This is what we aim to enhance in the future.</li>
<li>We shouldn&rsquo;t have feared to sacrifice something we&rsquo;ve been working on for some time, if it didn&rsquo;t help our game. &ldquo;Heartbreaker&rdquo; got better after such cuts and that&rsquo;s what mattered.</li>
</ul>
</p>
  </div>
</div>
<h2 id="sources--additional-materials">Sources &amp; Additional Materials</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=R5lFhTYnSS0">&ldquo;How to become a Game Producer #1&rdquo;</a> – partly a promotion for the Futuregames game producer course, but this webinar offers valuable info about being a producer. Part #1.</li>
<li><a href="https://www.youtube.com/watch?v=SfHmVFoXmlo">&ldquo;How to become a Game Producer #2&rdquo;</a> – and part #2 here.</li>
<li><a href="https://youtu.be/d9_Isp17KN0?t=590">&ldquo;The Strange and Unseen History of Portal&rdquo;</a> – a video about the development of &ldquo;Portal&rdquo;. It mentions how the gameplay was built and polished first and the story got built upon it.</li>
<li><a href="https://www.youtube.com/watch?v=UBfKcBxtYkI">&ldquo;Narbacular Drop&rdquo; gameplay</a> – a game made by DigiPen Institute of Technology students that became a foundation of the original &ldquo;Portal.&rdquo;</li>
<li><a href="https://www.amazon.com/Art-Game-Design-Lenses-Third/dp/1138632058">&ldquo;The Art of Game Design: A Book of Lenses, Third Edition&rdquo;</a> – the bible of game design by Jesse Schell.</li>
<li><a href="https://jeffhoral.artstation.com">Jeff Horal ArtStation</a></li>
<li><a href="/blog/post-1/">&ldquo;Designing a Seamless Tutorial. Case Study of &ldquo;Guiding Light&rdquo;</a> – my another article about seamless tutorials.</li>
</ul>
]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,2024-10-01:/blog/post-2/</guid>

                
                    <link>https://mikegalinski.com/blog/post-2/</link>
                

                
                    <pubDate>Tue, 01 Oct 2024 16:58:35 CEST</pubDate>
                

                
                    <title>Holistic Game Production. How We Made “Heartbreaker”</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<style>

:target:before {
  content: '';
  display: block;
  height: 100px; /* Adjust offset as needed */
  margin-top: -100px; /* Negative value equal to height */
  visibility: hidden;
}

html {
  scroll-behavior: smooth; /* Enable smooth scrolling behavior */
}

</style>
<!-- Someone testing your game might point out that your tutorial is not fun. You, a developer convinced about its tutoring power, say:<br>*"It's a tutorial. It's supposed to teach the player how to play, not to be fun."*

**Nothing could be further from the truth!**

## Trying To Answer The Question

OK, yes, I don't know what tutorial you designed – it might be awesome! So let's discuss why tutorials in general might be **NOT** fun? Player feedback might mention it's too long, overwhelming, or text-heavy. While these points are often valid, they miss the core issue: **the form, pacing, and structure of the tutorial**. **Players shouldn't even realize they're being taught** and **the joy of discovering the game should remain intact**. That's how **seamless tutorials** are created.

## An Explicit Tutorial – "The Witcher 2: Assasins of Kings"

Firstly, let's look at an acclaimed game that has a tutorial which doesn't align with the "seamless" philosophy. **"The Witcher 2: Assasins of Kings"** by **CD Projekt RED** is a great game, but the way it guides players is very explicit. I'm not trying to judge here, but if your opinion will be that "The Witcher's 2" tutorial could be designed better, this section will show that even highly acclaimed AAA games can do it better. I'm also **NOT** trying to say that my game I devote further part of this article is better than "The Witcher 2" (because it's not). It's good to highlight here that I want to present two approaches, but it's also not a mystery that I evangelize the seamless one. And that's just my personal opinion. What you can be sure of is that good tutoring is always **iterated and tested**, and that both of presented approaches have their pros and cons. 

<center>

###


















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="750"
            height="400"
            src="/images/posts/post-1/w2_hu4166d19cdbf38d2bf63fa3a791558cb4_527345_750x400_fill_q100_lanczos_smart1_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/w2_hu4166d19cdbf38d2bf63fa3a791558cb4_527345_750x400_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  






  <script>
    window.addEventListener("load", (e) => {
      const lightbox = GLightbox();
    });
  </script>



</center>

If you want to remind "The Witcher 2" tutorial, there's a nice video by [BNGamesReviews](https://www.youtube.com/@BNGamesYT) (though I strongly recommend playing the game if you haven't):



    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/SHK8huWiMpo?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>


**And here are the things we can observe in the tutorial of "The Witcher 2":**

#### Detached From The Main Game

The tutorial in "The Witcher 2" is optional and detached from the story. You are supposed to hop into the tutorial to learn how to play before you start the prologue. It's a pity that it's not **any real adventure of Geralt**. If this was designed seamlessly, the prologue should serve as an introduction, get players to know fundamentals of the gameplay, and then unfold.

**CD Projekt RED changed their direction**. "The Witcher 3" keeps off this approach! Have you noticed that the whole region of White Orchard (and Geralt's dream before) serves as a&nbsp;seamless tutorial? You learn how to play by playing the game and being introduced slowly and seamlessly **in the first section of the game**. That's great!

#### Tutorial About The Tutorial

The first thing you see when the camera zooms in on Geralt during the tutorial is this panel:


















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="750"
            height="422"
            src="/images/posts/post-1/szkolenie-ze-szkolenia_hu1af1d2f9359c970f19780dadfaa1c295_1345514_750x422_resize_q100_lanczos_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/szkolenie-ze-szkolenia_hu1af1d2f9359c970f19780dadfaa1c295_1345514_750x422_resize_q100_lanczos_3.png'" />
      
    

  
  








**This is what you do if you apply "The Witcher's 2" approach:**
- **you immediately tell the players: *"Now you will be taught how to play!"***  Felling that you're being taught how to play might be like doing homework. The fun gets killed.
- **the players want to play but you stop them.** You may ask: *"How do I make them play if they don't know how?"*  Well, probably at the stage when Geralt has to move forward they'll get it quickly (and later on I'll show you how to make them get it seamlessly).
- **that's a lot of text.** Players don't like to read through tutorials. **Don't get me wrong:** I have nothing against text in games. There are many titles such as [Disco Elysium](https://store.steampowered.com/app/632470/Disco_Elysium__The_Final_Cut/) that nail the art of written content, but I'm talking about in-your-face tutorial panels.
- **it breaks immersion**. Each of these panels pulls you further from the world of The Witcher.

It's not bad to inform players they can return to specific hints later. However, maybe this isn't the best moment to do so. An "encyclopedia" of game mechanics is useful, but it could be introduced later as a brief reminder, not as the first thing players see in the game.

<div style="display: flex; justify-content: center; margin-top: 20px;">
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%; margin-right: -50px;">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="498"
                height="323"
                src="/images/posts/post-1/yo-dawg_hu299a65a6aed443c5683d2e5d2b639b09_64002_498x323_resize_q100_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/yo-dawg_hu299a65a6aed443c5683d2e5d2b639b09_64002_498x323_resize_q100_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    

  </div>
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%; margin-left: -50px;">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
        
        
        
    
    
        
        
          
          
          
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="570"
                height="323"
                src="/images/posts/post-1/szkolenie-ze-szkolenia.gif"
                alt=""
                onerror="this.onerror='null';this.src=''" />
          
        
    
      
      
    
    
    
    
    
    

  </div>
</div>

#### Panels For The Most Basic Controls

OK, you got tutored about tutoring. You close this panel and start playing!<br><center><span style="font-size: 30px;">**No.**</span></center>

This is what you see next:


















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="750"
            height="422"
            src="/images/posts/post-1/camera-and-controls_hu743f4b1abcdb4b1f6c009012e3407a28_1272515_750x422_resize_q100_lanczos_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/camera-and-controls_hu743f4b1abcdb4b1f6c009012e3407a28_1272515_750x422_resize_q100_lanczos_3.png'" />
      
    

  
  








Do we really need this panel to explain what the left and right analog sticks do? If we were explaining more complicated game mechanics this could be reasonable (although many things can be explained without it).

Instead of a **panel**, imagine just a **prompt**. Let's distinguish these two terms now:

<center>

| <span style="font-size: 30px; font-family: Signika;">**Prompt**</span>        |      <span style="font-size: 30px;  font-family: Signika;">**Panel**</span>     |
| :-----------: | :-----------: |
|   




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="577"
            height="215"
            src="/images/posts/post-1/prompt_hue76ce893af5ae66a32ceb19de047d40a_104214_577x215_fill_q100_lanczos_smart1_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/prompt_hue76ce893af5ae66a32ceb19de047d40a_104214_577x215_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  






    | 




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-1/camera-and-controls_hu743f4b1abcdb4b1f6c009012e3407a28_1272515_570x323_resize_q100_h2_lanczos_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/camera-and-controls_hu743f4b1abcdb4b1f6c009012e3407a28_1272515_570x323_resize_q100_lanczos_3.png'" />
      
    

  
  






 |

</center>

<blockquote><b>Prompt</b> – either non-diegetic or geometric message to the player. It may contain text, icons, or both, with simple and short instructions for controls.</blockquote>

<blockquote><b>Panel</b> – usually a non-diegetic (but sometimes it can be geometric) overlay aimed at explaining more complex aspects of the game. It uses text, images, videos, animations, or a combination of these elements. Because a panel contains more content the player needs to acknowledge, showing it often pauses the game.</blockquote>

**The above definitions are my own** (I will use them from now on). However, I have included two terms from the literature in my definitions:




  



<div class="notice info">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 18 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M9.16109 0.993016C9.97971 1.03952 10.6611 1.42989 11.0721 2.22339L17.7981 15.8014C18.4502 17.1739 17.4403 19.0208 15.7832 19.0474H2.23859C0.730337 19.0234 -0.507163 17.3108 0.231587 15.7864L7.08321 2.20877C7.21146 1.96502 7.26996 1.89452 7.38059 1.76664C7.82534 1.25102 8.31171 0.975016 9.16109 0.993016ZM9.05046 2.49189C8.79284 2.50464 8.55696 2.64902 8.42834 2.87327C6.06134 7.36539 3.77946 11.9036 1.56546 16.4734C1.36071 16.9328 1.71209 17.5223 2.22621 17.547C6.74871 17.6201 11.2731 17.6201 15.7956 17.547C16.2925 17.523 16.666 16.953 16.459 16.4783C14.2866 11.9093 12.0471 7.37102 9.72171 2.87814C9.58446 2.63402 9.38309 2.48739 9.05046 2.49189Z"
          fill="currentColor" />
        <path
          d="M9.61323 13.2153H8.35773L8.21973 7.04688H9.75723L9.61323 13.2153ZM8.17773 15.1015C8.17773 14.8731 8.25161 14.6841 8.39973 14.5338C8.54823 14.3838 8.75036 14.3084 9.00648 14.3084C9.26298 14.3084 9.46511 14.3838 9.61323 14.5338C9.76136 14.6841 9.83561 14.8731 9.83561 15.1015C9.83561 15.3216 9.76323 15.5057 9.61923 15.6539C9.47486 15.802 9.27086 15.8762 9.00648 15.8762C8.74211 15.8762 8.53811 15.802 8.39373 15.6539C8.24973 15.5057 8.17773 15.3216 8.17773 15.1015Z"
          fill="currentColor" />
      </svg><p>Info</p>
  </div>
  <div class="notice-body"><p><strong>Non-diegetic</strong> elements are UI elements residing in the <strong>non-fictional</strong>, <strong>non-spatial</strong> part of the design space. These are elements presented in an overlay manner.</p></div>
</div>




  



<div class="notice info">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 18 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M9.16109 0.993016C9.97971 1.03952 10.6611 1.42989 11.0721 2.22339L17.7981 15.8014C18.4502 17.1739 17.4403 19.0208 15.7832 19.0474H2.23859C0.730337 19.0234 -0.507163 17.3108 0.231587 15.7864L7.08321 2.20877C7.21146 1.96502 7.26996 1.89452 7.38059 1.76664C7.82534 1.25102 8.31171 0.975016 9.16109 0.993016ZM9.05046 2.49189C8.79284 2.50464 8.55696 2.64902 8.42834 2.87327C6.06134 7.36539 3.77946 11.9036 1.56546 16.4734C1.36071 16.9328 1.71209 17.5223 2.22621 17.547C6.74871 17.6201 11.2731 17.6201 15.7956 17.547C16.2925 17.523 16.666 16.953 16.459 16.4783C14.2866 11.9093 12.0471 7.37102 9.72171 2.87814C9.58446 2.63402 9.38309 2.48739 9.05046 2.49189Z"
          fill="currentColor" />
        <path
          d="M9.61323 13.2153H8.35773L8.21973 7.04688H9.75723L9.61323 13.2153ZM8.17773 15.1015C8.17773 14.8731 8.25161 14.6841 8.39973 14.5338C8.54823 14.3838 8.75036 14.3084 9.00648 14.3084C9.26298 14.3084 9.46511 14.3838 9.61323 14.5338C9.76136 14.6841 9.83561 14.8731 9.83561 15.1015C9.83561 15.3216 9.76323 15.5057 9.61923 15.6539C9.47486 15.802 9.27086 15.8762 9.00648 15.8762C8.74211 15.8762 8.53811 15.802 8.39373 15.6539C8.24973 15.5057 8.17773 15.3216 8.17773 15.1015Z"
          fill="currentColor" />
      </svg><p>Info</p>
  </div>
  <div class="notice-body"><p><strong>Geometric</strong> elements are UI elements presented in the 3D geometry without being an entity of the fictional game world.</p></div>
</div>


Source: [Beyond the HUD: User Interfaces for Increased Player Immersion in FPS Games: Master of Science Thesis](https://publications.lib.chalmers.se/records/fulltext/111921.pdf)

<br>

I believe the controls would still be clear if we swapped overwhelming panels with simple prompts. The camera focuses on The Witcher. A prompt appears:

<center>

<span style="font-size: 30px; font-family: Signika;">**Use**     </span> 




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="130"
            height="130"
            src="/images/posts/post-1/R2_huab15f85b31ecadd73e996da270f8a05e_93941_130x130_resize_q100_lanczos_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/R2_huab15f85b31ecadd73e996da270f8a05e_93941_130x130_resize_q100_lanczos_3.png'" />
      
    

  
  







<span style="font-size: 30px; font-family: Signika;">     **to look around.**</span>

</center>

Along with another one after the player uses the first (right) stick:

<center>

<span style="font-size: 30px; font-family: Signika;">**Use**     </span> 




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="130"
            height="130"
            src="/images/posts/post-1/L2_hu07a7daca110728b361dbd26b4b61b0a8_89386_130x130_resize_q100_lanczos_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/L2_hu07a7daca110728b361dbd26b4b61b0a8_89386_130x130_resize_q100_lanczos_3.png'" />
      
    

  
  







<span style="font-size: 30px; font-family: Signika;">     **to move.**</span>

</center>

When using such simple prompts, it's important that the players **have feedback** and **see the results** of taking action. In our case it's immediate, because the character starts moving and the camera starts rotating.




  



<div class="notice tip">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M12 0C18.6274 0 24 5.37258 24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0ZM12 2.4C6.69807 2.4 2.4 6.69807 2.4 12C2.4 17.3019 6.69807 21.6 12 21.6C17.3019 21.6 21.6 17.3019 21.6 12C21.6 6.69807 17.3019 2.4 12 2.4ZM15.9515 7.55147L9.6 13.9029L8.04853 12.3515C7.5799 11.8828 6.8201 11.8828 6.35147 12.3515C5.88284 12.8201 5.88284 13.5799 6.35147 14.0485L8.75147 16.4485C9.2201 16.9172 9.9799 16.9172 10.4485 16.4485L17.6485 9.24853C18.1172 8.7799 18.1172 8.0201 17.6485 7.55147C17.1799 7.08284 16.4201 7.08284 15.9515 7.55147Z"
          fill="currentColor" />
      </svg><p>Tip</p>
  </div>
  <div class="notice-body"><p>When introducing something new, use the simplest understandable explanation.</p></div>
</div>


Often we can simplify this even more using **just the icons** or **animations** showing how to perform an action. This works, if done well, because...




  



<div class="notice tip">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M12 0C18.6274 0 24 5.37258 24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0ZM12 2.4C6.69807 2.4 2.4 6.69807 2.4 12C2.4 17.3019 6.69807 21.6 12 21.6C17.3019 21.6 21.6 17.3019 21.6 12C21.6 6.69807 17.3019 2.4 12 2.4ZM15.9515 7.55147L9.6 13.9029L8.04853 12.3515C7.5799 11.8828 6.8201 11.8828 6.35147 12.3515C5.88284 12.8201 5.88284 13.5799 6.35147 14.0485L8.75147 16.4485C9.2201 16.9172 9.9799 16.9172 10.4485 16.4485L17.6485 9.24853C18.1172 8.7799 18.1172 8.0201 17.6485 7.55147C17.1799 7.08284 16.4201 7.08284 15.9515 7.55147Z"
          fill="currentColor" />
      </svg><p>Tip</p>
  </div>
  <div class="notice-body"><p>If a button icon appears out of nowhere and attracts attention, players press it.</p></div>
</div>


Now you might be thinking that I am talking about absolute trivia but an example of "The Witcher 2" shows that it's **less obvious** and **more important** that you'd think. Camera and movement are just a tip of the iceberg. In section ["Case Study of "Guiding Light" – Seamless Tutorial"](#case-study-of-guiding-light--seamless-tutorial) I show that even such simple prompts can be effective enough in more complex cases.

<hr>

An in-depth analysis of "The Witcher 2" tutorial is not a main point of this post, so I'll just briefly point out the rest of important things we can notice: 

#### 35 Hours in 25 Minutes

According to [howlongtobeat.com](https://howlongtobeat.com/game/10268), "The Witcher 2" takes around 35 hours to finish during an average playthrough (main story + side quests). And all the most important mechanics are being explained during a **half an hour** tutorial!


















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="1024"
            height="112"
            src="/images/posts/post-1/long_hu5745e8fc28a51dce421f14693c9f7adf_7671_1024x112_fill_q100_lanczos_smart1_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/long_hu5745e8fc28a51dce421f14693c9f7adf_7671_1024x112_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  








There's a need of explaining alchemy? Why don't we introduce it when it's **needed for the first time**? It could be during preparations before the fight with Kayran in Flotsam (a first major boss you face in the game). And so on with rest of the systems... I find **providing too much information at once a bad practice**.

#### Inconsistent With The Game World, Immersion-Breaking

I am talking mostly about the combat part. The game speaks directly to players and spawns enemies in front of them out of nowhere. Who are these people we kill? Why do they appear out of nowhere? Players might find it immersion-breaking and building a bad first impression.


















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="750"
            height="422"
            src="/images/posts/post-1/combat-tutorial_hu392135159ec2d7c1765cd4343b2435f5_7005807_750x422_resize_q100_lanczos_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/combat-tutorial_hu392135159ec2d7c1765cd4343b2435f5_7005807_750x422_resize_q100_lanczos_3.png'" />
      
    

  
  








<center>

*"Oh, yeah, I've just spawned out of nowhere and I'm standing still. Now kill me."*

</center>

<hr>

To sum up this part with my opinion: In case of "The Witcher 2" I think that not only was the tutorial **not fun**, but also **moderately effective**. "The Witcher 2" is often listed among [the&nbsp;worst&nbsp;game&nbsp;tutorials](https://www.youtube.com/watch?v=s7dpDKRFim8&t=89s) for a reason. Luckily, an off-putting tutorial was not followed by a bad game, and what's more, CD Projekt RED took a lesson and the process of tutoring players got vastly improved in the next installment of "The Witcher" series.

## The Best Tutorial Is The One You Don't Feel 

The [Answering The Question](#answering-the-question) section says that the process of tutoring players should be embedded into the game. And this is the moment where **you should forget about tutorials**. You shouldn't even use this word in your game.

Now it's finally time for the "What To Do About It" part!

<hr>

# WIELKA KRECHA

<hr> -->
<p>Games take different approaches to teaching players how to play. Some provide explicit tutorials before the game starts, some offer no guidance, leaving players to figure out the mechanics on their own (or check a wiki), and others teach players seamlessly as they play. During the development of our game, <a href="/portfolio/guiding-light/">&ldquo;Guiding Light&rdquo;</a>, we decided that we need the latter approach.</p>
<h2 id="what-is-a-seamless-tutorial-and-what-is-this-text-about">What Is a Seamless Tutorial and What Is This Text About</h2>
<p>A <strong>&ldquo;seamless tutorial&rdquo;</strong>, in our case, is <strong>&ldquo;a tutorial you don&rsquo;t feel is a tutorial.&rdquo;</strong></p>
<p>This text is a case study of a game I coworked on for the courses conducted by <a href="https://p.lodz.pl/en">Lodz University of Technology</a>, and depicts our design path, assumptions, conclusions, what worked out, and what could be done better. It will be easier for you to follow the text if you get to know <a href="/portfolio/guiding-light/">&ldquo;Guiding Light&rdquo;</a> first (you can even <strong>download and play it</strong>).</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ecWnXpiUJ6A?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<p>&ldquo;Guiding Light&rdquo; is a game in which <strong>you&rsquo;re a lighthouse keeper in the Pole of Cold</strong>. It&rsquo;s <strong>a casual time-management game</strong>, and your goal is not only <strong>guiding ships in a stormy night</strong>, but also <strong>collecting their cargos to feed hungry penguins</strong>!</p>
<h2 id="why-we-wanted-seamless-tutoring">Why We Wanted Seamless Tutoring</h2>
<p>The main reason our game needed a seamless tutorial was that <strong>we were presenting the demo during short hands-on sessions</strong>. &ldquo;Guiding Light&rdquo; was destined to be showcased at the <a href="https://ztgk.pl">ZTGK 2024 Gamedev Contest</a>, meaning the jury members had only a few minutes to play and talk with us at our stand. The game had to be both <strong>clear</strong> and <strong>fun</strong> from the very first seconds.</p>
<p>We deeply analyzed the nature of our game and circumstances, and concluded that:</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>Without tutoring, &ldquo;Guiding Light&rdquo; would be unclear and frustrating. With a traditional tutorial, it could be less fun, immersion-breaking, or cluttered with too much text.</p>
  </div>
</div>
<p>And we simply found such tutoring elegant and fitting our game.</p>
<!-- //
### What Exactly Is It in Our Game

In our game we identified several factors which pool together for **"seamless tutoring"**, as we call it. Those factors were **elements&nbsp;of&nbsp;the&nbsp;game design** that **brought us closer to the tutoring experience we aimed to deliver**. No tutoring versus an explicit tutorial, and us, trying to take the best from those two approaches. **Were our assumptions correct?** I will try to answer this at the end of the article. Now here's what we identified:

- **tutoring embedded into the game:** our game was initially destined to be played for a few minutes by jury. If players had just a few minutes to experience the game, we wanted to **make them jump straight into the game and not be bothered with an explicit tutorial** beforehand.
- **not letting players know they're being tutored:** if the tutorial was meant to be embedded into the game, it was crucial for us to not let the players realize they're in any kind of a tutorial. We were afraid this might initiate a feeling of **"being at school on a tedious lesson."**
- **reducing text clutter:** gameplay aspects in many titles are complex. It often results in pausing the game and explaining things directly to the players with huge amount of text. We didn't want this in "Guiding Light". **We wanted to reduce text information**, because early prototypes (and, God, we built **eleven game prototypes**) proved that **players didn't read most of our extensive text panels**.
- **not too rushed:** we believed that a rushed tutoring might not convey information effectively. So we decided to come up with a special "directing" of the first three levels (literally half of our demo!) to make sure players get used to gameplay.
- **immersive:** the tutoring is set in the game's fantasy. We use the language of the world we created and also try to explain context with elements that teach players how to play. We considered it as a significant advantage of our game. -->
<h2 id="case-study-of-guiding-light">Case Study of &ldquo;Guiding Light&rdquo;</h2>
<h3 id="heading"></h3>
<p>Now let me present elements of game design we decided to apply to <strong>teach players how to play</strong>, but to keep the experience <strong>fun, approachable, immersive, and seamless</strong>.</p>
<h4 id="we-taught-the-player-sooner-than-expected">We Taught the Player Sooner Than Expected</h4>
<p>We applied the first element of tutoring earlier than some might think&hellip; in the main menu. The first thing we wanted to teach players was that <strong>in our game they control a beam of light with a mouse</strong>. Take a look at our menu:</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/posts/post-1/menu.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







<p>Fancy, simple, and players got it subconsciously. And the game hasn&rsquo;t even started yet! We aimed to <strong>highlight something really important</strong> – controlling the light, the absolute basics. It turned out, we didn&rsquo;t need a single word, image, or animation for it, as our tests proved it is clear for the players. This is where we came to these conclusions:</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We managed to teach players subconsciously here by designing the basics (main menu) in a gameplay-supportive way.</p>
  </div>
</div>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>If some things could be explained without a single word, we didn&rsquo;t use any. We seeked the most simple solution for explaining our gameplay.</p>
  </div>
</div>
<hr>
<p>To support this, I would like to show examples from other games that do similar things:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 30px; font-family: Signika;"><strong>&ldquo;Fruit Ninja&rdquo; main menu</strong></span></th>
<th style="text-align:center"><span style="font-size: 30px;  font-family: Signika;"><strong>&ldquo;Mega Man X&rdquo; main menu</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="600"
            height="338"
            src="/images/posts/post-1/fruit_hufbf546f82da1c708a2478ef4e9a4e55b_53785_600x0_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/fruit_hufbf546f82da1c708a2478ef4e9a4e55b_53785_600x0_resize_q100_lanczos.jpg'" />
      
    

  
  






</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="600"
            height="289"
            src="/images/posts/post-1/mega_hu56e6a31c72cffd8af1213606b44652a2_55244_600x0_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/mega_hu56e6a31c72cffd8af1213606b44652a2_55244_600x0_resize_q100_lanczos.jpg'" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<p>In case of &ldquo;Fruit Ninja&rdquo; you need to cut a fruit to choose an option in the main menu. <strong>What a beautiful way to highlight the main thing you do in the game!</strong> I suspect there could be a fraction of players that would try to press a fruit instead of cutting it. In that case such menu lets them learn how to perform the most basic action in the game.</p>
<p>&ldquo;Mega Man X&rdquo; main menu has a little Mega Man as a &ldquo;cursor&rdquo;. When choosing an option, Mega Man fires a blast. This highlights that Mega Man <strong>can fire projectiles</strong>.</p>
<h4 id="tutoring-was-no-exception-to-the-gameplay-loop">Tutoring Was No Exception to the Gameplay Loop</h4>
<p>&ldquo;Guiding Light&rdquo; consists of <strong>six levels</strong>. This means that gameplay loop is closed inside every level. So a tutorial that is detached from the rest of the levels (i.e. you do stuff to learn how to play before you enter the main game) would be a major inconsistency. We wanted to keep the <strong>gameplay loop consistent between the levels</strong> and present <strong>just the game with six levels</strong>. Not a game with <strong>&ldquo;a tutorial + three levels.&rdquo;</strong> It also supported introducing new mechanics gradually, level by level.</p>
<p><strong>The solution was to make the first three levels introductory</strong> – gradually building the level of complexity. The formula was something like this:</p>
<ul>
<li>Level 1: explaining controls + context + <strong>gameplay loop</strong></li>
<li>Level 2: explaining new type of ship + the first ability + <strong>gameplay loop</strong></li>
<li>Level 3: upgrades + enemies + <strong>gameplay loop</strong></li>
</ul>
<p>In the rest of the levels (4-6), the players are on their own and need to utilize everything they learned during levels 1-3. Most importantly, <strong>the gameplay loop remains consistent</strong>. Playtests showed that players didn&rsquo;t feel like they were &ldquo;inside a tutorial&rdquo; previously and are finally in the game starting from level 4.</p>
<p>The <strong>micro loop</strong> in &ldquo;Guiding Light&rdquo; was built around <strong>guiding the ships to the port</strong> and the <strong>macro loop</strong> around <strong>guiding enough food ships to the port so all the penguins are fed</strong>, and the level is completed.</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We wanted to ensure that each level mirrors the gameplay loop. Even in &ldquo;directed tutoring levels.&rdquo;</p>
  </div>
</div>
<hr>
<p>This is the same approach that <a href="https://store.steampowered.com/app/1967510/Railbound/">&ldquo;Railbound&rdquo;</a> takes. Even if the first levels are supposed to teach the players some basics, all the levels share the same goal. Always. The consistency is kept no matter how complex the levels are.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 24px; font-family: Signika;"><strong>The first level of &ldquo;Railbound&rdquo;. Each next level keeps its gameplay loop and the goal: connecting carriages to the engine.</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">
















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/posts/post-1/railbound.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<h4 id="prompts-vs-panels">Prompts vs Panels</h4>
<p>Before we follow the tutoring process from the beginning, I&rsquo;d like to introduce two handy terms regarding showing information to player. <strong>A prompt, and a panel</strong>.</p>
<center>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 24px; font-family: Signika;"><strong>Prompt, &ldquo;Call of Duty: Advanced Warfare&rdquo;</strong></span></th>
<th style="text-align:center"><span style="font-size: 24px;  font-family: Signika;"><strong>Panel, &ldquo;#DRIVE&rdquo;</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="600"
            height="300"
            src="/images/posts/post-1/coffin_hu7e1a82fc47059604fed724e136963679_838026_600x0_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/coffin_hu7e1a82fc47059604fed724e136963679_838026_600x0_resize_q100_lanczos.jpg'" />
      
    

  
  






</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="600"
            height="277"
            src="/images/posts/post-1/drive_hue9a84b0653e0f36ed03e6ca71d3d16aa_236038_600x0_resize_q100_h2_lanczos.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/drive_hue9a84b0653e0f36ed03e6ca71d3d16aa_236038_600x0_resize_q100_lanczos.jpg'" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
</center>
<blockquote><b>Prompt</b> – either non-diegetic or geometric message to the player. It may contain text, icons, or both, with simple and&nbsp;short instructions for controls.</blockquote>
<blockquote><b>Panel</b> – usually a non-diegetic (but sometimes geometric) overlay aimed at explaining more complex aspects of&nbsp;the&nbsp;game. It uses text, images, videos, animations, or a combination of these elements. Because a panel contains more content the player needs to acknowledge, showing it often pauses the game.</blockquote>
<p><strong>The above definitions are my own</strong> (I will use them from now on). However, I have included two terms from the literature in these definitions:</p>
<p>


  



<div class="notice info">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 18 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M9.16109 0.993016C9.97971 1.03952 10.6611 1.42989 11.0721 2.22339L17.7981 15.8014C18.4502 17.1739 17.4403 19.0208 15.7832 19.0474H2.23859C0.730337 19.0234 -0.507163 17.3108 0.231587 15.7864L7.08321 2.20877C7.21146 1.96502 7.26996 1.89452 7.38059 1.76664C7.82534 1.25102 8.31171 0.975016 9.16109 0.993016ZM9.05046 2.49189C8.79284 2.50464 8.55696 2.64902 8.42834 2.87327C6.06134 7.36539 3.77946 11.9036 1.56546 16.4734C1.36071 16.9328 1.71209 17.5223 2.22621 17.547C6.74871 17.6201 11.2731 17.6201 15.7956 17.547C16.2925 17.523 16.666 16.953 16.459 16.4783C14.2866 11.9093 12.0471 7.37102 9.72171 2.87814C9.58446 2.63402 9.38309 2.48739 9.05046 2.49189Z"
          fill="currentColor" />
        <path
          d="M9.61323 13.2153H8.35773L8.21973 7.04688H9.75723L9.61323 13.2153ZM8.17773 15.1015C8.17773 14.8731 8.25161 14.6841 8.39973 14.5338C8.54823 14.3838 8.75036 14.3084 9.00648 14.3084C9.26298 14.3084 9.46511 14.3838 9.61323 14.5338C9.76136 14.6841 9.83561 14.8731 9.83561 15.1015C9.83561 15.3216 9.76323 15.5057 9.61923 15.6539C9.47486 15.802 9.27086 15.8762 9.00648 15.8762C8.74211 15.8762 8.53811 15.802 8.39373 15.6539C8.24973 15.5057 8.17773 15.3216 8.17773 15.1015Z"
          fill="currentColor" />
      </svg><p>Info</p>
  </div>
  <div class="notice-body"><p><strong>Non-diegetic</strong> elements are UI elements residing in the <strong>non-fictional</strong>, <strong>non-spatial</strong> part of the design space. These are elements presented in an <strong>overlay manner</strong>.</p></div>
</div>




  



<div class="notice info">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 18 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M9.16109 0.993016C9.97971 1.03952 10.6611 1.42989 11.0721 2.22339L17.7981 15.8014C18.4502 17.1739 17.4403 19.0208 15.7832 19.0474H2.23859C0.730337 19.0234 -0.507163 17.3108 0.231587 15.7864L7.08321 2.20877C7.21146 1.96502 7.26996 1.89452 7.38059 1.76664C7.82534 1.25102 8.31171 0.975016 9.16109 0.993016ZM9.05046 2.49189C8.79284 2.50464 8.55696 2.64902 8.42834 2.87327C6.06134 7.36539 3.77946 11.9036 1.56546 16.4734C1.36071 16.9328 1.71209 17.5223 2.22621 17.547C6.74871 17.6201 11.2731 17.6201 15.7956 17.547C16.2925 17.523 16.666 16.953 16.459 16.4783C14.2866 11.9093 12.0471 7.37102 9.72171 2.87814C9.58446 2.63402 9.38309 2.48739 9.05046 2.49189Z"
          fill="currentColor" />
        <path
          d="M9.61323 13.2153H8.35773L8.21973 7.04688H9.75723L9.61323 13.2153ZM8.17773 15.1015C8.17773 14.8731 8.25161 14.6841 8.39973 14.5338C8.54823 14.3838 8.75036 14.3084 9.00648 14.3084C9.26298 14.3084 9.46511 14.3838 9.61323 14.5338C9.76136 14.6841 9.83561 14.8731 9.83561 15.1015C9.83561 15.3216 9.76323 15.5057 9.61923 15.6539C9.47486 15.802 9.27086 15.8762 9.00648 15.8762C8.74211 15.8762 8.53811 15.802 8.39373 15.6539C8.24973 15.5057 8.17773 15.3216 8.17773 15.1015Z"
          fill="currentColor" />
      </svg><p>Info</p>
  </div>
  <div class="notice-body"><p><strong>Geometric</strong> elements are UI elements presented in the 3D geometry without being an entity of the fictional game world.</p></div>
</div>
</p>
<p>Source: <a href="https://publications.lib.chalmers.se/records/fulltext/111921.pdf">Beyond the HUD: User Interfaces for Increased Player Immersion in FPS Games: Master of Science Thesis</a></p>
<p>I decided to include those terms in this post to <strong>highlight that prompts and panels can exist in different spaces</strong> – they can be presented in <strong>an overlay manner</strong> or can be <strong>hovering somewhere in the game world</strong>. You can also observe it in our game. The &ldquo;diegetic/non-diegetic&rdquo; terminology is widely used in gamedev, so those terms are worth knowing.</p>
<p>In &ldquo;Guiding Light&rdquo; we prefer <strong>prompts</strong> over <strong>panels</strong>. This is, again, because we found prompts being the simplest solution to show aspects such as controls. However, panels do exist in the game, but they serve as credits or &ldquo;level completed&rdquo; screen.</p>
<h4 id="controls-goal-and-context">Controls, Goal, and Context</h4>
<p>The first thing you see in the game is an old lighthouse keeper who accompanies the player throughout. He communicates using dialogue boxes with <strong>subtitles</strong> and <strong>voiceover</strong>. We chose this over an instruction panel because <strong>what the player is told matches the game lore</strong> and <strong>a speaking character is multisensory</strong> (text + audio).</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      
        
        
      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="1096"
            height="480"
            src="/images/posts/post-1/post-1_hu15aada9750093d492186d7bc841149c3_326162_1096x480_fill_q100_lanczos_smart1_3.png"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/post-1_hu15aada9750093d492186d7bc841149c3_326162_1096x480_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  







<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>Our playtesters absorbed multisensory information better. A short call to action with text and voiceover was more effective than a panel with raw text information.</p>
  </div>
</div>
<p>There is also a floating prompt with mouse icon <strong>(left mouse button highlighted)</strong> to indicate that the player <strong>needs to press it</strong> for something to happen:</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/posts/post-1/mouse.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>If a button prompt appeared out of nowhere and attracted attention, players pressed it.</p>
  </div>
</div>
<p><em>&ldquo;Ahoy, lighthouse adept! The weather is awful, so we need to light the way for the ships. Let&rsquo;s guide them to the port!&quot;</em>  What do the players learn from this voiceline? <strong>The goal and the context of the game.</strong>
<br>
<br>
<em>What do I need to do?</em>  I need to guide the ships.
<br>
<em>But why?</em>  Ah, because the weather is awful.
<br>
<br>
The <strong>Left Mouse Button</strong> is always used to start the level by turning the light on. <strong>From the main menu, players already know that the mouse is used to move the beam</strong>. There are no direct instructions or mentions of illuminating the ship – everything is embedded in the game&rsquo;s lore. Our playtests showed that <strong>players easily figured out how to illuminate the way in front of the ships</strong>, and therefore, control them.</p>
<h4 id="stopping-progress-until-players-use-the-new-mechanic">Stopping Progress Until Players Use the New Mechanic</h4>
<p>The next element of tutoring is <strong>embedded into the level design</strong>. It&rsquo;s crucial for players to &ldquo;feel&rdquo; the ships at this point. The most important things they need to learn are how to turn the ships, slow them down, and make them accelerate.</p>
<p>The shape of the canal <strong>requires players to make a turn</strong>. Therefore, they need to successfully turn to reach the destination – the port. This leads to <strong>an idea we loved</strong> in terms of introducing new gameplay mechanics:</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>If we gave the players something new, it was good to lock them with this new thing, and make them use it to get out.</p>
  </div>
</div>
<p>In &ldquo;Guiding Light&rdquo; we ensure that <strong>you learn how to control the ship when you pass the first canal</strong> – curved enough to require you to turn and wide enough to <strong>give you a peaceful space to learn</strong>. And even when the ship gets crashed, a new one flows in quickly.</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/posts/post-1/canal.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







<hr>
<p>As a supplemental example of <strong>preventing progression until the players use a new &ldquo;toy&rdquo;</strong>, let&rsquo;s take <a href="https://store.steampowered.com/app/367520/Hollow_Knight/">&ldquo;Hollow Knight&rdquo;</a>, a challenging action-adventure metroidvania. At the beginning of the game the players can earn a &ldquo;Vengeful Spirit&rdquo; spell that launches a projectile hurting enemies. A little further in Ancestral Mound there is a passage guarded by Elder Baldur. This enemy cannot be hurt with a nail (melee) attack, so in order to progress <strong>(beating this particular enemy is mandatory)</strong> the players need to defeat the Elder Baldur with the &ldquo;Vengeful Spirit&rdquo;.</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/posts/post-1/hollow.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







<p>This way, developers made sure players know how to use this spell and will be able to utilize it later too.</p>
<h4 id="dots-and-connections">Dots and Connections</h4>
<p>Let&rsquo;s go back to our canal and the ship. When it arrives to the port, the old lighthouse keeper calls again:</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="600"
            height="337"
            src="/images/posts/post-1/the-ship_hu857398c2a539615a2861f0fa685e9e33_295510_600x337_fill_q100_h2_lanczos_smart1_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/the-ship_hu857398c2a539615a2861f0fa685e9e33_295510_600x337_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  







<p>There are multiple things happening:</p>
<ul>
<li><strong>the voiceline:</strong> indicates that <strong>the ship with food has arrived</strong> and that <strong>the penguin can be fed</strong></li>
<li><strong>the space button prompt:</strong> shows that <strong>we should press this button</strong></li>
<li><strong>the blinking ship</strong>: attracts attention and highlights that we should <strong>interact with it in some way</strong></li>
</ul>



  



<div class="notice note">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M10 9V14M10 19C5.02944 19 1 14.9706 1 10C1 5.02944 5.02944 1 10 1C14.9706 1 19 5.02944 19 10C19 14.9706 14.9706 19 10 19ZM10.0498 6V6.1L9.9502 6.1002V6H10.0498Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg><p>Note</p>
  </div>
  <div class="notice-body"><p><p>By the way, after we press Space, we leave the lighthouse and are able to control the hovercraft with WASD keys:</p>
<center>
  <img src="/images/posts/post-1/wsad.gif" position="center" height="400" width="400" command="fill" option="q100" class="img-fluid" webp="true">
</center></p></div>
</div>

<p>We presented these pieces of information as <strong>&ldquo;dots&rdquo;</strong> and let the players connect them.</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="1152"
            height="648"
            src="/images/posts/post-1/dots_huc1b8b14093ef30713e1a344e028cc768_40256_1152x648_fill_q100_h2_lanczos_smart1_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/dots_huc1b8b14093ef30713e1a344e028cc768_40256_1152x648_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  







<p>Turned out that in this level it was delivered clearly enough, so our playtesters managed to discover the connections between pieces of information easily:</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="1152"
            height="648"
            src="/images/posts/post-1/lines_hu0f0427d91d590b4cc706757d0475f122_85431_1152x648_fill_q100_h2_lanczos_smart1_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/lines_hu0f0427d91d590b4cc706757d0475f122_85431_1152x648_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  







<p>In this case, we <strong>built enough context</strong> and presented what needs to be done in a peaceful environment. Players did what we wanted and <strong>we preserved a minor &ldquo;Eureka!&rdquo; feeling</strong>.</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>Showing players what needs to be done with enough context, instead of giving them step-by-step instructions, worked for us.</p>
  </div>
</div>
<p>And to achieve this we used:</p>
<ul>
<li>a voiceline with text and audio</li>
<li>button prompts</li>
<li>a blinking effect on a ship</li>
</ul>
<p>What&rsquo;s more, connecting dots <strong>wasn&rsquo;t like &ldquo;solving a puzzle&rdquo;</strong>. Players didn&rsquo;t need to stop for a while to figure out what to do. It was <strong>natural</strong> and <strong>this was our desired experience</strong>. At the end of the level, you see <strong>a fish being thrown to the penguin</strong>, which then happily jumps into the water. This provides <strong>instant feedback</strong> and serves as a <strong>reward</strong>, indicating that we performed as the game intended.</p>
<h4 id="explaining-more-complex-systems">Explaining More Complex Systems</h4>
<p>&ldquo;Guiding Light&rdquo; has also <strong>two more introductory levels</strong>. <strong>The player is taught there with mostly what I&rsquo;ve already covered</strong>, even in more complex cases. Were we successful in those cases? I&rsquo;ll answer that at the end of the article. Now, there are more gameplay aspects that need to be explained:</p>
<ul>
<li><strong>a new type of ship: with fuel</strong> – this is a sort of a &ldquo;currency&rdquo; that players can collect an spend either on upgrading the lighthouse or buying the &ldquo;flash&rdquo; ability</li>
<li><strong>upgrading the lighthouse</strong> – by spending the packages in the workshop, we can make the light beam brigther and wider to make the ships more responsive</li>
<li><strong>the flash</strong> – by spending the packages in the generator, we can obtain an ability to stop all the ships in the canal for a while</li>
<li><strong>the pirates</strong> – they attack all the friendly ships!</li>
</ul>
<center>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 30px; font-family: Signika;"><strong>The &ldquo;Flash&rdquo; Ability</strong></span></th>
<th style="text-align:center"><span style="font-size: 30px;  font-family: Signika;"><strong>A Pirate Ship</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-1/flash.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="570"
            height="323"
            src="/images/posts/post-1/pirates.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 30px; font-family: Signika;"><strong>A Ship With Fuel</strong></span></th>
<th style="text-align:center"><span style="font-size: 30px;  font-family: Signika;"><strong>Upgrading The Lighthouse</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="400"
            height="400"
            src="/images/posts/post-1/tools.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
<td style="text-align:center">




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width="400"
            height="400"
            src="/images/posts/post-1/upgrade.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
</center>
<p><strong>Firstly, we need to explain a new type of ship</strong> that we must guide to the port, similarly to the food ship. <strong>However</strong>, with this ship, we <strong>obtain and keep the package</strong> as &ldquo;currency&rdquo;.<br><strong>To teach this, we use:</strong></p>
<ul>
<li>voiceline (text + audio)</li>
<li>prompts</li>
<li>blinking effect</li>
</ul>
<p>This is how the situation looks after it arrives to the port:</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="700"
            height="394"
            src="/images/posts/post-1/take-the-package_huabb632dfebb6ee84814e3b7f056a8a49_889140_700x394_fill_q100_h2_lanczos_smart1_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/take-the-package_huabb632dfebb6ee84814e3b7f056a8a49_889140_700x394_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  







<p>We hear <em>&ldquo;Now go, take the package!&rdquo;</em>.  As this is accompanied by space button prompt, and the players have already taken one package in the previous level, it is easy for them to figure out what to do. After that we use another voiceline together with a blinking effect on the generator that is needed to obtain the &ldquo;flash&rdquo; ability:</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="700"
            height="394"
            src="/images/posts/post-1/start-the-generator_hu4f8c836e504fbf7206ed5bc3f781931a_855423_700x394_fill_q100_h2_lanczos_smart1_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/start-the-generator_hu4f8c836e504fbf7206ed5bc3f781931a_855423_700x394_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  







<p>To complete this level while maintaining the gameplay loop, we need to feed the penguins by guiding a food ship. This time, however, <strong>we face a huge ship</strong>! The flash ability is crucial here – it allows us to stop and turn the large ship. <strong>But how do we learn it?</strong></p>
<p>We, the developers, again aim to <strong>&ldquo;lock the players with a new mechanic and make them use it to progress.&rdquo;</strong> The upper part of the canal is so narrow and curved that it <strong>forces</strong> players to use the new ability to stop the ship. <strong>To assist them, we provide a QTE-like prompt:</strong></p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/posts/post-1/now.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







<p>After they succeed, <strong>we provide feedback</strong> with a voiceline:</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="834"
            height="257"
            src="/images/posts/post-1/haha_hu115911110c2bd1d619e60c958c743a5e_239174_834x257_fill_q100_h2_lanczos_smart1_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/haha_hu115911110c2bd1d619e60c958c743a5e_239174_834x257_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  







<p>The level is finished after we guide this ship to the port and feed the penguins (consistent gameplay loop).</p>
<hr>
<p>The same techniques are used in the third introductory level to explain <strong>upgrading the lighthouse</strong>. However, another gameplay aspect – pirates – provides an opportunity for a different tutoring technique. We used the following technique not necessarily to teach, but to <strong>make tutoring more enjoyable:</strong></p>
<h4 id="leaving-a-surprise-to-discover">Leaving A Surprise To Discover</h4>
<p>When pirates appear in the third level, this is what the players are told:</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="849"
            height="273"
            src="/images/posts/post-1/pesky_hudfc16681d15d21cbb9949680e9457f24_321399_849x273_fill_q100_h2_lanczos_smart1_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/pesky_hudfc16681d15d21cbb9949680e9457f24_321399_849x273_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  







<p>Note that the players are not being told <strong>how to destroy the pirate ships</strong>. The most intuitive way of doing this is&hellip; guess what – guiding the pirates onto ice floes.</p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/posts/post-1/crash-1.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







<p>But players can leave the lighthouse! Have you considered what might happen if we bump into ships with our hovercraft? <strong>This:</strong></p>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/posts/post-1/crash-2.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  







<p><strong>Why we decided to keep it a secret:</strong></p>
<ul>
<li><strong>Not everyone will discover it:</strong> While some may see it as a drawback, this creates a slightly different experience for each player, which we can allow. It’s a minor detail that doesn’t impact victory. Watching someone else play and discover this feature leaded to several reactions like, <em>&ldquo;Woah! You can do that?!&rdquo;</em></li>
<li><strong>It creates an &ldquo;Eureka!&rdquo; moment:</strong> Players had an <em>&ldquo;Aha!&rdquo;</em> moment when they realized, <em>&ldquo;I can bump into ships too!&rdquo;</em></li>
<li><strong>Unexpected and funny situations:</strong> While bumping into <strong>a friendly ship</strong> might not be ideal, it&rsquo;s <strong>fair</strong>. During playtests, one player left the lighthouse early in the second level and accidentally destroyed a food ship. He laughed and said, <em>&ldquo;I literally crashed into it, what did I expect?&quot;</em>  This is similar to players testing if fire causes damage in a game, and being surprised when it does (it usually does 😉).</li>
</ul>
<p>However, we had to be careful with it. We knew that we shouldn&rsquo;t hide any <strong>crucial</strong> information from players. For example, keeping secret which buttons to press to move would probably <strong>not</strong> be fun.</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>It was worth it to come up with &ldquo;a minor thing to discover&rdquo;. Optional for players to perform well, but satisfactory enough when they discovered it. It created a few hilarious emergent gameplay situations.</p>
  </div>
</div>
<hr>
<p>My favorite example of a game using this technique is <a href="https://www.nintendo.com/us/store/products/the-legend-of-zelda-breath-of-the-wild-switch/">&ldquo;The Legend of Zelda: Breath of the Wild&rdquo;</a>. If you played this game you might know that warm air (heated by a burning grass) can make your paraglider elevate. <strong>Someone designed this and made it a secret intentionally.</strong> This is why discovering such things in &ldquo;Breath of the Wild&rdquo; makes so much fun!</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 24px; font-family: Signika;"><strong>Link&rsquo;s paraglider being elevated with warm air.</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">
















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="1400"
            height="700"
            src="/images/posts/post-1/zelda_hu826f51e934544eb1f7200bad806cf6bb_436359_1400x700_fill_q100_h2_lanczos_smart1.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/zelda_hu826f51e934544eb1f7200bad806cf6bb_436359_1400x700_fill_q100_lanczos_smart1.jpg'" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<h2 id="what-could-be-done-better">What Could Be Done Better</h2>
<p>While our team is quite satisfied with how tutoring in &ldquo;Guiding Light&rdquo; fared, I&rsquo;d like to highlight <strong>one thing that really bothers me</strong>. The &ldquo;flash&rdquo; mechanic and upgrading lighthouse were supposed to be the main pillars of expanding gameplay and making it something more than just guiding ships. We feel that these elements <strong>could have been explained better</strong>. But a deeper analysis led us to a conclusion that it&rsquo;s not necessarily the problem of &ldquo;tutoring directing&rdquo; that misfits, but rather <strong>a general UX and (mostly) UI problem</strong>.</p>
<div class="conclusion">
  <div class="conclusion-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion</p>
  </div>
  <div class="conclusion-body">
    <p>We understood that tutoring needs to be followed with a well-thought out remainder of UX elements, and a clear and intuitive UI too.</p>
  </div>
</div>
<table>
<thead>
<tr>
<th style="text-align:center"><span style="font-size: 24px; font-family: Signika;"><strong>A main UI element presenting: time until the level ends, number of packages, remaining flashes, and lighthouse level.</strong></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">
















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      

      


      

      
      
        
        
        
      
      
      
      

    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width="734"
            height="284"
            src="/images/posts/post-1/ui_hu361e7b837babf106ed7ebf826c67c857_58843_734x284_fill_q100_h2_lanczos_smart1_3.webp"
            alt=""
            onerror="this.onerror='null';this.src='\/images\/posts\/post-1\/ui_hu361e7b837babf106ed7ebf826c67c857_58843_734x284_fill_q100_lanczos_smart1_3.png'" />
      
    

  
  






</td>
</tr>
</tbody>
</table>
<p>The main element of our interface is, indeed, functional and serves its purpose, but <strong>feedback we got indicated that it could be designer more clearly</strong>. For example, we could revamp the icon and text colors to make particular indicators easier to identify. We could, perhaps, transfer number of packages or lighthouse level to game world and locate the icons next to objects related to those UI elements. We also have suplemental diegetic indicators for lighthouse level, number of packages, and remaining flashes, but they were quite difficult to notice in dynamic gameplay. <strong>I&rsquo;ll leave it as an exercise for you to discover them yourself!</strong></p>
<p>What&rsquo;s funny, <strong>we knew that design of our UI (especially its colors) can be better before presenting the game!</strong> Unfortunately, we didn&rsquo;t manage to rework our UI framework to deliver a more sophisticated design before the deadline. I&rsquo;d like to highlight here that <strong>&ldquo;Guiding Light&rdquo; uses its own, custom game engine</strong>, we had much more challenges to tackle, and we simply didn&rsquo;t have time left for polishing this aspect.</p>
<h2 id="summary">Summary</h2>
<p>A lot of effort went into designing and developing this game. That&rsquo;s a credit to our amazing team delivering high quality engine, tools, rendering, and art. Designing a game&rsquo;s tutorial was my job, although the whole team was engaged in the process. Shoutout to our lead designer, <a href="https://github.com/MiloszKawczynski">Miłosz</a> who helped me with the vision of guiding players, and then made it real, programming it. I want to thank my teachers: <a href="https://www.linkedin.com/in/jaroslawandrzejczak/">Jarosław Andrzejczak, PhD</a>, and <a href="https://ganszyniec.com">Artur Ganszyniec</a>, whose work has vastly influenced my approach to game production and design. I’m glad they appreciated the tutoring in &ldquo;Guiding Light&rdquo; too! 😊</p>
<p>Here&rsquo;s a summary of our thoughts:</p>
<div class="conclusionsum">
  <div class="conclusionsum-head">
    <svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.0006 9.03002C19.0007 8.10058 18.8158 7.18037 18.4565 6.32317C18.0972 5.46598 17.5709 4.68895 16.9081 4.03734C16.2453 3.38574 15.4594 2.87265 14.5962 2.52801C13.7331 2.18336 12.8099 2.01409 11.8806 2.03002C10.0966 2.08307 8.39798 2.80604 7.12302 4.05504C5.84807 5.30405 5.0903 6.98746 5.00059 8.77001C4.95795 9.9595 5.21931 11.1402 5.75999 12.2006C6.30067 13.2609 7.10281 14.1659 8.09058 14.83C8.36897 15.011 8.59791 15.2584 8.75678 15.5499C8.91565 15.8415 8.99945 16.168 9.00059 16.5V18.03H15.0006V16.5C15.0006 16.1689 15.0829 15.843 15.24 15.5515C15.3971 15.26 15.6241 15.0121 15.9006 14.83C16.8528 14.1911 17.6336 13.328 18.1741 12.3167C18.7147 11.3054 18.9985 10.1767 19.0006 9.03002V9.03002Z" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path d="M15 21.04C14.1345 21.6891 13.0819 22.04 12 22.04C10.9181 22.04 9.86548 21.6891 9 21.04" stroke="#ffd47c" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
    <p style="color: #d1d5db;">Conclusion summary</p>
  </div>
  <div class="conclusionsum-body">
    <p><ul>
<li>Without tutoring, &ldquo;Guiding Light&rdquo; would be unclear and frustrating. With a traditional tutorial, it could be less fun, immersion-breaking, or cluttered with too much text.</li>
<li>In some simple cases we managed to teach players subconsciously by designing the basics (such as main menu) in a gameplay-supportive way.</li>
<li>If some things could be explained without a single word, we didn&rsquo;t use any. We seeked the most simple solution for explaining our gameplay.</li>
<li>We wanted to ensure that each level mirrors the gameplay loop. Even in &ldquo;directed tutoring levels.&rdquo;</li>
<li>If a button prompt appeared out of nowhere and attracted attention, players pressed it.</li>
<li>Our playtesters absorbed multisensory information better. A short call to action with text and voiceover was more effective than a panel with raw text information.</li>
<li>If we gave the players something new, it was good to lock them with this new thing, and make them use it to get out.</li>
<li>Showing players what needs to be done with enough context, instead of giving them step-by-step instructions, worked for us.</li>
<li>It was worth it to come up with &ldquo;a minor thing to discover&rdquo;. Optional for players to perform well, but satisfactory enough when they discovered it. It created a few hilarious emergent gameplay situations.</li>
<li>We understood that tutoring needs to be followed with a well-thought out remainder of UX elements, and a clear and intuitive UI too.</li>
</ul>
</p>
  </div>
</div>
<h2 id="sources--additional-materials">Sources &amp; Additional Materials</h2>
<ul>
<li><a href="https://youtu.be/8FpigqfcvlM?t=403">&ldquo;Sequelitis - Mega Man Classic vs. Mega Man X&rdquo;</a> – an analysis of &ldquo;Mega Man X&rdquo; tutoring – the most seamless tutorial you will ever see. <strong>Must watch!</strong></li>
<li><a href="https://publications.lib.chalmers.se/records/fulltext/111921.pdf">Beyond the HUD: User Interfaces for Increased Player Immersion in FPS Games: Master of Science Thesis</a></li>
</ul>
]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,2024-07-30:/blog/post-1/</guid>

                
                    <link>https://mikegalinski.com/blog/post-1/</link>
                

                
                    <pubDate>Tue, 30 Jul 2024 16:58:35 CEST</pubDate>
                

                
                    <title>Designing a Seamless Tutorial. Case Study of “Guiding Light”</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                
                    
                

                
                

                

                

                
                    <description><![CDATA[Don&rsquo;t just take our word for it - hear from some of our satisfied users!  Check out some of our testimonials below to see what others are saying about Hugoplate.]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,0001-01-01:</guid>

                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>What Users Are Saying About Hugoplate</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<style>

:target:before {
  content: '';
  display: block;
  height: 100px; /* Adjust offset as needed */
  margin-top: -100px; /* Negative value equal to height */
  visibility: hidden;
}

.image-button {
  display: flex;
  flex-wrap: wrap;
  justify-content: center; /* Center the grid items horizontally */
  gap: 50px; /* Adjust margin between items as needed */
  width: 100%; /* Ensure the grid container takes the full width */
  margin: 0 auto; /* Center the grid container horizontally */
}

.image-button .grid-item {
  text-align: center; /* Center align text */
  width: 300px; /* Adjust width of each grid item */
  margin-bottom: -50px; /* Optional: Add margin bottom for spacing */
  position: relative; /* Ensure proper stacking context for absolute positioning */
}

.image-button .grid-item img {
  width: 300px; /* Make the image width 100% of the grid item width */
  height: auto; /* Maintain aspect ratio */
  max-width: 100%; /* Ensure the image does not exceed its container */
  display: block; /* Remove extra space below image */
}

.image-button .figure-caption {
  font-size: 24px;
  margin-top: 10px;
  margin-bottom: 25px;
  font-family: 'Signika', sans-serif;
  color: white;
  text-decoration: underline; /* Add underline to mimic link */
  cursor: pointer; /* Change cursor to pointer on hover */
  position: absolute;
  bottom: 15px; /* Position the caption at the bottom with some spacing */
  left: 0;
  right: 0;
  text-align: center; /* Center align the caption */
  width: 100%; /* Ensure full width */
  opacity: 0.45; /* Initially hide the caption */
  transition: opacity 0.3s ease; /* Smooth transition for opacity */
}

.image-button .grid-item:hover .figure-caption {
  opacity: 1; /* Show caption on hover */
}

html {
  scroll-behavior: smooth; /* Enable smooth scrolling behavior */
}

</style>
<center>
<h5 id="by-real-invented-studio">by Real Invented Studio</h5>
</center>
<br>
<br>



  



<div class="notice note – a disclaimer.">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M10 9V14M10 19C5.02944 19 1 14.9706 1 10C1 5.02944 5.02944 1 10 1C14.9706 1 19 5.02944 19 10C19 14.9706 14.9706 19 10 19ZM10.0498 6V6.1L9.9502 6.1002V6H10.0498Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg><p>Note – A Disclaimer.</p>
  </div>
  <div class="notice-body"><p>&ldquo;The Riese Project – Prologue&rdquo; is <strong>a commercial game I contributed to</strong>. Any <strong>opinions</strong> expressed on this blog <strong>are solely my own</strong> and do <strong>not</strong> reflect any views or official statements of Real Invented Studio. Any content showcased here is presented to <strong>demonstrate my skills</strong> and <strong>contributions</strong>, with <strong>proper credit</strong> given to all parties involved. <strong>I adhere to NDAs</strong> and do not disclose proprietary information.</p></div>
</div>

<blockquote><center>Immerse yourself in the mystery set in the Owl Mountains, exploring the enigmatic Nazi-built<br>"Riese Complex". As Anna, follow your grandfather's discoveries and unravel World War II secrets.
</center></blockquote>
<h5 id="centersee-the-videos-about-the-gamecenter"><center>See the videos about the game:</center></h5>
<div style="display: flex; justify-content: center; gap: 20px; margin-top: 20px;">
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%;">
    
    
        
        <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
          <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ITNVNtnFWyQ?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
          ></iframe>
        </div>

  </div>
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%;">
    
    
        
        <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
          <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/s1QCg3ZYnaw?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
          ></iframe>
        </div>

  </div>
</div>
<blockquote><center>"The Riese Project – Prologue" is a playable introduction to the full version of the game.<br>Explore real locations created using the latest Lumen & Nanite technologies employed by Unreal Engine 5.
</center></blockquote>
<p>I worked on “The Riese Project – Prologue” for a year alongside a team of amazing and talented developers. As a Junior Unreal Developer at Real Invented Studio, my responsibilities included:</p>
<ul>
<li>UI programming (the phone in the game 🤍)</li>
<li>VR interaction programming</li>
<li>gameplay and story flow programming</li>
<li>animation programming – VR hands animation logic, character animation logic</li>
<li>optimization, profiling, testing</li>
</ul>
<br>
<h5 id="centervisit-the-games-steam-websitehttpsstoresteampoweredcomapp2142400the_riese_project__prologuecenter"><center><a href="https://store.steampowered.com/app/2142400/The_Riese_Project__Prologue/">Visit the game&rsquo;s Steam website</a></center></h5>
<h5 id="centervisit-the-developers-websitehttpsrealinventedstudioplenthe-riese-projectcenter"><center><a href="https://realinventedstudio.pl/en/the-riese-project">Visit the developer&rsquo;s website</a></center></h5>
<br>
<br>
<br>
<center>
<p>



<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="/portfolio" class="btn-custom solid">← Back</a>





<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="#" class="btn-custom solid">↑ Top ↑</a>
</p>
</center>
<br>
]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,0001-01-01:/portfolio/riese/</guid>

                
                    <link>https://mikegalinski.com/portfolio/riese/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>The Riese Project – Prologue</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="refresh" content="0; url=../../about" />
    <title>Redirecting...</title>
</head>
<body>
    <p>If not redirected automatically, <a href="../../about">please use the link</a>.</p>
</body>
</html>
]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,0001-01-01:/authors/mike-galinski/</guid>

                
                    <link>https://mikegalinski.com/authors/mike-galinski/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Redirecting…</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                
                    
                

                
                

                

                

                
                    <description><![CDATA[Experience the future of web development with Hugoplate and Hugo. Build lightning-fast static sites with ease and flexibility.]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,0001-01-01:</guid>

                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Ready to build your next project with Hugo?</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<style>

:target:before {
  content: '';
  display: block;
  height: 100px; /* Adjust offset as needed */
  margin-top: -100px; /* Negative value equal to height */
  visibility: hidden;
}

.image-button {
  display: flex;
  flex-wrap: wrap;
  justify-content: center; /* Center the grid items horizontally */
  gap: 50px; /* Adjust margin between items as needed */
  width: 100%; /* Ensure the grid container takes the full width */
  margin: 0 auto; /* Center the grid container horizontally */
}

.image-button .grid-item {
  text-align: center; /* Center align text */
  width: 300px; /* Adjust width of each grid item */
  margin-bottom: -50px; /* Optional: Add margin bottom for spacing */
  position: relative; /* Ensure proper stacking context for absolute positioning */
}

.image-button .grid-item img {
  width: 300px; /* Make the image width 100% of the grid item width */
  height: auto; /* Maintain aspect ratio */
  max-width: 100%; /* Ensure the image does not exceed its container */
  display: block; /* Remove extra space below image */
}

.image-button .figure-caption {
  font-size: 24px;
  margin-top: 10px;
  margin-bottom: 25px;
  font-family: 'Signika', sans-serif;
  color: white;
  text-decoration: underline; /* Add underline to mimic link */
  cursor: pointer; /* Change cursor to pointer on hover */
  position: absolute;
  bottom: 15px; /* Position the caption at the bottom with some spacing */
  left: 0;
  right: 0;
  text-align: center; /* Center align the caption */
  width: 100%; /* Ensure full width */
  opacity: 0.45; /* Initially hide the caption */
  transition: opacity 0.3s ease; /* Smooth transition for opacity */
}

.image-button .grid-item:hover .figure-caption {
  opacity: 1; /* Show caption on hover */
}

html {
  scroll-behavior: smooth; /* Enable smooth scrolling behavior */
}

</style>



  



<div class="notice note">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M10 9V14M10 19C5.02944 19 1 14.9706 1 10C1 5.02944 5.02944 1 10 1C14.9706 1 19 5.02944 19 10C19 14.9706 14.9706 19 10 19ZM10.0498 6V6.1L9.9502 6.1002V6H10.0498Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg><p>Note</p>
  </div>
  <div class="notice-body"><p>This game has been developed in <strong>48 hours</strong> during Global Game Jam (Łódzki Game Jam 8).</p></div>
</div>

<blockquote><center>As a roller-skating clown, embark a nostalgic journey to make a child laugh last time in its life.</center></blockquote>

















  





  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid img-center"
            width=""
            height=""
            src="/images/laughmaker/jump.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






  <script>
    window.addEventListener("load", (e) => {
      const lightbox = GLightbox();
    });
  </script>


<p>The theme for the game jam was <em>&ldquo;Make Me Laugh.&quot;</em>  While most teams aimed to create humorous games, we wanted to take a different approach. We chose to craft a nostalgic experience, and we are quite happy with the result. The game was build with <strong>Unreal Engine 5</strong> (Blueprints, as they are great for building a game quickly).</p>
<p>&ldquo;Laughmaker&rdquo; was developed by &ldquo;Disco Angels&rdquo;, the team behind <a href="../heartbreaker">&ldquo;Heartbreaker&rdquo;</a> video game.</p>
<br>
<h5 id="centerwhat-we-are-proud-ofcenter"><center>What we are proud of:</center></h5>
<ul>
<li><strong>clown animations!</strong> Notice a blend of animations created by Agata with physics. And then comes the ragdoll. Quite advanced for a game built in 48 hours.</li>
</ul>
<div style="display: flex; justify-content: center; gap: 20px; margin-top: 20px;">
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%;">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
          
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width=""
                height=""
                src="/images/laughmaker/ride.gif"
                alt=""
                onerror="this.onerror='null';this.src=''" />
          
        
    
      
      
    
    
    
    
    
    

  </div>
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%;">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
          
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width=""
                height=""
                src="/images/laughmaker/crash.gif"
                alt=""
                onerror="this.onerror='null';this.src=''" />
          
        
    
      
      
    
    
    
    
    
    

  </div>
</div>
<ul>
<li>different approach to the theme</li>
<li>overall multilayered design, &ldquo;Laughmaker&rdquo; has nice-looking VFX, voice-over, music and sound effects that support overall experience.</li>
<li>simplicity – you just have fun riding towards your goal while collecting ballons. No one had any problem with understanding how to play.</li>
</ul>
<br>
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:center">Role</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Michał Galiński</td>
<td style="text-align:center">Production, Programming</td>
</tr>
<tr>
<td style="text-align:center">Mikołaj Przybylski</td>
<td style="text-align:center">Programming</td>
</tr>
<tr>
<td style="text-align:center">Mateusz Banasik</td>
<td style="text-align:center">Programming</td>
</tr>
<tr>
<td style="text-align:center">Agata Granosik</td>
<td style="text-align:center">2D/3D Art</td>
</tr>
<tr>
<td style="text-align:center">Michał Świstak</td>
<td style="text-align:center">Music &amp; Sound</td>
</tr>
</tbody>
</table>
<br>
<h5 id="centeryou-can-download-the-game-herehttpstulodz-mysharepointcomugpersonal242385_edu_p_lodz_plexxe4udqil1okfhiqokn02kblgowywd7tuq5wkxaw2r3zaeftdk1ecenter"><center><a href="https://tulodz-my.sharepoint.com/:u:/g/personal/242385_edu_p_lodz_pl/EXXe4UdQiL1OkfhIqoKN02kBlgowywD7tuq5WKXaW2R3ZA?e=fTdk1e">You can download the game here</a></center></h5>
<br>
<br>
<br>
<center>
<p>



<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="/portfolio" class="btn-custom solid">← Back</a>





<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="#" class="btn-custom solid">↑ Top ↑</a>
</p>
</center>
<br>
]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,0001-01-01:/portfolio/laughmaker/</guid>

                
                    <link>https://mikegalinski.com/portfolio/laughmaker/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Laughmaker</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<style>

:target:before {
  content: '';
  display: block;
  height: 100px; /* Adjust offset as needed */
  margin-top: -100px; /* Negative value equal to height */
  visibility: hidden;
}

.image-button {
  display: flex;
  flex-wrap: wrap;
  justify-content: center; /* Center the grid items horizontally */
  gap: 50px; /* Adjust margin between items as needed */
  width: 100%; /* Ensure the grid container takes the full width */
  margin: 0 auto; /* Center the grid container horizontally */
}

.image-button .grid-item {
  text-align: center; /* Center align text */
  width: 300px; /* Adjust width of each grid item */
  margin-bottom: -50px; /* Optional: Add margin bottom for spacing */
  position: relative; /* Ensure proper stacking context for absolute positioning */
}

.image-button .grid-item img {
  width: 300px; /* Make the image width 100% of the grid item width */
  height: auto; /* Maintain aspect ratio */
  max-width: 100%; /* Ensure the image does not exceed its container */
  display: block; /* Remove extra space below image */
}

.image-button .figure-caption {
  font-size: 24px;
  margin-top: 10px;
  margin-bottom: 25px;
  font-family: 'Signika', sans-serif;
  color: white;
  text-decoration: underline; /* Add underline to mimic link */
  cursor: pointer; /* Change cursor to pointer on hover */
  position: absolute;
  bottom: 15px; /* Position the caption at the bottom with some spacing */
  left: 0;
  right: 0;
  text-align: center; /* Center align the caption */
  width: 100%; /* Ensure full width */
  opacity: 0.45; /* Initially hide the caption */
  transition: opacity 0.3s ease; /* Smooth transition for opacity */
}

.image-button .grid-item:hover .figure-caption {
  opacity: 1; /* Show caption on hover */
}

html {
  scroll-behavior: smooth; /* Enable smooth scrolling behavior */
}

</style>
<blockquote><center>Would you rest on your laurels, having all you've ever wanted? These people would.
</center></blockquote>




















<div class="swiper gallery-slider center">
  <div class="swiper-wrapper">
    
    
      
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/heartbreaker/1.png"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/heartbreaker/1_hudc0f07964ef4448b48f5f03b72d8e7bd_2184194_1200x1200_fit_lanczos_3.png"
                  class="img"
                  style="margin: 0"
                  alt="1.png"
                  onerror="this.onerror='null';this.src='\/images\/heartbreaker\/1_hudc0f07964ef4448b48f5f03b72d8e7bd_2184194_1200x1200_fit_lanczos_3.png'" />
              </a>
            
          </div>
        
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/heartbreaker/2.png"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/heartbreaker/2_hu5748675c641a0f1c6d7e18fab39b1dc2_1080181_1200x1200_fit_lanczos_3.png"
                  class="img"
                  style="margin: 0"
                  alt="2.png"
                  onerror="this.onerror='null';this.src='\/images\/heartbreaker\/2_hu5748675c641a0f1c6d7e18fab39b1dc2_1080181_1200x1200_fit_lanczos_3.png'" />
              </a>
            
          </div>
        
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/heartbreaker/3.png"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/heartbreaker/3_hu886c992c5a93de69473b431d77acd216_1857413_1200x1200_fit_lanczos_3.png"
                  class="img"
                  style="margin: 0"
                  alt="3.png"
                  onerror="this.onerror='null';this.src='\/images\/heartbreaker\/3_hu886c992c5a93de69473b431d77acd216_1857413_1200x1200_fit_lanczos_3.png'" />
              </a>
            
          </div>
        
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/heartbreaker/4.png"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/heartbreaker/4_huec2eb80b43c5b4ab99d3a057eae7ff23_2574946_1200x1200_fit_lanczos_3.png"
                  class="img"
                  style="margin: 0"
                  alt="4.png"
                  onerror="this.onerror='null';this.src='\/images\/heartbreaker\/4_huec2eb80b43c5b4ab99d3a057eae7ff23_2574946_1200x1200_fit_lanczos_3.png'" />
              </a>
            
          </div>
        
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/heartbreaker/5.png"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/heartbreaker/5_hu1a4e8ffa84f36e3bb488cca2c38875df_1339242_1200x1200_fit_lanczos_3.png"
                  class="img"
                  style="margin: 0"
                  alt="5.png"
                  onerror="this.onerror='null';this.src='\/images\/heartbreaker\/5_hu1a4e8ffa84f36e3bb488cca2c38875df_1339242_1200x1200_fit_lanczos_3.png'" />
              </a>
            
          </div>
        
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/heartbreaker/6.png"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/heartbreaker/6_hufb729f3bbb8c516acfffe940d50add3a_1973244_1200x1200_fit_lanczos_3.png"
                  class="img"
                  style="margin: 0"
                  alt="6.png"
                  onerror="this.onerror='null';this.src='\/images\/heartbreaker\/6_hufb729f3bbb8c516acfffe940d50add3a_1973244_1200x1200_fit_lanczos_3.png'" />
              </a>
            
          </div>
        
      


      

      
    
    
  </div>

  
  <span class="swiper-button-prev"></span>
  <span class="swiper-button-next"></span>
</div>


<blockquote><center>Heartbreaker is a first person action platformer, where you crash hearts of stone using your movement,<br>set in a&nbsp;picturesque and nostalgic atmosphere.
</center></blockquote>
<br>
<h5 id="centersee-the-trailer-devlog-and-gameplay-videocenter"><center>See the trailer, devlog, and gameplay video:</center></h5>
<div style="display: flex; justify-content: center; gap: 20px; margin-top: 20px;">
  <div style="flex: 0 0 auto; max-width: 33%; width: 100%;">
    
    
        
        <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
          <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/aITj-S1CrZg?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
          ></iframe>
        </div>

  </div>
  <div style="flex: 0 0 auto; max-width: 33%; width: 100%;">
    
    
        
        <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
          <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/2_xnj8MikRo?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
          ></iframe>
        </div>

  </div>
  <div style="flex: 0 0 auto; max-width: 33%; width: 100%;">
    
    
        
        <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
          <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/9UdSVbAIhKI?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
          ></iframe>
        </div>

  </div>
</div>
<br>
<br>
<h5 id="centercreditscenter"><center>Credits</center></h5>
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:center">Role</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Michał Galiński</td>
<td style="text-align:center">Production, Programming</td>
</tr>
<tr>
<td style="text-align:center">Mikołaj Przybylski</td>
<td style="text-align:center">Programming</td>
</tr>
<tr>
<td style="text-align:center">Mateusz Banasik</td>
<td style="text-align:center">Programming</td>
</tr>
<tr>
<td style="text-align:center">Agata Granosik</td>
<td style="text-align:center">2D/3D Art</td>
</tr>
<tr>
<td style="text-align:center">Michał Świstak</td>
<td style="text-align:center">Music &amp; Sound Design</td>
</tr>
<tr>
<td style="text-align:center">Aleksandra Kwapińska</td>
<td style="text-align:center">Voice Acting</td>
</tr>
<tr>
<td style="text-align:center">Michał Galiński</td>
<td style="text-align:center">Voice Acting</td>
</tr>
<tr>
<td style="text-align:center">Jarosław Andrzejczak</td>
<td style="text-align:center">Mentoring &amp; UI/UX Consultation</td>
</tr>
</tbody>
</table>
<br>
<h5 id="centervisit-game-website-download-the-gamehttpsdisco-angelsitchioheartbreakercenter"><center><a href="https://disco-angels.itch.io/heartbreaker">Visit game website, download the game</a></center></h5>
<br>
<div class="image-button">
  <a class="grid-item">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="1533"
                height="1108"
                src="/images/awards/best-gameplay_hu50b04069ffa2e7fb65de7ddc6c758591_112942_1533x1108_resize_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/awards\/best-gameplay_hu50b04069ffa2e7fb65de7ddc6c758591_112942_1533x1108_resize_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    
      <script>
        window.addEventListener("load", (e) => {
          const lightbox = GLightbox();
        });
      </script>
    
  
  </a>
  <a class="grid-item">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="1533"
                height="1108"
                src="/images/awards/best-art_huebf825274afb8d65e151ac4692e72233_82562_1533x1108_resize_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/awards\/best-art_huebf825274afb8d65e151ac4692e72233_82562_1533x1108_resize_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    
  
  </a>
  <a class="grid-item">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="1533"
                height="1108"
                src="/images/awards/best-game-design_hu50b04069ffa2e7fb65de7ddc6c758591_107364_1533x1108_resize_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/awards\/best-game-design_hu50b04069ffa2e7fb65de7ddc6c758591_107364_1533x1108_resize_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    
  
  </a>
  <a class="grid-item">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="1533"
                height="1108"
                src="/images/awards/techland_hu50b04069ffa2e7fb65de7ddc6c758591_106750_1533x1108_resize_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/awards\/techland_hu50b04069ffa2e7fb65de7ddc6c758591_106750_1533x1108_resize_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    
  
  </a>
  <a class="grid-item">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="1533"
                height="1108"
                src="/images/awards/game-access_hu50b04069ffa2e7fb65de7ddc6c758591_110217_1533x1108_resize_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/awards\/game-access_hu50b04069ffa2e7fb65de7ddc6c758591_110217_1533x1108_resize_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    
  
  </a>
  <a class="grid-item">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="1533"
                height="1108"
                src="/images/awards/it-media_hu50b04069ffa2e7fb65de7ddc6c758591_105213_1533x1108_resize_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/awards\/it-media_hu50b04069ffa2e7fb65de7ddc6c758591_105213_1533x1108_resize_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    
  
  </a>
  <!-- Repeat the above grid-item structure for other images -->
</div>
<br>
<br>
<br>
<center>
<p>



<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="/portfolio" class="btn-custom solid">← Back</a>





<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="#" class="btn-custom solid">↑ Top ↑</a>
</p>
</center>
<br>
]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,0001-01-01:/portfolio/heartbreaker/</guid>

                
                    <link>https://mikegalinski.com/portfolio/heartbreaker/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Heartbreaker</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<style>

:target:before {
  content: '';
  display: block;
  height: 100px; /* Adjust offset as needed */
  margin-top: -100px; /* Negative value equal to height */
  visibility: hidden;
}

.image-button {
  display: flex;
  flex-wrap: wrap;
  justify-content: center; /* Center the grid items horizontally */
  gap: 50px; /* Adjust margin between items as needed */
  width: 100%; /* Ensure the grid container takes the full width */
  margin: 0 auto; /* Center the grid container horizontally */
}

.image-button .grid-item {
  text-align: center; /* Center align text */
  width: 300px; /* Adjust width of each grid item */
  margin-bottom: -50px; /* Optional: Add margin bottom for spacing */
  position: relative; /* Ensure proper stacking context for absolute positioning */
}

.image-button .grid-item img {
  width: 300px; /* Make the image width 100% of the grid item width */
  height: auto; /* Maintain aspect ratio */
  max-width: 100%; /* Ensure the image does not exceed its container */
  display: block; /* Remove extra space below image */
}

.image-button .figure-caption {
  font-size: 24px;
  margin-top: 10px;
  margin-bottom: 25px;
  font-family: 'Signika', sans-serif;
  color: white;
  text-decoration: underline; /* Add underline to mimic link */
  cursor: pointer; /* Change cursor to pointer on hover */
  position: absolute;
  bottom: 15px; /* Position the caption at the bottom with some spacing */
  left: 0;
  right: 0;
  text-align: center; /* Center align the caption */
  width: 100%; /* Ensure full width */
  opacity: 0.45; /* Initially hide the caption */
  transition: opacity 0.3s ease; /* Smooth transition for opacity */
}

.image-button .grid-item:hover .figure-caption {
  opacity: 1; /* Show caption on hover */
}

html {
  scroll-behavior: smooth; /* Enable smooth scrolling behavior */
}

</style>



  



<div class="notice note">
  <div class="notice-head"><svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M10 9V14M10 19C5.02944 19 1 14.9706 1 10C1 5.02944 5.02944 1 10 1C14.9706 1 19 5.02944 19 10C19 14.9706 14.9706 19 10 19ZM10.0498 6V6.1L9.9502 6.1002V6H10.0498Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg><p>Note</p>
  </div>
  <div class="notice-body"><p>Guiding Light is a game developed along its <strong>own game engine</strong> in <strong>4 months</strong> for courses conducted by the <a href="https://p.lodz.pl/en">Lodz University of Technology</a>.</p></div>
</div>

<blockquote><center>You're a lighthouse keeper and a courier… at once. In "Guiding Light", a casual time-management game, you operate alone in the Pole of Cold. And you’re the only one who can feed the penguins!</center></blockquote>
<!-- 



















<div class="swiper gallery-slider center">
  <div class="swiper-wrapper">
    
    
      
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/guiding-light/engine.gif"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/guiding-light/engine.gif"
                  class="img"
                  style="margin: 0"
                  alt="engine.gif"
                  onerror="this.onerror='null';this.src=''" />
              </a>
            
          </div>
        
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/guiding-light/gl.gif"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/guiding-light/gl.gif"
                  class="img"
                  style="margin: 0"
                  alt="gl.gif"
                  onerror="this.onerror='null';this.src=''" />
              </a>
            
          </div>
        
      


      

      
    
    
  </div>

  
  <span class="swiper-button-prev"></span>
  <span class="swiper-button-next"></span>
</div>

 -->
<center>




















  
  
  


  
  
    
    
      
    

    


    
    


    
    
    
    
      
      
    
    
    
    


    
    
      
      
      
    
    

    
    
      
      
          <img
            title=""
            loading="lazy"
            decoding="async"
            class="img img-fluid "
            width=""
            height=""
            src="/images/guiding-light/gl.gif"
            alt=""
            onerror="this.onerror='null';this.src=''" />
      
    

  
  






  <script>
    window.addEventListener("load", (e) => {
      const lightbox = GLightbox();
    });
  </script>

</center>
<blockquote><center>Guide the ships, pick-up the food rations, and upgrade your lighthouse.<br>Get ready to prevent shipwrecks and master the polar night!</center></blockquote>






  



<div class="accordion ">
  <button class="accordion-header " data-accordion>
    The Engine
    <svg
      class="accordion-icon"
      x="0px"
      y="0px"
      viewBox="0 0 512 512"
      xmlspace="preserve">
      <path
        fill="currentColor"
        d="M505.755,123.592c-8.341-8.341-21.824-8.341-30.165,0L256.005,343.176L36.421,123.592c-8.341-8.341-21.824-8.341-30.165,0 s-8.341,21.824,0,30.165l234.667,234.667c4.16,4.16,9.621,6.251,15.083,6.251c5.462,0,10.923-2.091,15.083-6.251l234.667-234.667 C514.096,145.416,514.096,131.933,505.755,123.592z"></path>
    </svg>
  </button>
  <div class="accordion-content ">
    <p><p>Our Engine is written in modern C++23. Its architecture is based on <strong>Object-Component model</strong> used by <strong>Unity</strong>. We use <strong>DirectX 11</strong> as our graphics API (initially it was OpenGL, but we decided to port it).<br><br><strong>Some notable systems:</strong></p>
<ul>
<li>2D physics engine (collision detection and resolution)</li>
<li>Resource Manager (for sharing resources like models and textures)</li>
<li>UI</li>
<li>Runtime prefab loading</li>
<li>Input and Event systems</li>
</ul></p>
  </div>
</div>







  



<div class="accordion ">
  <button class="accordion-header " data-accordion>
    The Editor
    <svg
      class="accordion-icon"
      x="0px"
      y="0px"
      viewBox="0 0 512 512"
      xmlspace="preserve">
      <path
        fill="currentColor"
        d="M505.755,123.592c-8.341-8.341-21.824-8.341-30.165,0L256.005,343.176L36.421,123.592c-8.341-8.341-21.824-8.341-30.165,0 s-8.341,21.824,0,30.165l234.667,234.667c4.16,4.16,9.621,6.251,15.083,6.251c5.462,0,10.923-2.091,15.083-6.251l234.667-234.667 C514.096,145.416,514.096,131.933,505.755,123.592z"></path>
    </svg>
  </button>
  <div class="accordion-content ">
    <p><center>
<p><img alt="Guiding Light" src="https://raw.githubusercontent.com/0GreenClover0/Engine/main/readme_files/engine.gif"></p>
</center>
<p>We developed <strong>our own editor</strong> along with countless tools and functionalities:</p>
<ul>
<li>Scene and prefab loading</li>
<li>Gizmos</li>
<li>Curve editors</li>
<li>Debug drawings</li>
<li>Debug logging</li>
<li>Shader hot-swapping</li>
<li>Custom inspectors for specific Components</li>
</ul>
</p>
  </div>
</div>







  



<div class="accordion ">
  <button class="accordion-header " data-accordion>
    Engine Header Tool
    <svg
      class="accordion-icon"
      x="0px"
      y="0px"
      viewBox="0 0 512 512"
      xmlspace="preserve">
      <path
        fill="currentColor"
        d="M505.755,123.592c-8.341-8.341-21.824-8.341-30.165,0L256.005,343.176L36.421,123.592c-8.341-8.341-21.824-8.341-30.165,0 s-8.341,21.824,0,30.165l234.667,234.667c4.16,4.16,9.621,6.251,15.083,6.251c5.462,0,10.923-2.091,15.083-6.251l234.667-234.667 C514.096,145.416,514.096,131.933,505.755,123.592z"></path>
    </svg>
  </button>
  <div class="accordion-content ">
    <p>To speed up our work, we wrote a <strong>Python script</strong> that <strong>generates (de)serialization code</strong> for all components by <strong>parsing the C++ header files</strong>, similarly to <a href="https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/BuildTools/UnrealHeaderTool/">UnrealHeaderTool</a>. <strong>(We are very proud of that.)</strong></p>
  </div>
</div>







  



<div class="accordion ">
  <button class="accordion-header " data-accordion>
    Rendering
    <svg
      class="accordion-icon"
      x="0px"
      y="0px"
      viewBox="0 0 512 512"
      xmlspace="preserve">
      <path
        fill="currentColor"
        d="M505.755,123.592c-8.341-8.341-21.824-8.341-30.165,0L256.005,343.176L36.421,123.592c-8.341-8.341-21.824-8.341-30.165,0 s-8.341,21.824,0,30.165l234.667,234.667c4.16,4.16,9.621,6.251,15.083,6.251c5.462,0,10.923-2.091,15.083-6.251l234.667-234.667 C514.096,145.416,514.096,131.933,505.755,123.592z"></path>
    </svg>
  </button>
  <div class="accordion-content ">
    <p><p>We are using deferred rendering, with exceptions for transparent objects and UI that use forward rendering. We managed to implement a couple of rendering algorithms:</p>
<ul>
<li>Screen Space Reflection</li>
<li>Screen Space Refraction</li>
<li>Volumetric light scattering</li>
<li>Screen Space Ambient Occlusion (SSAO)</li>
<li>Particles (and particle emitters, done on CPU)</li>
<li>Fast Approximate Anti-Aliasing (FXAA)</li>
<li>Gerstner waves (for water geometry)</li>
<li>Shadow mapping (including point lights)</li>
<li>Percentage-Closer Soft Shadows</li>
</ul></p>
  </div>
</div>







  



<div class="accordion ">
  <button class="accordion-header " data-accordion>
    Thirdparty
    <svg
      class="accordion-icon"
      x="0px"
      y="0px"
      viewBox="0 0 512 512"
      xmlspace="preserve">
      <path
        fill="currentColor"
        d="M505.755,123.592c-8.341-8.341-21.824-8.341-30.165,0L256.005,343.176L36.421,123.592c-8.341-8.341-21.824-8.341-30.165,0 s-8.341,21.824,0,30.165l234.667,234.667c4.16,4.16,9.621,6.251,15.083,6.251c5.462,0,10.923-2.091,15.083-6.251l234.667-234.667 C514.096,145.416,514.096,131.933,505.755,123.592z"></path>
    </svg>
  </button>
  <div class="accordion-content ">
    <p>Editor&rsquo;s UI is made with <a href="https://github.com/ocornut/imgui">ImGui</a> and it&rsquo;s extensions: <a href="https://github.com/CedricGuillemet/ImGuizmo">ImGuizmo</a>, <a href="https://github.com/epezent/implot">ImPlot</a>. Audio is handled by <a href="https://github.com/mackron/miniaudio">miniaudio</a>. <a href="https://github.com/g-truc/glm">glm</a> for additional math operations.<br>(De)serializing yaml: <a href="https://github.com/jbeder/yaml-cpp">yaml-cpp</a>. Window abstraction: <a href="https://github.com/glfw/glfw">glfw</a>. Helper loading libraries used: <a href="https://github.com/Microsoft/DirectXTK/wiki/DDSTextureLoader">DDSTextureLoader</a>, <a href="https://github.com/nothings/stb/blob/master/stb_image.h">stb_image</a>, <a href="https://github.com/assimp/assimp">assimp</a>, <a href="https://github.com/gamelaster/FW1FontWrapper">FW1FontWrapper</a>.</p>
  </div>
</div>

<h5 id="centercreditscenter"><center>Credits</center></h5>
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:center">Role</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://github.com/0GreenClover0">Mikołaj Przybylski</a></td>
<td style="text-align:center">Programming Lead</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/MikeMG-PL">Michał Galiński</a></td>
<td style="text-align:center">Production Lead</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/boniffacy">Jakub Januszewicz</a></td>
<td style="text-align:center">2D &amp; Branding Lead</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/MiloszKawczynski">Miłosz Kawczyński</a></td>
<td style="text-align:center">Design Lead</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/nadkow">Nadia Kowalska</a></td>
<td style="text-align:center">3D Art Lead</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://github.com/umbc1ok">Hubert Olejnik</a></td>
<td style="text-align:center">Rendering Lead</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://soundcloud.com/michal_swistak">Michał Świstak</a></td>
<td style="text-align:center">Sound Design</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://www.linkedin.com/in/julian-rakowski/">Julian Rakowski</a></td>
<td style="text-align:center">Voice Acting</td>
</tr>
</tbody>
</table>
<br>
<h5 id="centersee-the-devlog-and-gameplay-videocenter"><center>See the devlog and gameplay video:</center></h5>
<div style="display: flex; justify-content: center; gap: 20px; margin-top: 20px;">
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%;">
    
    
        
        <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
          <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/4NOTxV9gPgM?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
          ></iframe>
        </div>

  </div>
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%;">
    
    
        
        <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
          <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ecWnXpiUJ6A?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
          ></iframe>
        </div>

  </div>
</div>
<br>
<h5 id="centersource-codehttpsgithubcom0greenclover0enginecenter"><center><a href="https://github.com/0GreenClover0/Engine">Source Code</a></center></h5>
<h5 id="centervisit-game-website-download-the-gamehttpsoeljitchioguiding-lightcenter"><center><a href="https://oelj.itch.io/guiding-light">Visit game website, download the game</a></center></h5>
<br>
<div class="image-button">
  <a class="grid-item">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="1533"
                height="1108"
                src="/images/awards/game-development_hu50b04069ffa2e7fb65de7ddc6c758591_108803_1533x1108_resize_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/awards\/game-development_hu50b04069ffa2e7fb65de7ddc6c758591_108803_1533x1108_resize_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    
  
  </a>
  <a class="grid-item">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
    
    
      
      
        
        
          
        
    
        
    
    
        
        
    
    
        
        
        
        
          
          
        
        
        
        
    
    
        
        
          
          
    
          
            
            
          
    
    
          
    
          
          
            
            
            
          
          
          
          
    
        
        
    
        
        
          
          
              <img
                title=""
                loading="lazy"
                decoding="async"
                class="img img-fluid "
                width="1533"
                height="1108"
                src="/images/awards/activision_hu50b04069ffa2e7fb65de7ddc6c758591_110000_1533x1108_resize_lanczos_3.png"
                alt=""
                onerror="this.onerror='null';this.src='\/images\/awards\/activision_hu50b04069ffa2e7fb65de7ddc6c758591_110000_1533x1108_resize_lanczos_3.png'" />
          
        
    
      
      
    
    
    
    
    
    
  
  </a>
  <!-- Repeat the above grid-item structure for other images -->
</div>
<br>
<br>
<br>
<center>
<p>



<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="/portfolio" class="btn-custom solid">← Back</a>





<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="#" class="btn-custom solid">↑ Top ↑</a>
</p>
</center>
<br>]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,0001-01-01:/portfolio/guiding-light/</guid>

                
                    <link>https://mikegalinski.com/portfolio/guiding-light/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Guiding Light</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<style>

:target:before {
  content: '';
  display: block;
  height: 100px; /* Adjust offset as needed */
  margin-top: -100px; /* Negative value equal to height */
  visibility: hidden;
}

.image-button {
  display: flex;
  flex-wrap: wrap;
  justify-content: center; /* Center the grid items horizontally */
  gap: 50px; /* Adjust margin between items as needed */
  width: 100%; /* Ensure the grid container takes the full width */
  margin: 0 auto; /* Center the grid container horizontally */
}

.image-button .grid-item {
  text-align: center; /* Center align text */
  width: 300px; /* Adjust width of each grid item */
  margin-bottom: -50px; /* Optional: Add margin bottom for spacing */
  position: relative; /* Ensure proper stacking context for absolute positioning */
}

.image-button .grid-item img {
  width: 300px; /* Make the image width 100% of the grid item width */
  height: auto; /* Maintain aspect ratio */
  max-width: 100%; /* Ensure the image does not exceed its container */
  display: block; /* Remove extra space below image */
}

.image-button .figure-caption {
  font-size: 24px;
  margin-top: 10px;
  margin-bottom: 25px;
  font-family: 'Signika', sans-serif;
  color: white;
  text-decoration: underline; /* Add underline to mimic link */
  cursor: pointer; /* Change cursor to pointer on hover */
  position: absolute;
  bottom: 15px; /* Position the caption at the bottom with some spacing */
  left: 0;
  right: 0;
  text-align: center; /* Center align the caption */
  width: 100%; /* Ensure full width */
  opacity: 0.45; /* Initially hide the caption */
  transition: opacity 0.3s ease; /* Smooth transition for opacity */
}

.image-button .grid-item:hover .figure-caption {
  opacity: 1; /* Show caption on hover */
}

html {
  scroll-behavior: smooth; /* Enable smooth scrolling behavior */
}

</style>
<blockquote><center>"Disco Sorter" – a VR game in which you sort apples to the rhythm of music.</center></blockquote>




















<div class="swiper gallery-slider center">
  <div class="swiper-wrapper">
    
    
      
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/disco-sorter/sYGt5q.png"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/disco-sorter/sYGt5q_hu99e3ce1eb526d5caf290dff8b0cc032e_1783331_1200x1200_fit_lanczos_3.png"
                  class="img"
                  style="margin: 0"
                  alt="sYGt5q.png"
                  onerror="this.onerror='null';this.src='\/images\/disco-sorter\/sYGt5q_hu99e3ce1eb526d5caf290dff8b0cc032e_1783331_1200x1200_fit_lanczos_3.png'" />
              </a>
            
          </div>
        
      
        
        
        

          












  
  
    
    
  
  
  


  
  
    

    
    


    
    
    
    
    
    
    
    


    

    
    
    
      
      
        
        
      
      
    


    
  


  


          
          
          
          


          <div
            class="swiper-slide zoomable">
            
              <a
                href="/images/disco-sorter/XEvJbz.jpg"
                class="glightbox"
                style="display: block;">
                <img
                  loading="lazy"
                  src="/images/disco-sorter/XEvJbz_hu75cccff19b7d94bfa8039a0a3ca50517_178616_1200x1200_fit_q80_lanczos.jpg"
                  class="img"
                  style="margin: 0"
                  alt="XEvJbz.jpg"
                  onerror="this.onerror='null';this.src='\/images\/disco-sorter\/XEvJbz_hu75cccff19b7d94bfa8039a0a3ca50517_178616_1200x1200_fit_q80_lanczos.jpg'" />
              </a>
            
          </div>
        
      


      

      
    
    
  </div>

  
  <span class="swiper-button-prev"></span>
  <span class="swiper-button-next"></span>
</div>


<blockquote><center>Orcharding has never been an easy job. Workers in an apple sorting facility constantly have to deal with cold storage rooms, disgusting rotten apples, and monotonous fruit picking. It's time to wind up with it. Time for a little fun, let the party begin!</center></blockquote>
<br>
<h5 id="centersee-the-trailer-and-the-gameplaycenter"><center>See the trailer and the gameplay:</center></h5>
<div style="display: flex; justify-content: center; gap: 20px; margin-top: 20px;">
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%;">
    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe src="https://player.vimeo.com/video/524444731" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="vimeo video" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
    </div>

  </div>
  <div style="flex: 0 0 auto; max-width: 50%; width: 100%;">
    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe src="https://player.vimeo.com/video/524473641" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="vimeo video" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
    </div>

  </div>
</div>
<br>
<p>The development of the game began in late 2019 when my team at <a href="https://www.facebook.com/DigitalNightStudio">Digital Night Studio</a>, a student game development club, decided to create a VR game. At that time, my friend <a href="https://www.linkedin.com/in/mikołaj-przybylski-5b8865206/">Mikołaj</a> and I were both 17 years old. When the COVID pandemic hit in 2020, we had ample time to complete the game and submit it to the <a href="https://ztgk.pl">ZTGK</a> game development contest!</p>
<p>This is a standalone Meta Quest game. The main challenges we faced were:</p>
<ul>
<li>Building rythm controller and combining rythm-based events with physics (the apples roll physically!)</li>
<li>Creating full level editor</li>
<li>Optimizing the game (as it&rsquo;s standalone Meta Quest) while preserving neon and party style. Lots of interesting tricks were applied here.</li>
</ul>
<p>The game was developed using <strong>Unity</strong> game engine.</p>
<br>
<h5 id="centervisit-game-website-download-the-gamehttpsclovermikeitchiodisco-sortercenter"><center><a href="https://clovermike.itch.io/disco-sorter">Visit game website, download the game</a></center></h5>
<h5 id="centersource-codehttpsgithubcommikemg-pldisco-sortercenter"><center><a href="https://github.com/MikeMG-PL/Disco-Sorter">Source Code</a></center></h5>
<center>
<p>I was young and stupid back then (now I&rsquo;m only stupid). Forgive poor commit naming and rookie code.</p>
</center>
<br>
<br>
<br>
<center>
<p>



<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="/portfolio" class="btn-custom solid">← Back</a>





<style>
  .btn-custom {
    font-size: 24px;
    margin-top: 10px;
    margin-bottom: 25px;
	margin-left: 25px;
	margin-right: 25px;
    font-family: 'Signika', sans-serif;
    color: white;
    text-decoration: underline;
    cursor: pointer;
    position: relative;
	opacity: 0.75;
    transition: opacity 0.3s ease;
  }

  .btn-custom:hover {
    
    opacity: 1;  
  }
</style>


  
  <a href="#" class="btn-custom solid">↑ Top ↑</a>
</p>
</center>
<br>
]]></description>
                

                <guid isPermaLink="false">tag:mikegalinski.com,0001-01-01:/portfolio/disco-sorter/</guid>

                
                    <link>https://mikegalinski.com/portfolio/disco-sorter/</link>
                

                
                    <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
                

                
                    <title>Disco Sorter</title>
                
            </item>
        
    </channel>
</rss>
