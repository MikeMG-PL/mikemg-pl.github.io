[{
  "section": "Blog",
  "slug": "/blog/post-3/",
  "title": "Basic Resource Management in a Custom Game Engine",
  "description": "",
  "date": "October 4, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/post-3/post-3_hu51d91b9ede2bc88ceb061018dfee1142_381156_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/post-3\\/post-3_hu51d91b9ede2bc88ceb061018dfee1142_381156_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/post-3/post-3_hu51d91b9ede2bc88ceb061018dfee1142_381156_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/post-3\\/post-3_hu51d91b9ede2bc88ceb061018dfee1142_381156_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Game Programming",
  "tags": "programming, core engine, resource management, game engines",
  "content":" Resource management in game engines is a wide term. It ranges from handling freshly exported assets to managing assets loaded into memory, in a specific form for particular engine modules. In this article I describe the most basic form of runtime resource management – based on sharing a resource loaded only once into memory.\nBackground I present this topic in the context of a simple game engine I coworked on, written in 4 months, in modern C++ and DirectX 11 for courses conducted by Lodz University of Technology. In this post I want to guide students and beginners in engine programming trying to create their first game engine, drawing from my experience with this project.\nWhy Basic Resource Management Is Important It\u0026rsquo;s the memory cost, CPU efficiency, and loading times. Let\u0026rsquo;s recall your first graphics programming project. Maybe it was a graphics programming course at your university or you were just playing with learnopengl.com, or something else. Did you pay much attention to how often are the assets loaded?\nLet\u0026rsquo;s investigate a scene having 20 identical models (with multiple meshes) and 20 identical textures of the \u0026ldquo;level completed\u0026rdquo; panel. How many times are these assets loaded?\nInfo\nWithout runtime resource manager, the same model and texture will be loaded into memory 20 times – for each instance.\nWith runtime resource manager, the same model and texture will be loaded into memory only once – with the first instance.\n❌ without runtime resource manager ✅ with runtime resource manager memory cost 1.6 GB 678 MB peak CPU %\nwhile loading 21% 14% load time 2.280 s 0.645 s This is one of the first thing you should pay attention to when transistioning your project from a small graphics programming application to a simple framework/engine. Such improvement is easy to implement and it will be good enough in terms of optimizing memory and CPU efficiency in your first game engine.\nImplementation Firstly, let\u0026rsquo;s create a ResourceManager class and make it a Meyers\u0026rsquo; Singleton. It\u0026rsquo;s not the devil here. Singletons are often used in game engines, and having a global access to this only instance is really helpful. You also probably don\u0026rsquo;t bother about thread-safety in you first, single-threaded, game engine.\nIn our case, we list the following types of resources: shaders, textures, and meshes.\nNote\n– What about sounds?\n– They are handled differently via miniaudio library which takes care of reference counting.\nLet\u0026rsquo;s declare methods for loading our resources. We\u0026rsquo;re trying to make sort of a unified interface here, but you will see how those loader methods reference other subsystems and delegate loading resources to particular factory methods in different modules.\n// ResourceManager.h: std::shared_ptr\u0026lt;Texture\u0026gt; load_texture(std::string const\u0026amp; path, TextureType const type, TextureSettings const\u0026amp; settings = {}); std::shared_ptr\u0026lt;Texture\u0026gt; load_cubemap(std::vector\u0026lt;std::string\u0026gt; const\u0026amp; paths, TextureType const type, TextureSettings const\u0026amp; settings = {}); std::shared_ptr\u0026lt;Texture\u0026gt; load_cubemap(std::string const\u0026amp; path, TextureType const type, TextureSettings const\u0026amp; settings = {}); std::shared_ptr\u0026lt;Shader\u0026gt; load_shader(std::string const\u0026amp; compute_path); std::shared_ptr\u0026lt;Shader\u0026gt; load_shader(std::string const\u0026amp; vertex_path, std::string const\u0026amp; pixel_path); std::shared_ptr\u0026lt;Shader\u0026gt; load_shader(std::string const\u0026amp; vertex_path, std::string const\u0026amp; pixel_path, std::string const\u0026amp; geometry_path); std::shared_ptr\u0026lt;Shader\u0026gt; load_shader(std::string const\u0026amp; vertex_path, std::string const\u0026amp; tessellation_control_path, std::string const\u0026amp; tessellation_evaluation_path, std::string const\u0026amp; pixel_path); std::shared_ptr\u0026lt;Mesh\u0026gt; load_mesh(u32 const array_id, std::string const\u0026amp; name, std::vector\u0026lt;Vertex\u0026gt; const\u0026amp; vertices, std::vector\u0026lt;u32\u0026gt; const\u0026amp; indices, std::vector\u0026lt;std::shared_ptr\u0026lt;Texture\u0026gt;\u0026gt; const\u0026amp; textures, DrawType const draw_type, std::shared_ptr\u0026lt;Material\u0026gt; const\u0026amp; material, DrawFunctionType const draw_function = DrawFunctionType::Indexed); Each of these methods is responsible for loading a resource. As you can see e.g. load_shader() methods are overloaded, as different shaders can be loaded. Next, let\u0026rsquo;s declare vectors that store our resources:\nstd::vector\u0026lt;std::shared_ptr\u0026lt;Texture\u0026gt;\u0026gt; m_textures = {}; std::vector\u0026lt;std::shared_ptr\u0026lt;Mesh\u0026gt;\u0026gt; m_meshes = {}; std::vector\u0026lt;std::shared_ptr\u0026lt;Shader\u0026gt;\u0026gt; m_shaders = {}; Info – Generating Keys\nTo load resources only once we need to keep track of what has already been loaded, and return a pointer to a resource instead of loading it again. We track it by generating a unique key for each resource. This \u0026ldquo;key\u0026rdquo; is a string in the following std::unordered_map. The key is tied to an index of the resource in its respective vector and it uniquely identifies where the asset comes from. We need to distinguish that a model loaded from a file \u0026ldquo;model1.gltf\u0026rdquo; is different from a model loaded from \u0026ldquo;model2.gltf\u0026rdquo;, and that when we load \u0026ldquo;model1.gltf\u0026rdquo; again, it\u0026rsquo;s the same file that was loaded earlier, so we need to reference what\u0026rsquo;s already loaded instead of loading it again. The key is a bridge between an asset on disk and it\u0026rsquo;s different form in memory.\nHere are the unordered maps storing keys and IDs in the respective m_textures/m_meshes/m_shaders vectors.\nstd::unordered_map\u0026lt;std::string, u16\u0026gt; names_to_textures = {}; std::unordered_map\u0026lt;std::string, u16\u0026gt; names_to_meshes = {}; std::unordered_map\u0026lt;std::string, u16\u0026gt; names_to_shaders = {}; std::unordered_map here is perfect, because generating keys for a resource manager is convenient when using strings, and std::unordered_map hashes the strings. It\u0026rsquo;s good to remember for the future that comparing hashed strings is much faster than actual strings!\nLet\u0026rsquo;s also declare a simple method that just converts a stringstream to string, this is for convenience, and this is, in fact, generating a string key:\n[[nodiscard]] std::string generate_key(std::stringstream const\u0026amp; stream) const; \u0026hellip;and a method for retrieving an element from a vector. This is a template method (compile time goes brrr!) but in this simple case it could be just three similar methods for each type of resource. It might look a bit ugly for you, but handling it like that is not necessarily bad. The resources are vastly different, and the more types of them you have, the harder it gets to prepare a unified approach. The nature of a resource manager itself often results in methods like this:\ntemplate\u0026lt;typename T\u0026gt; std::shared_ptr\u0026lt;T\u0026gt; get_from_vector(std::string const\u0026amp; key) { i32 id = -1; if constexpr (std::is_same_v\u0026lt;T, Texture\u0026gt;) { auto const it = names_to_textures.find(key); if (it != names_to_textures.end()) { id = it-\u0026gt;second; return m_textures[id]; } } else if constexpr (std::is_same_v\u0026lt;T, Mesh\u0026gt;) { auto const it = names_to_meshes.find(key); if (it != names_to_meshes.end()) { id = it-\u0026gt;second; return m_meshes[id]; } } else if constexpr (std::is_same_v\u0026lt;T, Shader\u0026gt;) { auto const it = names_to_shaders.find(key); if (it != names_to_shaders.end()) { id = it-\u0026gt;second; return m_shaders[id]; } } return nullptr; } It could be automated with some autogenerated code (we have an \u0026ldquo;Engine Header Tool\u0026rdquo; in our project used for e.g. generating (de)serialization code for components). Have a better idea for implementing it? Post it in a comment below!\nThe above function, firstly, checks which type of resource are we dealing with (e.g. if constexpr (std::is_same_v\u0026lt;T, Texture\u0026gt;) is true if the given type is Texture) – this decides in which unordered map are we going to look for the key, and in which vector – for the resource. Then we\u0026rsquo;re using std::unordered_map::find() to find the key in our unordered map. If this key is found, we return the ID of the resource paired with the key. If not, we return nullptr.\nWe\u0026rsquo;re lacking the last peace of the puzzle. How do the loading methods work? And maybe at this point the idea of \u0026ldquo;keys\u0026rdquo; representing assets is still murky? Let me clarify:\n// ResourceManager.cpp: std::shared_ptr\u0026lt;Shader\u0026gt; ResourceManager::load_shader(std::string const\u0026amp; vertex_path, std::string const\u0026amp; pixel_path) { std::stringstream stream; stream \u0026lt;\u0026lt; vertex_path \u0026lt;\u0026lt; pixel_path; std::string const\u0026amp; key = generate_key(stream); auto resource_ptr = get_from_vector\u0026lt;Shader\u0026gt;(key); if (resource_ptr != nullptr) return resource_ptr; resource_ptr = ShaderFactory::create(vertex_path, pixel_path); m_shaders.emplace_back(resource_ptr); names_to_shaders.insert(std::make_pair(key, m_shaders.size() - 1)); return resource_ptr; } This is a load_shader() function for shader programs in which we specify just a vertex shader and a pixel (fragment) shader. Again, shader file A is different from shader file B. So we generate a key of this shader asset from the paths of vertex and pixel shader!\nWe declare a stringstream and fill it with vertex_path and pixel_path. Then we use generate_key() method that will convert the stringstream to string and return it:\nstd::string ResourceManager::generate_key(std::stringstream const\u0026amp; stream) const { return stream.str(); } Then, in load_shader(), we obtain a resource from the respective vector (auto resource_ptr = get_from_vector\u0026lt;Shader\u0026gt;(key);) We tell what type of resource it is as a template parameter. And we will have either a proper resource (so we can return it and save memory, yay!) or we have a nullptr if nothing was found in the vector.\nLook again what happens when no resource was found:\n// (...) resource_ptr = ShaderFactory::create(vertex_path, pixel_path); m_shaders.emplace_back(resource_ptr); names_to_shaders.insert(std::make_pair(key, m_shaders.size() - 1)); return resource_ptr; When resource was not found in the vector, it needs to be loaded. And it might vary from resource to resource. Here we call a factory method that will load and create a valid shader program, emplace_back() it into the vector, and insert() a key-ID pair into the unordered map. From now on, the same resource (with this key) will no longer be loaded again, resource manager will just return already loaded asset from the vector. ShaderFactory::create() can be replaced with your method that\u0026rsquo;s used for loading and compiling shaders, of course.\nLet\u0026rsquo;s see another example. Meshes can be either parts of some models (loaded using libraries such as tinygltf or Assimp) or they can be generated from code (e.g. cubes and spheres). How to properly distinguish meshes to load them only when needed?\nHere\u0026rsquo;s the trick: we used a mesh ID within the model, and paths to all textures in addition to a model name to generate a key.\nstd::shared_ptr\u0026lt;Mesh\u0026gt; ResourceManager::load_mesh(u32 const array_id, std::string const\u0026amp; model_name, std::vector\u0026lt;Vertex\u0026gt; const\u0026amp; vertices, std::vector\u0026lt;u32\u0026gt; const\u0026amp; indices, std::vector\u0026lt;std::shared_ptr\u0026lt;Texture\u0026gt;\u0026gt; const\u0026amp; textures, DrawType const draw_type, std::shared_ptr\u0026lt;Material\u0026gt; const\u0026amp; material, DrawFunctionType const draw_function) { std::stringstream stream; stream \u0026lt;\u0026lt; model_name \u0026lt;\u0026lt; array_id; for (auto const\u0026amp; texture : textures) { stream \u0026lt;\u0026lt; texture-\u0026gt;path; } std::string const\u0026amp; key = generate_key(stream); auto resource_ptr = get_from_vector\u0026lt;Mesh\u0026gt;(key); if (resource_ptr != nullptr) return resource_ptr; resource_ptr = MeshFactory::create(vertices, indices, textures, draw_type, material, draw_function); m_meshes.emplace_back(resource_ptr); names_to_meshes.insert(std::make_pair(key, m_meshes.size() - 1)); return resource_ptr; } Processing all meshes within one model, in a Model class, looks like this now:\n// Model.cpp: void Model::proccess_node(aiNode const* node, aiScene const* scene) { for (u32 i = 0; i \u0026lt; node-\u0026gt;mNumMeshes; ++i) { aiMesh const* mesh = scene-\u0026gt;mMeshes[node-\u0026gt;mMeshes[i]]; m_meshes.emplace_back(proccess_mesh(mesh, scene)); } // (...) } std::shared_ptr\u0026lt;Mesh\u0026gt; Model::proccess_mesh(aiMesh const* mesh, aiScene const* scene) { // (...) // m_meshes is being filled, so m_meshes.size() gets incremented and it\u0026#39;s unique each iteration return ResourceManager::get_instance().load_mesh(m_meshes.size(), model_path, vertices, indices, textures, m_draw_type, material); // array_id for generating key is an index in m_meshes } Passing a size of m_meshes to ResourceManager when filling m_meshes to generate a key is smart and easy! But what if a mesh is generated, e.g. it\u0026rsquo;s a simple code-generated cube or a quad? Take a look:\n// \u0026#34;Button\u0026#34;, a class that needs to create a mesh from code. Button.cpp: std::shared_ptr\u0026lt;Mesh\u0026gt; Button::create_sprite() const { std::vector\u0026lt;Vertex\u0026gt; const vertices = { {glm::vec3(-1.0f, -1.0f, 0.0f), {}, {0.0f, 0.0f}}, // bottom left {glm::vec3(1.0f, -1.0f, 0.0f), {}, {1.0f, 0.0f}}, // bottom right {glm::vec3(1.0f, 1.0f, 0.0f), {}, {1.0f, 1.0f}}, // top right {glm::vec3(-1.0f, 1.0f, 0.0f), {}, {0.0f, 1.0f}}, // top left }; std::vector\u0026lt;u32\u0026gt; const indices = {0, 1, 2, 0, 2, 3}; std::vector\u0026lt;std::shared_ptr\u0026lt;Texture\u0026gt;\u0026gt; textures; std::vector\u0026lt;std::shared_ptr\u0026lt;Texture\u0026gt;\u0026gt; diffuse_maps = {}; TextureSettings texture_settings = {}; texture_settings.wrap_mode_x = TextureWrapMode::ClampToEdge; texture_settings.wrap_mode_y = TextureWrapMode::ClampToEdge; if (!m_texture_path.empty()) diffuse_maps.emplace_back(ResourceManager::get_instance().load_texture(m_texture_path, TextureType::Diffuse, texture_settings)); textures.insert(textures.end(), diffuse_maps.begin(), diffuse_maps.end()); return ResourceManager::get_instance().load_mesh(0, m_texture_path, vertices, indices, textures, DrawType::Triangles, material); } You can see two usages of ResourceManager here. The first one is for a texture, and the second one is for handling a code-generated quad. In this case, we only need info about the texture for the quad to uniquely identify it. So we simply pass \u0026ldquo;0\u0026rdquo; as an array_id, because there\u0026rsquo;s no mesh array in Button class, it\u0026rsquo;s just one mesh with four vertices declared by hand.\nIn more complex cases you might need to come up with more sophisticated ways of generating keys to identify the assets.\nSummary That\u0026rsquo;s it! I hope now you can be happy with your saved memory, smaller CPU usage, and shorter loading times. 😄 Even if the performance of your engine was improved just by a little, this was an important step in building a sensible engine architecture. And you will thank yourself for writing runtime resource manager when you will approach programming systems that load plenty of entities, such as particle systems. Here\u0026rsquo;s a recap of the post:\nTip Summary\nHow basic runtime resource manager works when you request (load) a resource:\nit generates a key (each loading function may have slightly different implementation). calls a template method get_from_vector() specifying desired resource type and providing the key. It will return either nullptr or a valid resource. if a valid resource is returned by get_from_vector(), you\u0026rsquo;ve got your resource! if a nullptr is returned by get_from_vector(), a custom loading function (e.g. from a ShaderLoader) is called and the returned value is added to a vector. A key and ID pair is added to an unordered map. The freshly loaded resource is returned. What You Need to Be Aware of Some might say, \u0026ldquo;This code could be written differently!\u0026rdquo; Yes, probably better too. But as mentioned earlier, this engine was developed in a single semester by 4 students, using the tools and techniques we were familiar with, primarily modern C++. Our goal was to create something functional and beginner-friendly, working within the constraints of our time and experience. We had just 4 months to build both the engine and create a game on it with the rest of the team. We know that engine programming is a vast field and our approach might sometimes differ from what you\u0026rsquo;d see in AAA studios. Nevertheless, this was a solid first step and we’re proud of it. Special thanks to:\nMariusz Sielicki, an experienced developer who has guided me and my team through struggles with resource management and broadened my grasp of how vast this topic is. Activision, for appreciating our project and awarding it at ZTGK 2024 Gamedev Contest. Sources \u0026amp; Additional Materials Game Engine Architecture, 3rd Edition – a Bible of engine programming, serving as a great introductory text. Has a solid chapter on resource management. Singleton, How It Should Be Used, a StackOverflow Thread Orthodox C++ Manifest – this is mostly how AAA graphics \u0026amp; low-level engine modules requiring high performance are done. Worth getting into, but please, don\u0026rsquo;t attempt to apply this in your first engine, especially an educational project with tight deadlines. Data Oriented Design, Online Release – another great source on how (not only) engines and games are structured around data. This is also a AAA professional case. "},{
  "section": "Blog",
  "slug": "/blog/post-2/",
  "title": "Holistic Game Production. How We Made &#34;Heartbreaker&#34;",
  "description": "",
  "date": "October 1, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/post-2/post-2_hua625995cca95f282c1cea8a3710f9a78_582589_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/post-2\\/post-2_hua625995cca95f282c1cea8a3710f9a78_582589_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/post-2/post-2_hua625995cca95f282c1cea8a3710f9a78_582589_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/post-2\\/post-2_hua625995cca95f282c1cea8a3710f9a78_582589_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Game Production",
  "tags": "production, heartbreaker, directing, design",
  "content":" \u0026ldquo;Heartbreaker\u0026rdquo; started as a job interview task I built in one weekend. 18 months later, my teammates and I won an award with \u0026ldquo;Heartbreaker\u0026rdquo; during a global gamedev conference, surpassing over a 100 professional indie teams. How did we achieve it?\nAbstract This text reflects my experience as a team coordinator for the game \u0026ldquo;Heartbreaker.\u0026rdquo; It is also a postmortem of the game. I present loosely gathered thoughts on our multielement, holistic approach to developing \u0026ldquo;Heartbreaker\u0026rdquo;. I believe that the amazing interdisciplinary team I\u0026rsquo;ve had the pleasure of working with, along with this holistic approach to the project, have been key to creating a game we are so proud of.\nMurky Roles It is five of us in \u0026ldquo;Disco Angels\u0026rdquo; team and everyone was involved into giving the \u0026ldquo;macro\u0026rdquo; direction of the game, designing \u0026ldquo;micro\u0026rdquo; elements of gameplay, or production. But some roles are indeed visible, and the key to cooperation in our tiny team is\u0026hellip; trust!\nOur team receiving \u0026ldquo;Best Gameplay\u0026rdquo; award at Game Access Conference 2024, Indie Showcase When an important artistic decision needs to be made, Agata, our art lead, has the final word. When there\u0026rsquo;s a critical bug that needs to be fixed immediately, I know I can always trust Mikołaj. When we had to implement an emergency option as fast as possible, Mateusz programmed it in a flash. Want to capture the atmosphere of a location with sound and music? Michał Świstak for the rescue! And me, with responsibilities ranging from programming to supervising formalities around events or setting up tasks. A conclusion?\nConclusion\nThe key to identifying roles in our team is trust. Although I serve as a leader/coordinator/producer, we feel responsible for the vision behind the game as one.\nElements of Holistic Production in \u0026ldquo;Heartbreaker\u0026rdquo; Applying a holistic approach during the development of \u0026ldquo;Heartbreaker\u0026rdquo; was one of the aspects I loved most about my role as a leader. It involved acknowledging every part of our creative vision and bringing it to life within a realistic timeframe. Several factors contributed to the high-quality experience we aimed to deliver, which I refer to as \u0026ldquo;elements\u0026rdquo;. For instance, knowing we would showcase our game at a professional game development conference, we wanted to ensure that none of the elements misfit or were of lower quality than the rest. Additionally, we aimed for all elements to support one another!\nI encourage you to get to know “Heartbreaker.” This will help you follow the text more easily. You can even download and try the game yourself.\nNote\nThe elements presented here aren\u0026rsquo;t prioritized in any way. Sure, prioritization and resource allocation were different in case of every element, but we wanted to consider all the elements together so they support each other. This is what we call \u0026ldquo;the holistic approach\u0026rdquo; in \u0026ldquo;Heartbreaker.\u0026rdquo;\nGameplay \u0026ldquo;Heartbreaker\u0026rdquo; started as a job interview task but eventually evolved into something entirely different in terms of art and gameplay. I describe it further in section The Art of Defining Scope And Cutting Things Out.\nAs an FPP platformer, it\u0026rsquo;s built around the idea of crashing hearts of stone through dynamic movement. This works well on the Theme \u0026amp; Story element but is also a core gameplay mechanic. You use a dash skill to crash into opponents\u0026rsquo; hearts in the environment. This concept evolves to later pair your movement with trampolines or new abilities, such as a grappling hook.\nIt was the easiest for us to begin the development with gameplay. While a creative vision related to a specific theme, story, or art style might come first in some projects, gameplay was the foundation in ours. We wanted to kick things off with something interactive (not lore or ten pages of backstory). Rapid prototyping and the \u0026ldquo;fail fast\u0026rdquo; approach to testing gameplay were key to this process.\nConclusion\nWe started the development with gameplay – multiple prototypes, iterations, playtests, and enhancing the experience.\nOf course that did not mean, for instance, our artists weren\u0026rsquo;t working on art or music elements during that time. Pure gameplay mechanics were simply what we devoted the most time to at that stage.\nLet\u0026rsquo;s focus on prototyping – at the beginning it was crucial to build a testable and playable version of the most important gameplay mechanics as quickly as possible. We built a few of them and tested with players (mostly students in our gamedev club), to see what worked and what didn\u0026rsquo;t. We did this frequently, especially when we were uncertain about whether our gameplay was fun. Early playtests were essential for this. If a particular mechanic, like \u0026ldquo;constant jumping\u0026rdquo; (more on that later) disoriented our players, we tweaked it and tested again. If it remained confusing, we cut it out. When something \u0026ldquo;clicked,\u0026rdquo; even in its rough form, players confirmed that during the tests. However, it was also important to filter all feedback. We listened to our players carefully and took notes of everything they mentioned, but the final decisions were ours. We knew that playtesters often pointed us in the right direction, but their conclusions about certain aspects of gameplay might sometimes differ from the real cause of the trouble, or sometimes we might just stick to our vision.\nWhen building fundamental gameplay mechanics, we prepared a comfortable space that served our needs. It was an extra scene (a level) that was mostly empty but allowed for easy enemy spawning or testing other game systems. In \u0026ldquo;Heartbreaker\u0026rdquo;, we call these levels \u0026ldquo;Labs,\u0026rdquo; as they function like a lab for experimenting with gameplay. This approach allowed us to \u0026ldquo;fail fast\u0026rdquo; and iterate quickly.\nAn early prototype of grappling hook skill – tested on a \u0026ldquo;Lab\u0026rdquo; level. Conclusion\nWe prepared a comfortable space for prototyping, testing, and iterating crucial gameplay mechanics.\nArt Style \u0026amp; Graphics Initially, we had two ideas for the art style of \u0026ldquo;Heartbreaker\u0026rdquo;, but neither was connected to the other elements of the game. However, once the core gameplay and lore emerged, everything began to make a good match.\nThose ideas were: wild west high above the ground and geometric abstraction. We chose the second option, but what we selected isn\u0026rsquo;t as important as how we connected the art style to the other elements. A relaxing nature of the setting along with holiday and party atmosphere went well with the gameplay – crashing hearts of stone. Players having traversed the luxury (but abstract) resort thought of: the story that matched the location, and gameplay. Having seen the art making up this world reminded the relaxing, slightly unreal atmosphere of the game, parallel to those \u0026ldquo;meta\u0026rdquo; gameplay mechanics.\nOur art style was not just randomly placed low-poly figures. We aimed to build a world that resembled the real one using these figures. Agata, responsible for leading the art direction of \u0026ldquo;Heartbreaker\u0026rdquo;, gathered a lot of references and drew inspiration from postmodern Mediterranean architecture. We blended abstract figures to shape the environment, and emissive elements that guided players where to go (neons or the wind).\nA screenshot from \u0026ldquo;Heartbreaker\u0026rdquo; La Muralla Roja hotel, a photo I took in Calpe, Spain Conclusion\nWe wanted to make art style parallel with gameplay and story. We also aimed to make players think of our gameplay and lore when they looked at our game.\nTheme \u0026amp; Story I wish I had known how challenging it would be to create a heavily story-driven adventure when I started my gamedev journey. This is why we decided to begin the development with gameplay. It was also much easier to build a story around existing gameplay than to do the reverse.\nThis is how we approached \u0026ldquo;Heartbreaker:\u0026rdquo;: we established a solid gameplay foundation, developed an emerging art style, and built on simple lore and microstory. Both we and the playtesters were happy with the results! This approach also left us plenty of room to expand the story and lore later on.\nWe knew that this is the exact approach Valve took during the development of \u0026ldquo;Portal.\u0026rdquo; Valve was extremely impressed by the prototype developed by DigiPen students, and wanted them to finish \u0026ldquo;the portal game\u0026rdquo; on Source Engine as fast as possible. Later on playtests showed that 15-30 minutes into the game players got bored by the lack of purpose, theme, and story. This feedback led to the development of the entire concept of Aperture Science Laboratories.\nOur game is quite \u0026ldquo;meta\u0026rdquo; in its narrative. In \u0026ldquo;Heartbreaker\u0026rdquo; player takes on the role of an anonymous character guided by the voice of a young woman, while visiting Elcoro – a realm inhabited by extremely wealthy individuals who achieved everything they desired in their lifes. Player then quickly realizes that this whole resort, although looking happy, is full of decadence and coldheartedness. The female narrator tells our hero to crash those hearts of stone to make the land happy again.\nWe weren\u0026rsquo;t afraid to reach for the story to rescue our gameplay. This is why we decided to introduce the idea of crashing hearts. We wanted to inject more context and familiarity to the mechanics we created.\nLong ago, the main gameplay idea was still the same: using dash for combat. Initially, enemies had their \u0026ldquo;weak spot,\u0026rdquo; the line showing where to dash in order to defeat them. During playtests it turned out that such gameplay is fun, but understanding the idea takes too long, thus, it\u0026rsquo;s unintuitive. Story for the rescue! We redesigned the enemies and decided that hearts of stone will be their weak spots. More about how our gameplay changed over the course of the development in section The Art of Defining Scope and Cutting Things Out. 😉\nDashing over the line to defeat enemies Crashing hearts of enemies in \u0026ldquo;Heartbreaker\u0026rdquo; I like a similar example that Jesse Schell presents in his book \u0026ldquo;The Art of Game Design: A Book of Lenses:\u0026rdquo;\nMy initial design for the gameplay in \"Mordak's Revenge\" board game required players to collect five keys to battle the evil wizard Mordak at his stronghold. However, I realized it would be better if Mordak could come to the player instead, making the experience more immediate. So, I changed the story: what if Mordak's castle was hidden, and players needed to collect five summoning stones instead of keys? Once all five were gathered, Mordak could be summoned to battle the player in any circumstances. This simple change made the desired gameplay possible. — Jesse Schell in his book\nJesse Schell also points out (and I agree with him) that:\nStory elements can often be changed with just a few words, where changing elements of gameplay might take weeks of balancing, and changing elements of technology might take months of reprogramming. — Jesse Schell in his book\nConclusion\nStory for the rescue! We used it to support other elements better, especially gameplay and the clarity of it.\nLevel Design \u0026amp; Level Art In a linear game where players just traverse content it is extremely crucial that they know where to go. This was the main focus during the process of designing levels in \u0026ldquo;Heartbreaker\u0026rdquo;. To achieve this, we iterated our levels and modified them according to how they fit the gameplay (like adjusting distances between platforms). Iterating required us to keep the levels at the stage of blockout as long as possible.\nEarly blockout with minimal decor Final game with enemies and level art applied On his ArtStation, Jeff Horal, Principal Environment Artist at Mountaintop, showcases many locations from \u0026ldquo;Destiny 2\u0026rdquo; as blockouts – representing the level design phase – and their final look after adding actual models, applying materials, and including decoration. The upper image depicts the level during design iterations, while the lower image shows the finished version:\nA part of \u0026ldquo;Vostok\u0026rdquo; – a \u0026ldquo;Destiny 2\u0026rdquo; map. Author: Jeff Horal. This image was firstly presented to me during a university lecture ❤ and I wanted to reference it here too!\nSo during production, it was extremely important to keep our levels in the level design stage (the upper picture) when iterating. This was because reworking a blockout is generally like playing with building blocks, and reworking a decorated level is like destroying your freshly arranged house, moving all the walls, and furnishing it again. We knew that if we don\u0026rsquo;t test out the levels early, we will waste plenty of time redoing level art job unnecessarily. So we aimed to enter the level art stage after deep iterations and feedback from playtesters.\nUnfortunately, \u0026ldquo;the YOLO approach\u0026rdquo; kicked in a few times in several tight corners of production. Welcome to gamedev! 🎉 I discuss this further in the \u0026ldquo;The Mess of Game Production\u0026rdquo; section.\nThe normal process looked like this: a part of the level was designed as a blockout and tested through multiple iterations. After making some pivots and adjustments, the location was ready for decoration. This was usually handled by Agata, our art lead, though other developers often contributed as well.\nWe also wanted to make every location you visit in \u0026ldquo;Heartbreaker\u0026rdquo; distinct and memorable. There\u0026rsquo;s a patio with a garden party, swimming baths, a nightclub, jungle, housing district, atrium, casino, bowling alley, library, rooftop pool, mini-golf course, and a shopping mall\u0026hellip; and that\u0026rsquo;s just the first 20 minutes of the game! (Yes, I\u0026rsquo;m so excited about our locations).\nConclusion\nWe keeped levels at the stage of blockout during prototyping and tests. Finishing it, decorating, and filling with final assets too early might have resulted in unnecessary work.\nMusic \u0026amp; SFX Sound and music are also something that holded our game together. They were important for many reasons. Some more obvious, like being an integral part of the antourage around the game\u0026rsquo;s setting, just like visuals. Less obvious reasons include being a major UX component – sound can be (and should be!) used as something that gives players feedback just as user interface, particles, or other visuals.\nIn \u0026ldquo;Heartbreaker\u0026rdquo;, sound effects are everywhere – they accompany every action players take, every piece of it, to fully notify the players about what is happening right now. The main goal our sound designer and composer, Michał, had was delivering the feeling of being immersed into the world we have created.\nSoundtrack is also built around the party and holiday theme with a nostalgic addition to it. Players traverse the levels listening to chill \u0026amp; beach house music. What is more, the music reflects the atmosphere of the story we discover and locations we visit. When we arrive at the garden party at the very beginning of the game, we can hear a lively dance track. When we reach darker but much more magical jungle, the music changes to more nostalgic. You can listen to the full soundtrack below:\nMichał Świstak · Heartbreaker OST Please also note that our game contains full voice acting. This was extremely important in terms of delivering our simple story. I\u0026rsquo;ve also had plenty of fun with the whole entourage around producing high-quality voiceover, as a team coordinator. We rented a recording studio and Michał, our sound designer, supervised the process of recording voicelines with Ola, our narrator. We could together analyze the voicelines on the fly and guide Ola what do say differently or with different emotions. I absolutely loved the process.\nConclusion\nSound and music provided feedback to players (told them what\u0026rsquo;s happening) and set the atmosphere, as we believed that sound is as important as visuals.\nUI \u0026amp; UX Another consequential element of the holistic approach is the general user experience (UX). This is the overall feeling a user has while interacting with the product (game). We of course strived to bring it to a higher level and that, again, happened by massive iterations, tests, and observing players while asking \u0026ldquo;What do the players do?\u0026rdquo;, \u0026ldquo;Why do they do it?\u0026rdquo;, or \u0026ldquo;How do they do it?\u0026rdquo;.\nThere were also thousands of ways to show what\u0026rsquo;s going on in our game, and to let players interact with the game – and that\u0026rsquo;s where UI comes in. User interface. We knew that interface is not only things you see on your screen in an overlay manner. It\u0026rsquo;s the totality of things that communicate information to the players and let them interact with your game.\nAnd now I\u0026rsquo;d like to throw a shout-out to my teacher, Jarosław Andrzejczak, PhD, a UX researcher, who has vastly improved the general user experience and clarity of many systems and mechanics we have included in our game.\nThe main conclusion I have in reference to working on UI/UX of \u0026ldquo;Heartbreaker\u0026rdquo; is:\nConclusion\nWe were able to show many things in a more natural, \u0026ldquo;human-friendly\u0026rdquo; way, rather than with standardized and abused (and not always perfect) video game patterns.\nLet\u0026rsquo;s take this example: In the second level we introduce the grappling hook. During playtests it turned out that this skill is massively overpowered. Grappling could get us literally everywhere. We came to a conclusion that grappling needs nerfing, although in a way that doesn\u0026rsquo;t make the players feel weakened. So we decided that there will be only one use of the grappling hook but the players will earn it back with each heartbreak. So how did we show that rule to the player?\nWell obviously we could come up with an on-screen icon depicting a grappling hook. For instance, if it\u0026rsquo;s full, we can use the grappling, if it\u0026rsquo;s empty – we can\u0026rsquo;t. That\u0026rsquo;s the most brute-force thing one can potentially come up with. It can be done in a more natural and understandable way for the player – take a look at this idea of our teacher:\nGrappling is a heart fragment – you take it by breaking a heart. Why clutter the interface with additional icons just because that was the first idea that came to our minds? We had hand animations, so we decided to use them! It\u0026rsquo;s as simple as that: grappling is a piece of a heart. If you have this piece in your hand, obvoiusly you can use it and you see your character throw it. It\u0026rsquo;s logical. A \u0026ldquo;side-effect\u0026rdquo; of it is that it limits the use of grappling, so this is the exact nerf of this gameplay aspect we aimed to achieve.\nTutoring Players needed to learn how to play \u0026ldquo;Heartbreaker\u0026rdquo;. So how did we teach them rules and mechanics? A tutorial? Or maybe by throwing the players into deep water and letting them figure out gameplay on their own? We decided to apply a seamless approach. This means that, instead of a \u0026ldquo;traditional\u0026rdquo; tutorial we embedded the process of teaching players how to play into main levels of the game. The main goal of this was to not let the players realize that they are being taught how to play.\nAnd much more. Now I want to convey that bad tutoring in this game could put off players massively. And I found this topic so important that I even wrote a separate article about that. Designing tutoring was a complex topic in every game I coworked on. I encourage you to visit this separate text about it. But to not leave you with nothing at this point, I would like to highlight a \u0026ldquo;megaconclusion\u0026rdquo; here: Paying attention to teaching players how to play paid off. We didn\u0026rsquo;t leave it at the last moment of production, we didn\u0026rsquo;t go for a short brief of controls or gameplay, deciding it\u0026rsquo;s enough. We decided that embedding tutoring in gameplay is the most elegant solution here. We also made other elements, especially UI \u0026amp; UX support the tutoring.\n\u0026ldquo;Guiding Light\u0026rdquo;, another game I worked on, attempts to apply seamless tutoring too. You can read more about it in this article. Conclusion\nWe approached tutoring players as another important element that needed intentional planning and design. We went with \u0026ldquo;a seamless approach\u0026rdquo; to keep the players immersed, and we were happy with the results.\nThe Mess of Game Production No matter how well production is managed, unpredictable issues may arise. This could be an unexpected engine bug that prevents crucial systems from functioning, problems with outsourcing, or even hardware malfunctions. This is why we decided to allocate a reasonable amount of time as a safety buffer. And when you\u0026rsquo;re concerned that certain tasks may take longer than anticipated, remember what happened to us:\nConclusion\nThings usually took longer than expected.\nAn example from the production of \u0026ldquo;Heartbreaker\u0026rdquo; is fog. During the development of the second level, we began using a different type of fog to cover the depths of the level. It turned out that this fog caused a memory leak in the engine\u0026rsquo;s rendering module, resulting in slower performance and eventually crashing the engine. We discovered that this bug was fixed in the next Unreal Engine hotfix. However, several factors prevented us from migrating to the new version. While this problem slowed us down to some extent, we came up with a temporary solution. We concluded that the memory leak did not occur in the built game, so we created a simple script that deactivated all the fog in the editor and reactivated it just before building the game. Emergencies like this happen.\nTo address \u0026ldquo;the YOLO approach\u0026rdquo; I mentioned earlier, there were significant untested sections of the blockout. Unfortunately, due to time constraints in a few tight corners of production, we had to finish the levels with very little player feedback regarding some parts. So we polished those parts, decorated them, and didn\u0026rsquo;t look back. In several cases we were lucky and the reception of those level sections was satisfactory. However, some parts turned out to be too frustrating or difficult. The same with a few UI \u0026amp; UX aspects – they could have been better, but we couldn\u0026rsquo;t manage some obstacles that arised every time. And even Scrum, Trello, TO-DO lists, or feedback-based rapid prototyping fell short in a few cases because certain obstacles were simply not predicted.\nConclusion\nDespite saving a part of our time budget as a safety buffer, we lacked time for testing some sections of our levels or realizing a few gameplay ideas. This is what we aim to enhance in the future.\nThe Art of Defining Scope And Cutting Things Out I mentioned that \u0026ldquo;Heartbreaker\u0026rdquo; went through a lot before its gameplay crystalized. It started with a simple recruitment task I finished in one weekend (built with Blueprints and Unreal\u0026rsquo;s LearningKit assets). It was a completely different game which trick was jumping and moving forward constantly. This trick was blended with basic puzzles and arcade character of the game, shooting, in addition. It looked like this:\nOf course it resembles more of a gamejam prototype than an actual game, but me and my team started to build upon this prototype, test other camera perspectives and the idea in general. But then, a real gamejam happened!\nIn 48 hours we created a game called \u0026ldquo;The Power of Four Leaves\u0026rdquo;, in which you played as a black cat staging a heist on a four-leaf clover storage. Players could fight lepricorns and, as the players embodied a black cat, the combat was designed as dashing in front of the lepricorns, so they are unlucky and disappear. And this is when we introduced the idea of using your movement as combat. You had to use a dash skill to make the lepricorn disappear. Pretty similar to dashing into hearts of the enemies, isn\u0026rsquo;t it? Well, it\u0026rsquo;s almost the same!\nGamejam projects often have twisted gameplay, but GIFs you\u0026rsquo;ve already seen explain it quite well:\nDashing in front of lepricorns to defeat them Crashing hearts of stone in \u0026ldquo;Heartbreaker\u0026rdquo; We decided to blend the \u0026ldquo;constant jumping\u0026rdquo; idea (the one from the recruitment task) with using dash for combat and the results were\u0026hellip; disappointing. One day I showed a prototype to some experienced devs during a local gamedev beer meeting and their feedback made us realize that this gameplay needs cuts.\nThe problem was that our gameplay consisted of too many dynamic, difficult to master mechanics that were just random things put together. Then we were standing in front of a difficult choice – what to remove?\nWe removed the whole \u0026ldquo;constant jumping\u0026rdquo; stuff and decided to master the dash combat. And the rest of it is \u0026ldquo;Heartbreaker\u0026rdquo; you can play today. We focused on this one thing, the unique selling point and aimed to master it. Every next gameplay aspect that was in the game to serve this idea and make it deeper. And we are proud of how it developed.\nThe main conclusion here is: we shouldn\u0026rsquo;t have been afraid to \u0026ldquo;kill our child\u0026rdquo;. That means no hesitation to cut out a thing we spent time working on, if it doesn\u0026rsquo;t work, or doesn\u0026rsquo;t serve any real purpose in our game. We learned it the hard way, but the outcome of making such difficult decisions might be indeed lifesaving. In \u0026ldquo;Heartbreaker\u0026rdquo; often \u0026ldquo;less\u0026rdquo; meant \u0026ldquo;better\u0026rdquo; because of clarity, consistency, simplicity, and elegance of gameplay.\nConclusion\nWe shouldn\u0026rsquo;t have feared to sacrifice something we\u0026rsquo;ve been working on for some time, if it didn\u0026rsquo;t help our game. \u0026ldquo;Heartbreaker\u0026rdquo; got better after such cuts and that\u0026rsquo;s what mattered.\nSummary Woah! That was a lot of insight into \u0026ldquo;Heartbreaker\u0026rdquo;. I hope that I managed to show what challenges we, as a team, needed to tackle during the development and how we tied the game together using the holistic approach. This article is also my personal point of view with this \u0026ldquo;aspiring producer/director\u0026rdquo; mindset. Elements uncover obstacles a producer needs to be aware of, and needs to remove, so the development team can finish the game. And I love working with obstacles and restrictions.\nConclusion summary\nThe key to identifying roles in our team is trust. Although I serve as a leader/coordinator/producer, we feel responsible for the vision behind the game as one. We started the development with gameplay – multiple prototypes, iterations, playtests, and enhancing the experience. We prepared a comfortable space for prototyping, testing, and iterating crucial gameplay mechanics. We wanted to make art style parallel with gameplay and story. We also aimed to make players think of our gameplay and lore when they looked at our game. Story for the rescue! We used it to support other elements better, especially gameplay and the clarity of it. We keeped levels at the stage of blockout during prototyping and tests. Finishing it, decorating, and filling with final assets too early might have resulted in unnecessary work. Sound and music provided feedback to players (told them what\u0026rsquo;s happening) and set the atmosphere, as we believed that sound is as important as visuals. We were able to show many things in a more natural, \u0026ldquo;human-friendly\u0026rdquo; way, rather than with standardized and abused (and not always perfect) video game patterns. We approached tutoring players as another important element that needed intentional planning and design. We went with \u0026ldquo;a seamless approach\u0026rdquo; to keep the players immersed, and we were happy with the results. Things usually took longer than expected. Despite saving a part of our time budget as a safety buffer, we lacked time for testing some sections of our levels or realizing a few gameplay ideas. This is what we aim to enhance in the future. We shouldn\u0026rsquo;t have feared to sacrifice something we\u0026rsquo;ve been working on for some time, if it didn\u0026rsquo;t help our game. \u0026ldquo;Heartbreaker\u0026rdquo; got better after such cuts and that\u0026rsquo;s what mattered. Sources \u0026amp; Additional Materials \u0026ldquo;How to become a Game Producer #1\u0026rdquo; – partly a promotion for the Futuregames game producer course, but this webinar offers valuable info about being a producer. Part #1. \u0026ldquo;How to become a Game Producer #2\u0026rdquo; – and part #2 here. \u0026ldquo;The Strange and Unseen History of Portal\u0026rdquo; – a video about the development of \u0026ldquo;Portal\u0026rdquo;. It mentions how the gameplay was built and polished first and the story got built upon it. \u0026ldquo;Narbacular Drop\u0026rdquo; gameplay – a game made by DigiPen Institute of Technology students that became a foundation of the original \u0026ldquo;Portal.\u0026rdquo; \u0026ldquo;The Art of Game Design: A Book of Lenses, Third Edition\u0026rdquo; – the bible of game design by Jesse Schell. Jeff Horal ArtStation \u0026ldquo;Designing a Seamless Tutorial. Case Study of \u0026ldquo;Guiding Light\u0026rdquo; – my another article about seamless tutorials. "},{
  "section": "Blog",
  "slug": "/blog/post-1/",
  "title": "Designing a Seamless Tutorial. Case Study of &#34;Guiding Light&#34;",
  "description": "",
  "date": "July 30, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/post-1/post-1_hu15aada9750093d492186d7bc841149c3_326162_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/post-1\\/post-1_hu15aada9750093d492186d7bc841149c3_326162_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/post-1/post-1_hu15aada9750093d492186d7bc841149c3_326162_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/post-1\\/post-1_hu15aada9750093d492186d7bc841149c3_326162_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Game Production",
  "tags": "tutorials, design, production",
  "content":" Games take different approaches to teaching players how to play. Some provide explicit tutorials before the game starts, some offer no guidance, leaving players to figure out the mechanics on their own (or check a wiki), and others teach players seamlessly as they play. During the development of our game, \u0026ldquo;Guiding Light\u0026rdquo;, we decided that we need the latter approach.\nWhat Is a Seamless Tutorial and What Is This Text About A \u0026ldquo;seamless tutorial\u0026rdquo;, in our case, is \u0026ldquo;a tutorial you don\u0026rsquo;t feel is a tutorial.\u0026rdquo;\nThis text is a case study of a game I coworked on for the courses conducted by Lodz University of Technology, and depicts our design path, assumptions, conclusions, what worked out, and what could be done better. It will be easier for you to follow the text if you get to know \u0026ldquo;Guiding Light\u0026rdquo; first (you can even download and play it).\n\u0026ldquo;Guiding Light\u0026rdquo; is a game in which you\u0026rsquo;re a lighthouse keeper in the Pole of Cold. It\u0026rsquo;s a casual time-management game, and your goal is not only guiding ships in a stormy night, but also collecting their cargos to feed hungry penguins!\nWhy We Wanted Seamless Tutoring The main reason our game needed a seamless tutorial was that we were presenting the demo during short hands-on sessions. \u0026ldquo;Guiding Light\u0026rdquo; was destined to be showcased at the ZTGK 2024 Gamedev Contest, meaning the jury members had only a few minutes to play and talk with us at our stand. The game had to be both clear and fun from the very first seconds.\nWe deeply analyzed the nature of our game and circumstances, and concluded that:\nConclusion\nWithout tutoring, \u0026ldquo;Guiding Light\u0026rdquo; would be unclear and frustrating. With a traditional tutorial, it could be less fun, immersion-breaking, or cluttered with too much text.\nAnd we simply found such tutoring elegant and fitting our game.\nCase Study of \u0026ldquo;Guiding Light\u0026rdquo; Now let me present elements of game design we decided to apply to teach players how to play, but to keep the experience fun, approachable, immersive, and seamless.\nWe Taught the Player Sooner Than Expected We applied the first element of tutoring earlier than some might think\u0026hellip; in the main menu. The first thing we wanted to teach players was that in our game they control a beam of light with a mouse. Take a look at our menu:\nFancy, simple, and players got it subconsciously. And the game hasn\u0026rsquo;t even started yet! We aimed to highlight something really important – controlling the light, the absolute basics. It turned out, we didn\u0026rsquo;t need a single word, image, or animation for it, as our tests proved it is clear for the players. This is where we came to these conclusions:\nConclusion\nWe managed to teach players subconsciously here by designing the basics (main menu) in a gameplay-supportive way.\nConclusion\nIf some things could be explained without a single word, we didn\u0026rsquo;t use any. We seeked the most simple solution for explaining our gameplay.\nTo support this, I would like to show examples from other games that do similar things:\n\u0026ldquo;Fruit Ninja\u0026rdquo; main menu \u0026ldquo;Mega Man X\u0026rdquo; main menu In case of \u0026ldquo;Fruit Ninja\u0026rdquo; you need to cut a fruit to choose an option in the main menu. What a beautiful way to highlight the main thing you do in the game! I suspect there could be a fraction of players that would try to press a fruit instead of cutting it. In that case such menu lets them learn how to perform the most basic action in the game.\n\u0026ldquo;Mega Man X\u0026rdquo; main menu has a little Mega Man as a \u0026ldquo;cursor\u0026rdquo;. When choosing an option, Mega Man fires a blast. This highlights that Mega Man can fire projectiles.\nTutoring Was No Exception to the Gameplay Loop \u0026ldquo;Guiding Light\u0026rdquo; consists of six levels. This means that gameplay loop is closed inside every level. So a tutorial that is detached from the rest of the levels (i.e. you do stuff to learn how to play before you enter the main game) would be a major inconsistency. We wanted to keep the gameplay loop consistent between the levels and present just the game with six levels. Not a game with \u0026ldquo;a tutorial + three levels.\u0026rdquo; It also supported introducing new mechanics gradually, level by level.\nThe solution was to make the first three levels introductory – gradually building the level of complexity. The formula was something like this:\nLevel 1: explaining controls + context + gameplay loop Level 2: explaining new type of ship + the first ability + gameplay loop Level 3: upgrades + enemies + gameplay loop In the rest of the levels (4-6), the players are on their own and need to utilize everything they learned during levels 1-3. Most importantly, the gameplay loop remains consistent. Playtests showed that players didn\u0026rsquo;t feel like they were \u0026ldquo;inside a tutorial\u0026rdquo; previously and are finally in the game starting from level 4.\nThe micro loop in \u0026ldquo;Guiding Light\u0026rdquo; was built around guiding the ships to the port and the macro loop around guiding enough food ships to the port so all the penguins are fed, and the level is completed.\nConclusion\nWe wanted to ensure that each level mirrors the gameplay loop. Even in \u0026ldquo;directed tutoring levels.\u0026rdquo;\nThis is the same approach that \u0026ldquo;Railbound\u0026rdquo; takes. Even if the first levels are supposed to teach the players some basics, all the levels share the same goal. Always. The consistency is kept no matter how complex the levels are.\nThe first level of \u0026ldquo;Railbound\u0026rdquo;. Each next level keeps its gameplay loop and the goal: connecting carriages to the engine. Prompts vs Panels Before we follow the tutoring process from the beginning, I\u0026rsquo;d like to introduce two handy terms regarding showing information to player. A prompt, and a panel.\nPrompt, \u0026ldquo;Call of Duty: Advanced Warfare\u0026rdquo; Panel, \u0026ldquo;#DRIVE\u0026rdquo; Prompt – either non-diegetic or geometric message to the player. It may contain text, icons, or both, with simple and\u0026nbsp;short instructions for controls. Panel – usually a non-diegetic (but sometimes geometric) overlay aimed at explaining more complex aspects of\u0026nbsp;the\u0026nbsp;game. It uses text, images, videos, animations, or a combination of these elements. Because a panel contains more content the player needs to acknowledge, showing it often pauses the game. The above definitions are my own (I will use them from now on). However, I have included two terms from the literature in these definitions:\nInfo\nNon-diegetic elements are UI elements residing in the non-fictional, non-spatial part of the design space. These are elements presented in an overlay manner.\nInfo\nGeometric elements are UI elements presented in the 3D geometry without being an entity of the fictional game world.\nSource: Beyond the HUD: User Interfaces for Increased Player Immersion in FPS Games: Master of Science Thesis\nI decided to include those terms in this post to highlight that prompts and panels can exist in different spaces – they can be presented in an overlay manner or can be hovering somewhere in the game world. You can also observe it in our game. The \u0026ldquo;diegetic/non-diegetic\u0026rdquo; terminology is widely used in gamedev, so those terms are worth knowing.\nIn \u0026ldquo;Guiding Light\u0026rdquo; we prefer prompts over panels. This is, again, because we found prompts being the simplest solution to show aspects such as controls. However, panels do exist in the game, but they serve as credits or \u0026ldquo;level completed\u0026rdquo; screen.\nControls, Goal, and Context The first thing you see in the game is an old lighthouse keeper who accompanies the player throughout. He communicates using dialogue boxes with subtitles and voiceover. We chose this over an instruction panel because what the player is told matches the game lore and a speaking character is multisensory (text + audio).\nConclusion\nOur playtesters absorbed multisensory information better. A short call to action with text and voiceover was more effective than a panel with raw text information.\nThere is also a floating prompt with mouse icon (left mouse button highlighted) to indicate that the player needs to press it for something to happen:\nConclusion\nIf a button prompt appeared out of nowhere and attracted attention, players pressed it.\n\u0026ldquo;Ahoy, lighthouse adept! The weather is awful, so we need to light the way for the ships. Let\u0026rsquo;s guide them to the port!\u0026quot; What do the players learn from this voiceline? The goal and the context of the game. What do I need to do? I need to guide the ships. But why? Ah, because the weather is awful. The Left Mouse Button is always used to start the level by turning the light on. From the main menu, players already know that the mouse is used to move the beam. There are no direct instructions or mentions of illuminating the ship – everything is embedded in the game\u0026rsquo;s lore. Our playtests showed that players easily figured out how to illuminate the way in front of the ships, and therefore, control them.\nStopping Progress Until Players Use the New Mechanic The next element of tutoring is embedded into the level design. It\u0026rsquo;s crucial for players to \u0026ldquo;feel\u0026rdquo; the ships at this point. The most important things they need to learn are how to turn the ships, slow them down, and make them accelerate.\nThe shape of the canal requires players to make a turn. Therefore, they need to successfully turn to reach the destination – the port. This leads to an idea we loved in terms of introducing new gameplay mechanics:\nConclusion\nIf we gave the players something new, it was good to lock them with this new thing, and make them use it to get out.\nIn \u0026ldquo;Guiding Light\u0026rdquo; we ensure that you learn how to control the ship when you pass the first canal – curved enough to require you to turn and wide enough to give you a peaceful space to learn. And even when the ship gets crashed, a new one flows in quickly.\nAs a supplemental example of preventing progression until the players use a new \u0026ldquo;toy\u0026rdquo;, let\u0026rsquo;s take \u0026ldquo;Hollow Knight\u0026rdquo;, a challenging action-adventure metroidvania. At the beginning of the game the players can earn a \u0026ldquo;Vengeful Spirit\u0026rdquo; spell that launches a projectile hurting enemies. A little further in Ancestral Mound there is a passage guarded by Elder Baldur. This enemy cannot be hurt with a nail (melee) attack, so in order to progress (beating this particular enemy is mandatory) the players need to defeat the Elder Baldur with the \u0026ldquo;Vengeful Spirit\u0026rdquo;.\nThis way, developers made sure players know how to use this spell and will be able to utilize it later too.\nDots and Connections Let\u0026rsquo;s go back to our canal and the ship. When it arrives to the port, the old lighthouse keeper calls again:\nThere are multiple things happening:\nthe voiceline: indicates that the ship with food has arrived and that the penguin can be fed the space button prompt: shows that we should press this button the blinking ship: attracts attention and highlights that we should interact with it in some way Note\nBy the way, after we press Space, we leave the lighthouse and are able to control the hovercraft with WASD keys:\nWe presented these pieces of information as \u0026ldquo;dots\u0026rdquo; and let the players connect them.\nTurned out that in this level it was delivered clearly enough, so our playtesters managed to discover the connections between pieces of information easily:\nIn this case, we built enough context and presented what needs to be done in a peaceful environment. Players did what we wanted and we preserved a minor \u0026ldquo;Eureka!\u0026rdquo; feeling.\nConclusion\nShowing players what needs to be done with enough context, instead of giving them step-by-step instructions, worked for us.\nAnd to achieve this we used:\na voiceline with text and audio button prompts a blinking effect on a ship What\u0026rsquo;s more, connecting dots wasn\u0026rsquo;t like \u0026ldquo;solving a puzzle\u0026rdquo;. Players didn\u0026rsquo;t need to stop for a while to figure out what to do. It was natural and this was our desired experience. At the end of the level, you see a fish being thrown to the penguin, which then happily jumps into the water. This provides instant feedback and serves as a reward, indicating that we performed as the game intended.\nExplaining More Complex Systems \u0026ldquo;Guiding Light\u0026rdquo; has also two more introductory levels. The player is taught there with mostly what I\u0026rsquo;ve already covered, even in more complex cases. Were we successful in those cases? I\u0026rsquo;ll answer that at the end of the article. Now, there are more gameplay aspects that need to be explained:\na new type of ship: with fuel – this is a sort of a \u0026ldquo;currency\u0026rdquo; that players can collect an spend either on upgrading the lighthouse or buying the \u0026ldquo;flash\u0026rdquo; ability upgrading the lighthouse – by spending the packages in the workshop, we can make the light beam brigther and wider to make the ships more responsive the flash – by spending the packages in the generator, we can obtain an ability to stop all the ships in the canal for a while the pirates – they attack all the friendly ships! The \u0026ldquo;Flash\u0026rdquo; Ability A Pirate Ship A Ship With Fuel Upgrading The Lighthouse Firstly, we need to explain a new type of ship that we must guide to the port, similarly to the food ship. However, with this ship, we obtain and keep the package as \u0026ldquo;currency\u0026rdquo;.\nTo teach this, we use:\nvoiceline (text + audio) prompts blinking effect This is how the situation looks after it arrives to the port:\nWe hear \u0026ldquo;Now go, take the package!\u0026rdquo;. As this is accompanied by space button prompt, and the players have already taken one package in the previous level, it is easy for them to figure out what to do. After that we use another voiceline together with a blinking effect on the generator that is needed to obtain the \u0026ldquo;flash\u0026rdquo; ability:\nTo complete this level while maintaining the gameplay loop, we need to feed the penguins by guiding a food ship. This time, however, we face a huge ship! The flash ability is crucial here – it allows us to stop and turn the large ship. But how do we learn it?\nWe, the developers, again aim to \u0026ldquo;lock the players with a new mechanic and make them use it to progress.\u0026rdquo; The upper part of the canal is so narrow and curved that it forces players to use the new ability to stop the ship. To assist them, we provide a QTE-like prompt:\nAfter they succeed, we provide feedback with a voiceline:\nThe level is finished after we guide this ship to the port and feed the penguins (consistent gameplay loop).\nThe same techniques are used in the third introductory level to explain upgrading the lighthouse. However, another gameplay aspect – pirates – provides an opportunity for a different tutoring technique. We used the following technique not necessarily to teach, but to make tutoring more enjoyable:\nLeaving A Surprise To Discover When pirates appear in the third level, this is what the players are told:\nNote that the players are not being told how to destroy the pirate ships. The most intuitive way of doing this is\u0026hellip; guess what – guiding the pirates onto ice floes.\nBut players can leave the lighthouse! Have you considered what might happen if we bump into ships with our hovercraft? This:\nWhy we decided to keep it a secret:\nNot everyone will discover it: While some may see it as a drawback, this creates a slightly different experience for each player, which we can allow. It’s a minor detail that doesn’t impact victory. Watching someone else play and discover this feature leaded to several reactions like, \u0026ldquo;Woah! You can do that?!\u0026rdquo; It creates an \u0026ldquo;Eureka!\u0026rdquo; moment: Players had an \u0026ldquo;Aha!\u0026rdquo; moment when they realized, \u0026ldquo;I can bump into ships too!\u0026rdquo; Unexpected and funny situations: While bumping into a friendly ship might not be ideal, it\u0026rsquo;s fair. During playtests, one player left the lighthouse early in the second level and accidentally destroyed a food ship. He laughed and said, \u0026ldquo;I literally crashed into it, what did I expect?\u0026quot; This is similar to players testing if fire causes damage in a game, and being surprised when it does (it usually does 😉). However, we had to be careful with it. We knew that we shouldn\u0026rsquo;t hide any crucial information from players. For example, keeping secret which buttons to press to move would probably not be fun.\nConclusion\nIt was worth it to come up with \u0026ldquo;a minor thing to discover\u0026rdquo;. Optional for players to perform well, but satisfactory enough when they discovered it. It created a few hilarious emergent gameplay situations.\nMy favorite example of a game using this technique is \u0026ldquo;The Legend of Zelda: Breath of the Wild\u0026rdquo;. If you played this game you might know that warm air (heated by a burning grass) can make your paraglider elevate. Someone designed this and made it a secret intentionally. This is why discovering such things in \u0026ldquo;Breath of the Wild\u0026rdquo; makes so much fun!\nLink\u0026rsquo;s paraglider being elevated with warm air. What Could Be Done Better While our team is quite satisfied with how tutoring in \u0026ldquo;Guiding Light\u0026rdquo; fared, I\u0026rsquo;d like to highlight one thing that really bothers me. The \u0026ldquo;flash\u0026rdquo; mechanic and upgrading lighthouse were supposed to be the main pillars of expanding gameplay and making it something more than just guiding ships. We feel that these elements could have been explained better. But a deeper analysis led us to a conclusion that it\u0026rsquo;s not necessarily the problem of \u0026ldquo;tutoring directing\u0026rdquo; that misfits, but rather a general UX and (mostly) UI problem.\nConclusion\nWe understood that tutoring needs to be followed with a well-thought out remainder of UX elements, and a clear and intuitive UI too.\nA main UI element presenting: time until the level ends, number of packages, remaining flashes, and lighthouse level. The main element of our interface is, indeed, functional and serves its purpose, but feedback we got indicated that it could be designer more clearly. For example, we could revamp the icon and text colors to make particular indicators easier to identify. We could, perhaps, transfer number of packages or lighthouse level to game world and locate the icons next to objects related to those UI elements. We also have suplemental diegetic indicators for lighthouse level, number of packages, and remaining flashes, but they were quite difficult to notice in dynamic gameplay. I\u0026rsquo;ll leave it as an exercise for you to discover them yourself!\nWhat\u0026rsquo;s funny, we knew that design of our UI (especially its colors) can be better before presenting the game! Unfortunately, we didn\u0026rsquo;t manage to rework our UI framework to deliver a more sophisticated design before the deadline. I\u0026rsquo;d like to highlight here that \u0026ldquo;Guiding Light\u0026rdquo; uses its own, custom game engine, we had much more challenges to tackle, and we simply didn\u0026rsquo;t have time left for polishing this aspect.\nSummary A lot of effort went into designing and developing this game. That\u0026rsquo;s a credit to our amazing team delivering high quality engine, tools, rendering, and art. Designing a game\u0026rsquo;s tutorial was my job, although the whole team was engaged in the process. Shoutout to our lead designer, Miłosz who helped me with the vision of guiding players, and then made it real, programming it. I want to thank my teachers: Jarosław Andrzejczak, PhD, and Artur Ganszyniec, whose work has vastly influenced my approach to game production and design. I’m glad they appreciated the tutoring in \u0026ldquo;Guiding Light\u0026rdquo; too! 😊\nHere\u0026rsquo;s a summary of our thoughts:\nConclusion summary\nWithout tutoring, \u0026ldquo;Guiding Light\u0026rdquo; would be unclear and frustrating. With a traditional tutorial, it could be less fun, immersion-breaking, or cluttered with too much text. In some simple cases we managed to teach players subconsciously by designing the basics (such as main menu) in a gameplay-supportive way. If some things could be explained without a single word, we didn\u0026rsquo;t use any. We seeked the most simple solution for explaining our gameplay. We wanted to ensure that each level mirrors the gameplay loop. Even in \u0026ldquo;directed tutoring levels.\u0026rdquo; If a button prompt appeared out of nowhere and attracted attention, players pressed it. Our playtesters absorbed multisensory information better. A short call to action with text and voiceover was more effective than a panel with raw text information. If we gave the players something new, it was good to lock them with this new thing, and make them use it to get out. Showing players what needs to be done with enough context, instead of giving them step-by-step instructions, worked for us. It was worth it to come up with \u0026ldquo;a minor thing to discover\u0026rdquo;. Optional for players to perform well, but satisfactory enough when they discovered it. It created a few hilarious emergent gameplay situations. We understood that tutoring needs to be followed with a well-thought out remainder of UX elements, and a clear and intuitive UI too. Sources \u0026amp; Additional Materials \u0026ldquo;Sequelitis - Mega Man Classic vs. Mega Man X\u0026rdquo; – an analysis of \u0026ldquo;Mega Man X\u0026rdquo; tutoring – the most seamless tutorial you will ever see. Must watch! Beyond the HUD: User Interfaces for Increased Player Immersion in FPS Games: Master of Science Thesis "}]
