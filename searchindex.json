[{
  "section": "Blog",
  "slug": "/blog/post-1/",
  "title": "Why Tutorial in Your Game Sucks (And What To Do About It)",
  "description": "",
  "date": "July 30, 2024",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/post-1/post-1_hu15aada9750093d492186d7bc841149c3_326162_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/post-1\\/post-1_hu15aada9750093d492186d7bc841149c3_326162_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/posts/post-1/post-1_hu15aada9750093d492186d7bc841149c3_326162_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/posts\\/post-1\\/post-1_hu15aada9750093d492186d7bc841149c3_326162_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Game Production",
  "tags": "tutorials, design, production",
  "content":" Someone testing your game might point out that your tutorial is not fun. You, a developer convinced about its tutoring power, say: \u0026ldquo;It\u0026rsquo;s a tutorial. It\u0026rsquo;s supposed to teach the player how to play, not to be fun.\u0026rdquo;\nNothing could be further from the truth!\nAnswering The Question Why is your tutorial NOT fun? Player feedback might mention it\u0026rsquo;s too long, overwhelming, or text-heavy. While these points are often valid, they miss the core issue: the form, pacing, and structure of the tutorial. Players shouldn\u0026rsquo;t even realize they\u0026rsquo;re being taught and the joy of discovering the game should remain intact.\nA Tutorial I Didn\u0026rsquo;t Like Let\u0026rsquo;s look at an acclaimed game that has a tutorial which doesn\u0026rsquo;t align with my design philosophy. \u0026ldquo;The Witcher 2: Assasins of Kings\u0026rdquo; is a great game, but the way it guides players differs from how I would approach it. I show this example to emphasize that even highly acclaimed AAA games can do it better and designing a good tutorial is a difficult task.\n\u0026ldquo;The Witcher 2: Assasins of Kings\u0026rdquo; by CD Projekt RED If you want to remind \u0026ldquo;The Witcher 2\u0026rdquo; tutorial, there\u0026rsquo;s a nice video by BNGamesReviews (though I strongly recommend playing the game if you haven\u0026rsquo;t):\nAnd here are the greatest sins of the tutorial in \u0026ldquo;The Witcher 2\u0026rdquo;:\nDetached From The Main Game The tutorial in \u0026ldquo;The Witcher 2\u0026rdquo; is optional and detached from the story. You are supposed to hop into the tutorial to learn how to play before you start the prologue. I find this bad.\nThe prologue should serve as an introduction and seamlessly get the player to know the fundamentals of the gameplay.\nLuckily, \u0026ldquo;The Witcher 3\u0026rdquo; keeps off this approach. Have you noticed that the whole region of White Orchard (and Geralt\u0026rsquo;s dream before) serves as a seamless tutorial? You learn how to play by playing the game and being introduced slowly and seamlessly. That\u0026rsquo;s great!\nTutorial About The Tutorial The first thing you see when the camera zooms in on Geralt during the tutorial is this panel:\nThere are multiple reasons why this is bad:\nyou immediately tell the players: \u0026ldquo;Now you will be taught how to play!\u0026rdquo; Felling that you\u0026rsquo;re being taught how to play is like doing homework. The fun gets killed. the players want to play but you stop them. You may ask: \u0026ldquo;How do I make them play if they don\u0026rsquo;t know how?\u0026rdquo; Well, probably at the stage when Geralt has to move forward they\u0026rsquo;ll get it quickly (and later on I\u0026rsquo;ll show you how to make them get it seamlessly). that\u0026rsquo;s a lot of text. Players don\u0026rsquo;t like to read through tutorials. Don\u0026rsquo;t get me wrong: I have nothing against text in games. There are many titles such as Disco Elysium that nail the art of written content, but I\u0026rsquo;m talking about in-your-face tutorial panels. it breaks immersion. Each of these panels pulls you further from the world of The Witcher. There are, however, some minor advantages:\nwe show the players that they can return to particular hints later (we can still show it more seamlessly, so this advantage doesn\u0026rsquo;t matter anyway) we foreshadow the convention of tutorial panels and then stick to it (I don\u0026rsquo;t find those panels a good method, so this advantage doesn\u0026rsquo;t matter either) As I mentioned above, it\u0026rsquo;s not bad to inform players they can return to specific hints later. However, this isn\u0026rsquo;t the best moment to do so. An \u0026ldquo;encyclopedia\u0026rdquo; of game mechanics is useful, but it should be introduced later as a brief reminder, not as the first thing players see in the game.\nPanels For The Most Basic Controls OK, you got tutored about tutoring. You close this panel and start playing!\nNo.\nThis is what you see next:\nDo we really need this panel to explain what the left and right analog sticks do? If we were explaining more complicated game mechanics this could be reasonable (although many things can be explained without it).\nInstead of a panel, imagine just a prompt. Let\u0026rsquo;s distinguish these two terms now:\nPrompt Panel Prompt – either non-diegetic or geometric message to the player. It may contain text, icons, or both, with simple and short instructions for controls. Panel – usually a non-diegetic (but sometimes it can be geometric) overlay aimed at explaining more complex aspects of the game. It uses text, images, videos, animations, or a combination of these elements. Because a panel contains more content the player needs to acknowledge, showing it often pauses the game. The above definitions are my own (I will use them from now on). However, I have included two terms from the literature in my definitions:\nInfo\nNon-diegetic elements are UI elements residing in the non-fictional, non-spatial part of the design space. These are elements presented in an overlay manner.\nInfo\nGeometric elements are UI elements presented in the 3D geometry without being an entity of the fictional game world.\nSource: Beyond the HUD: User Interfaces for Increased Player Immersion in FPS Games: Master of Science Thesis\nI believe the controls would still be clear if we swapped overwhelming panels with simple prompts. The camera focuses on The Witcher. A prompt appears:\nUse to look around.\nAlong with another one after the player uses the first (right) stick:\nUse to move.\nWhen using such simple prompts, it\u0026rsquo;s important that the players have feedback and see the results of taking action. In our case it\u0026rsquo;s immediate, because the character starts moving and the camera starts rotating.\nTip\nWhen introducing something new, use the simplest understandable explanation.\nOften we can simplify this even more using just the icons or animations showing how to perform an action. This works, if done well, because\u0026hellip;\nTip\nIf a button icon appears out of nowhere and attracts attention, players press it.\nNow you might be thinking that I am talking about absolute trivia but an example of \u0026ldquo;The Witcher 2\u0026rdquo; shows that it\u0026rsquo;s less obvious and more important that you\u0026rsquo;d think. Camera and movement are just a tip of the iceberg. In section \u0026ldquo;Case Study – Seamless Tutorial\u0026rdquo; I show that even such simple prompts can be effective enough in more complex cases.\nAn in-depth analysis of \u0026ldquo;The Witcher 2\u0026rdquo; tutorial is not a main point of this post, so I\u0026rsquo;ll just briefly point out the rest of things I didn\u0026rsquo;t enjoy:\nToo Rushed According to howlongtobeat.com, \u0026ldquo;The Witcher 2\u0026rdquo; takes around 35 hours to finish during an average playthrough (main story + side quests). And all the most important mechanics are being explained during a half an hour tutorial!\nThere\u0026rsquo;s a need of explaining alchemy? Why don\u0026rsquo;t we introduce it when it\u0026rsquo;s needed for the first time? It could be during preparations before the fight with Kayran in Flotsam (a first major boss you face in the game). And so on with rest of the systems\u0026hellip; I find providing too much information at once a bad practice.\nInconsistent With The Game World, Immersion-Breaking I am talking mostly about the combat part. The game speaks directly to players and spawns enemies in front of them out of nowhere. Who are these people we kill? Why do they appear out of nowhere? This is immersion-breaking and definitely builds a bad first impression.\n\u0026ldquo;Oh, yeah, I\u0026rsquo;ve just spawned out of nowhere and I\u0026rsquo;m standing still. Now kill me.\u0026rdquo;\nIn case of \u0026ldquo;The Witcher 2\u0026rdquo; I think that not only was the tutorial not fun, but also moderately effective. \u0026ldquo;The Witcher 2\u0026rdquo; is often listed among the worst game tutorials for a reason. Luckily, an off-putting tutorial was not followed by a bad game, and what\u0026rsquo;s more, CD Projekt RED took a lesson and the process of tutoring players got vastly improved in the next installment of \u0026ldquo;The Witcher\u0026rdquo; series.\nThe Best Tutorial Is The One You Don\u0026rsquo;t Feel The Answering The Question section says that the process of tutoring players should be embedded into the game. And this is the moment where you should forget about tutorials. You shouldn\u0026rsquo;t even use this word in your game.\nNow it\u0026rsquo;s finally time for the \u0026ldquo;What To Do About It\u0026rdquo; part!\nCase Study – Seamless Tutorial \u0026ldquo;Guiding Light\u0026rdquo; Note\nIt will be easier for you to follow the text if you get to know \u0026ldquo;Guiding Light\u0026rdquo; first (you can even download and play it).\n\u0026ldquo;Guiding Light\u0026rdquo; gameplay:\nDuring the development of our game, one of my responsibilities was designing a game \u0026ldquo;tutorial\u0026rdquo;. From the beginning, I knew that a regular tutorial was not an option. Along with our lead designer Miłosz, I came up with the idea of a special \u0026ldquo;directing\u0026rdquo; of the first three levels – to guide players without making them feel like it\u0026rsquo;s a tutorial.\nBut the first element of tutoring appears even earlier\u0026hellip; in the main menu.\nYou Can Teach The Player Earlier Than You Think The first thing we wanted to teach players was that in our game they control a beam of light with a mouse. Take a look at our menu:\nFancy, simple, and players got it subconsciously. This was the simplest possible solution to show this. And the game hasn\u0026rsquo;t even started yet! Sometimes you don\u0026rsquo;t need a single word, image, or a prompt to highlight something. You should aim to highlight something really important. In our case it was controlling the light.\nTip\nYou can teach the player subconsciously by designing the basics (such as main menu) in a gameplay-supportive way.\nKeep The Gameplay Loop Consistent, Tutoring Is Not An Exception \u0026ldquo;Guiding Light\u0026rdquo; consists of six levels. This means that gameplay loop is closed inside every level. So a tutorial that is detached from the rest of the levels would be a major inconsistency, and gameplay loop should be consistent between the levels (at least in our case we wanted it to be). It is also crucial that introduction of new mechanics needs to happen step by step and arise gradually.\nThe solution was to make the first three levels introductory – gradually building the level of complexity. The formula was something like this:\nLevel 1: explaining controls + context + gameplay loop Level 2: explaining new type of ship + the first ability + gameplay loop Level 3: upgrades + enemies + gameplay loop In the rest of the levels (4-6), the players are on their own and need to utilize everything they learned during levels 1-3. Most importantly, the gameplay loop remains consistent. Players won\u0026rsquo;t feel like they were \u0026ldquo;inside a tutorial\u0026rdquo; previously and are finally in the game starting from level 4.\nThe micro loop in \u0026ldquo;Guiding Light\u0026rdquo; was built around guiding the ships to the port and the macro loop around guiding enough food ships to the port so all the penguins are fed – and the level is completed.\nTip\nRegardless of the \u0026ldquo;tutorial\u0026rdquo; form, ensure it somehow mirrors the gameplay loop.\nNow let\u0026rsquo;s follow the tutoring process from the beginning:\nControls, Goal, Context The first thing you see in the game is an old lighthouse keeper who accompanies the player throughout. He communicates using dialogue boxes with subtitles and voiceover. This is better than an instruction panel because what the player is told matches the game lore and a speaking character is multisensory (text + audio).\nTip\nPeople absorb multisensory information better. A short call to action with text and voiceover will work better than a panel with raw text information.\nThere is also a floating prompt with mouse icon (left mouse button highlighted) to indicate that the player needs to press it for something to happen:\nWhat the players learn from the voiceline: the goal and the context of the game. What do I need to do? I need to guide the ships. But why? Ah, because the weather is awful. The Left Mouse Button is always used to start the level by turning the light on. From the main menu, players already know that the mouse is used to move the beam. There are no direct instructions or mentions of illuminating the ship – everything is embedded in the game\u0026rsquo;s lore. Our playtests showed that players easily figured out how to illuminate the way in front of the ships, and therefore, control them.\nThe next element of tutoring is embedded into the level design. It\u0026rsquo;s crucial for players to \u0026ldquo;feel\u0026rdquo; the ships at this point. The most important things they need to learn are how to turn the ships, slow them down, and make them accelerate.\nThe shape of the canal requires players to make a turn. Therefore, they need to successfully turn to reach the destination – the port. This leads to an important principle of introducing new gameplay mechanics:\nTip\nIf you give the players something new, lock them with this new thing, and make them use it to get out.\nI have seen it in many games. Let\u0026rsquo;s take \u0026ldquo;Ghostrunner\u0026rdquo;, a hardcore FPP platformer. This game typically requires you to successfully perform new moves you learn to progress further. In my opinion, \u0026ldquo;Ghostrunner\u0026rdquo; has excellent seamless tutoring (though not the best! Be sure to check Sources \u0026amp; Additional Materials).\nIn \u0026ldquo;Guiding Light\u0026rdquo; we ensure that you learn how to control the ship when you pass the first canal – curved enough to require you to turn and wide enough to give you a peaceful space to learn. And even when the ship gets crashed, a new one flows in quickly.\nWhen this ship arrives to the port, the old lighthouse keeper calls again:\nThere are multiple things happening:\nthe voiceline: indicates that the ship with food has arrived and that the penguin can be fed the space button prompt: shows that we should press this button the blinking ship: attracts attention and highlights that we should interact with it in some way Note\nAfter we press space, we leave the lighthouse and are able to control the hovercraft with WASD keys:\nLet\u0026rsquo;s present these pieces of information as \u0026ldquo;dots\u0026rdquo; and let the players connect them. If this is delivered clearly, the players can discover the connections between pieces of information on their own easily.\nPlaytests showed that it wasn\u0026rsquo;t hard for the players to come up with the connections:\nIf you build enough context and present what needs to be done clearly and in a peaceful environment, players will eventually do that. And you will preserve a minor \u0026ldquo;Eureka!\u0026rdquo; feeling.\nTip\nInstead of giving step-by-step instructions, show players what needs to be done with enough context. This way, they can quickly figure it out on their own.\nAnd to achieve this we used:\na voiceline with text and audio button prompts a blinking effect on a ship In case of \u0026ldquo;Guiding Light\u0026rdquo; it wasn\u0026rsquo;t like \u0026ldquo;solving a puzzle\u0026rdquo;. Players didn\u0026rsquo;t need to stop for a while to figure out what to do. It was natural and this was our desired experience. At the end of the level, you see a fish being thrown to the penguin, which then happily jumps into the water. This provides instant feedback and serves as a reward, indicating that we performed as the game intended.\nExplaining More Complex Systems \u0026ldquo;Guiding Light\u0026rdquo; has also two more introductory levels. Now I\u0026rsquo;ll show you that the player is taught with mostly what I\u0026rsquo;ve already covered even in more complex cases! There are more gameplay aspects that need to be explained:\na new type of ship: with fuel – this is a sort of a \u0026ldquo;currency\u0026rdquo; that players can collect an spend either on upgrading the lighthouse or buying the \u0026ldquo;flash\u0026rdquo; ability upgrading the lighthouse – by spending the packages in the workshop, we can make the light beam brigther and wider to make the ships more responsive the flash – by spending the packages in the generator, we can obtain an ability to stop all the ships in the canal for a while the pirates – they attack all the friendly ships! The \u0026ldquo;Flash\u0026rdquo; Ability A Pirate Ship A Ship With Fuel Upgrading The Lighthouse Firstly, we need to explain a new type of ship that we must guide to the port, similarly to the food ship. However, with this ship, we obtain and keep the package as \u0026ldquo;currency\u0026rdquo;.\nTo teach this, we use:\nvoiceline (text + audio) prompts blinking effect This is how the situation looks after it arrives to the port:\nWe hear \u0026ldquo;Now go, take the package!\u0026rdquo;. As this is accompanied by space button prompt, and the players have already taken one package in the previous level, it is easy for them to figure out what to do. After that we use another voiceline together with a blinking effect on the generator that is needed to obtain the \u0026ldquo;flash\u0026rdquo; ability:\nTo complete this level while maintaining the gameplay loop, we need to feed the penguins by guiding a food ship. This time, however, we face a huge ship! The flash ability is crucial here – it allows us to stop and turn the large ship. But how do we learn it?\nWe, the developers, again aim to \u0026ldquo;lock the players with a new mechanic and make them use it to progress\u0026rdquo;. The upper part of the canal is so narrow and curved that it forces players to use the new ability to stop the ship. To assist them, we provide a QTE-like prompt:\nAfter they succeed, we provide feedback with a voiceline:\nThe level is finished after we guide this ship to the port and feed the penguins (consistent gameplay loop).\nThe same techniques are used in the third introductory level to explain upgrading the lighthouse. However, another gameplay aspect – pirates – provides an opportunity for a different tutoring technique. This technique is used not necessarily to teach, but to make tutoring more enjoyable:\nLeaving A Surprise To Discover When pirates appear in the third level, this is what the players are told:\nNote that the players are not being told how to destroy the pirate ships. The most intuitive way of doing this is\u0026hellip; guess what – guiding the pirates onto ice floes.\nBut players can leave the lighthouse! Have you considered what might happen if we bump into ships with our hovercraft? This:\nWhy we decided to keep it a secret:\nNot everyone will discover it: While some may see it as a drawback, this creates a slightly different experience for each player, which we can allow. It’s a minor detail that doesn’t impact victory. Watching someone else play and discovering this feature often leads to reactions like, \u0026ldquo;Woah! You can do that?!\u0026rdquo; It creates an \u0026ldquo;Eureka!\u0026rdquo; moment: Players might have an \u0026ldquo;Aha!\u0026rdquo; moment when they realize, \u0026ldquo;I can bump into ships too!\u0026rdquo; Unexpected and funny situations: While bumping into a friendly ship might not be ideal, it\u0026rsquo;s fair. During playtests, one player left the lighthouse early in the second level and accidentally destroyed a food ship. He laughed and said, \u0026ldquo;I literally crashed into it, what did I expect?\u0026quot; This is similar to players testing if fire causes damage in a game, and being surprised when it does (it does in 95% of cases 😉). However, never hide crucial information from players. For example, keeping secret which buttons to press to move would not be fun.\nTip\nCome up with a minor thing that can be a secret to discover. This thing should be optional for players to perform well, but satisfactory enough when they discover it.\nSummary I hope that now you can see a difference between in-your-face tutorials that overwhelm players and seamless tutorials that are fun, lore-accurate and more player-friendly. To make a cheat-sheet for designing a seamless tutorial in your next game, I gathered all the tips and they are presented below:\nTip Summary\nWhen introducing something new, use the simplest understandable explanation. If a button icon appears out of nowhere and attracts attention, players press it. You can teach the player subconsciously by designing the basics (such as main menu) in a gameplay-supportive way. Regardless of the \u0026ldquo;tutorial\u0026rdquo; form, ensure it somehow mirrors the gameplay loop. People absorb multisensory information better. A short call to action with text and voiceover will work better than a panel with raw text information. If you give the players something new, lock them with this new thing, and make them use it to get out. Instead of giving step-by-step instructions, show players what needs to be done with enough context. This way, they can quickly figure it out on their own. Come up with a minor thing that can be a secret to discover. This thing should be optional for players to perform well, but satisfactory enough when they discover it. Am I talking nonsense? While this post reflects my personal opinion, I believe I’ve explained many techniques that are good practices. If they weren’t, \u0026ldquo;Guiding Light\u0026rdquo; likely wouldn’t be playable or awarded. I want to thank my teachers: Jarosław Andrzejczak, PhD, and Artur Ganszyniec, whose work has vastly influenced my approach to game production and design. I’m also glad they appreciated the tutoring in \u0026ldquo;Guiding Light\u0026rdquo; too! 😊\nSources \u0026amp; Additional Materials \u0026ldquo;Sequelitis - Mega Man Classic vs. Mega Man X\u0026rdquo; – an analysis of \u0026ldquo;Mega Man X\u0026rdquo; tutoring – the most seamless tutorial you will ever see. Must watch! \u0026ldquo;10 Terrible Tutorials That Almost Killed Video Games\u0026rdquo; Beyond the HUD: User Interfaces for Increased Player Immersion in FPS Games: Master of Science Thesis "}]
